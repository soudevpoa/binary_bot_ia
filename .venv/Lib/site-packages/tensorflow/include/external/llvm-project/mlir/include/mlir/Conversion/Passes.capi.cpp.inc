/* Autogenerated by mlir-tblgen; don't manually edit. */
//===----------------------------------------------------------------------===//
// Conversion Group Registration
//===----------------------------------------------------------------------===//

void mlirRegisterConversionPasses(void) {
  registerConversionPasses();
}

MlirPass mlirCreateConversionArithToAMDGPUConversionPass(void) {
  return wrap(createArithToAMDGPUConversionPass().release());
}
void mlirRegisterConversionArithToAMDGPUConversionPass(void) {
  registerArithToAMDGPUConversionPass();
}


MlirPass mlirCreateConversionArithToArmSMEConversionPass(void) {
  return wrap(createArithToArmSMEConversionPass().release());
}
void mlirRegisterConversionArithToArmSMEConversionPass(void) {
  registerArithToArmSMEConversionPass();
}


MlirPass mlirCreateConversionArithToLLVMConversionPass(void) {
  return wrap(createArithToLLVMConversionPass().release());
}
void mlirRegisterConversionArithToLLVMConversionPass(void) {
  registerArithToLLVMConversionPass();
}


MlirPass mlirCreateConversionConvertAMDGPUToROCDLPass(void) {
  return wrap(createConvertAMDGPUToROCDLPass().release());
}
void mlirRegisterConversionConvertAMDGPUToROCDLPass(void) {
  registerConvertAMDGPUToROCDLPass();
}


MlirPass mlirCreateConversionConvertAffineForToGPUPass(void) {
  return wrap(createConvertAffineForToGPUPass().release());
}
void mlirRegisterConversionConvertAffineForToGPUPass(void) {
  registerConvertAffineForToGPUPass();
}


MlirPass mlirCreateConversionConvertArithToEmitC(void) {
  return wrap(createConvertArithToEmitC().release());
}
void mlirRegisterConversionConvertArithToEmitC(void) {
  registerConvertArithToEmitC();
}


MlirPass mlirCreateConversionConvertArithToSPIRVPass(void) {
  return wrap(createConvertArithToSPIRVPass().release());
}
void mlirRegisterConversionConvertArithToSPIRVPass(void) {
  registerConvertArithToSPIRVPass();
}


MlirPass mlirCreateConversionConvertArmNeon2dToIntrPass(void) {
  return wrap(createConvertArmNeon2dToIntrPass().release());
}
void mlirRegisterConversionConvertArmNeon2dToIntrPass(void) {
  registerConvertArmNeon2dToIntrPass();
}


MlirPass mlirCreateConversionConvertArmSMEToLLVM(void) {
  return wrap(mlir::createConvertArmSMEToLLVMPass().release());
}
void mlirRegisterConversionConvertArmSMEToLLVM(void) {
  registerConvertArmSMEToLLVM();
}


MlirPass mlirCreateConversionConvertArmSMEToSCFPass(void) {
  return wrap(createConvertArmSMEToSCFPass().release());
}
void mlirRegisterConversionConvertArmSMEToSCFPass(void) {
  registerConvertArmSMEToSCFPass();
}


MlirPass mlirCreateConversionConvertAsyncToLLVMPass(void) {
  return wrap(createConvertAsyncToLLVMPass().release());
}
void mlirRegisterConversionConvertAsyncToLLVMPass(void) {
  registerConvertAsyncToLLVMPass();
}


MlirPass mlirCreateConversionConvertBufferizationToMemRefPass(void) {
  return wrap(createConvertBufferizationToMemRefPass().release());
}
void mlirRegisterConversionConvertBufferizationToMemRefPass(void) {
  registerConvertBufferizationToMemRefPass();
}


MlirPass mlirCreateConversionConvertComplexToLLVMPass(void) {
  return wrap(createConvertComplexToLLVMPass().release());
}
void mlirRegisterConversionConvertComplexToLLVMPass(void) {
  registerConvertComplexToLLVMPass();
}


MlirPass mlirCreateConversionConvertComplexToLibm(void) {
  return wrap(createConvertComplexToLibm().release());
}
void mlirRegisterConversionConvertComplexToLibm(void) {
  registerConvertComplexToLibm();
}


MlirPass mlirCreateConversionConvertComplexToSPIRVPass(void) {
  return wrap(createConvertComplexToSPIRVPass().release());
}
void mlirRegisterConversionConvertComplexToSPIRVPass(void) {
  registerConvertComplexToSPIRVPass();
}


MlirPass mlirCreateConversionConvertComplexToStandardPass(void) {
  return wrap(createConvertComplexToStandardPass().release());
}
void mlirRegisterConversionConvertComplexToStandardPass(void) {
  registerConvertComplexToStandardPass();
}


MlirPass mlirCreateConversionConvertControlFlowToLLVMPass(void) {
  return wrap(createConvertControlFlowToLLVMPass().release());
}
void mlirRegisterConversionConvertControlFlowToLLVMPass(void) {
  registerConvertControlFlowToLLVMPass();
}


MlirPass mlirCreateConversionConvertControlFlowToSPIRVPass(void) {
  return wrap(createConvertControlFlowToSPIRVPass().release());
}
void mlirRegisterConversionConvertControlFlowToSPIRVPass(void) {
  registerConvertControlFlowToSPIRVPass();
}


MlirPass mlirCreateConversionConvertFuncToEmitC(void) {
  return wrap(createConvertFuncToEmitC().release());
}
void mlirRegisterConversionConvertFuncToEmitC(void) {
  registerConvertFuncToEmitC();
}


MlirPass mlirCreateConversionConvertFuncToLLVMPass(void) {
  return wrap(createConvertFuncToLLVMPass().release());
}
void mlirRegisterConversionConvertFuncToLLVMPass(void) {
  registerConvertFuncToLLVMPass();
}


MlirPass mlirCreateConversionConvertFuncToSPIRVPass(void) {
  return wrap(createConvertFuncToSPIRVPass().release());
}
void mlirRegisterConversionConvertFuncToSPIRVPass(void) {
  registerConvertFuncToSPIRVPass();
}


MlirPass mlirCreateConversionConvertGPUToSPIRV(void) {
  return wrap(mlir::createConvertGPUToSPIRVPass().release());
}
void mlirRegisterConversionConvertGPUToSPIRV(void) {
  registerConvertGPUToSPIRV();
}


MlirPass mlirCreateConversionConvertGpuOpsToLLVMSPVOps(void) {
  return wrap(createConvertGpuOpsToLLVMSPVOps().release());
}
void mlirRegisterConversionConvertGpuOpsToLLVMSPVOps(void) {
  registerConvertGpuOpsToLLVMSPVOps();
}


MlirPass mlirCreateConversionConvertGpuOpsToNVVMOps(void) {
  return wrap(createConvertGpuOpsToNVVMOps().release());
}
void mlirRegisterConversionConvertGpuOpsToNVVMOps(void) {
  registerConvertGpuOpsToNVVMOps();
}


MlirPass mlirCreateConversionConvertGpuOpsToROCDLOps(void) {
  return wrap(mlir::createLowerGpuOpsToROCDLOpsPass().release());
}
void mlirRegisterConversionConvertGpuOpsToROCDLOps(void) {
  registerConvertGpuOpsToROCDLOps();
}


MlirPass mlirCreateConversionConvertIndexToLLVMPass(void) {
  return wrap(createConvertIndexToLLVMPass().release());
}
void mlirRegisterConversionConvertIndexToLLVMPass(void) {
  registerConvertIndexToLLVMPass();
}


MlirPass mlirCreateConversionConvertIndexToSPIRVPass(void) {
  return wrap(createConvertIndexToSPIRVPass().release());
}
void mlirRegisterConversionConvertIndexToSPIRVPass(void) {
  registerConvertIndexToSPIRVPass();
}


MlirPass mlirCreateConversionConvertLinalgToStandardPass(void) {
  return wrap(createConvertLinalgToStandardPass().release());
}
void mlirRegisterConversionConvertLinalgToStandardPass(void) {
  registerConvertLinalgToStandardPass();
}


MlirPass mlirCreateConversionConvertMathToEmitC(void) {
  return wrap(createConvertMathToEmitC().release());
}
void mlirRegisterConversionConvertMathToEmitC(void) {
  registerConvertMathToEmitC();
}


MlirPass mlirCreateConversionConvertMathToFuncs(void) {
  return wrap(createConvertMathToFuncs().release());
}
void mlirRegisterConversionConvertMathToFuncs(void) {
  registerConvertMathToFuncs();
}


MlirPass mlirCreateConversionConvertMathToLLVMPass(void) {
  return wrap(createConvertMathToLLVMPass().release());
}
void mlirRegisterConversionConvertMathToLLVMPass(void) {
  registerConvertMathToLLVMPass();
}


MlirPass mlirCreateConversionConvertMathToLibmPass(void) {
  return wrap(createConvertMathToLibmPass().release());
}
void mlirRegisterConversionConvertMathToLibmPass(void) {
  registerConvertMathToLibmPass();
}


MlirPass mlirCreateConversionConvertMathToROCDL(void) {
  return wrap(createConvertMathToROCDL().release());
}
void mlirRegisterConversionConvertMathToROCDL(void) {
  registerConvertMathToROCDL();
}


MlirPass mlirCreateConversionConvertMathToSPIRVPass(void) {
  return wrap(createConvertMathToSPIRVPass().release());
}
void mlirRegisterConversionConvertMathToSPIRVPass(void) {
  registerConvertMathToSPIRVPass();
}


MlirPass mlirCreateConversionConvertMemRefToEmitC(void) {
  return wrap(createConvertMemRefToEmitC().release());
}
void mlirRegisterConversionConvertMemRefToEmitC(void) {
  registerConvertMemRefToEmitC();
}


MlirPass mlirCreateConversionConvertMemRefToSPIRVPass(void) {
  return wrap(createConvertMemRefToSPIRVPass().release());
}
void mlirRegisterConversionConvertMemRefToSPIRVPass(void) {
  registerConvertMemRefToSPIRVPass();
}


MlirPass mlirCreateConversionConvertMeshToMPIPass(void) {
  return wrap(createConvertMeshToMPIPass().release());
}
void mlirRegisterConversionConvertMeshToMPIPass(void) {
  registerConvertMeshToMPIPass();
}


MlirPass mlirCreateConversionConvertNVGPUToNVVMPass(void) {
  return wrap(createConvertNVGPUToNVVMPass().release());
}
void mlirRegisterConversionConvertNVGPUToNVVMPass(void) {
  registerConvertNVGPUToNVVMPass();
}


MlirPass mlirCreateConversionConvertNVVMToLLVMPass(void) {
  return wrap(createConvertNVVMToLLVMPass().release());
}
void mlirRegisterConversionConvertNVVMToLLVMPass(void) {
  registerConvertNVVMToLLVMPass();
}


MlirPass mlirCreateConversionConvertOpenACCToSCFPass(void) {
  return wrap(createConvertOpenACCToSCFPass().release());
}
void mlirRegisterConversionConvertOpenACCToSCFPass(void) {
  registerConvertOpenACCToSCFPass();
}


MlirPass mlirCreateConversionConvertOpenMPToLLVMPass(void) {
  return wrap(createConvertOpenMPToLLVMPass().release());
}
void mlirRegisterConversionConvertOpenMPToLLVMPass(void) {
  registerConvertOpenMPToLLVMPass();
}


MlirPass mlirCreateConversionConvertPDLToPDLInterpPass(void) {
  return wrap(createConvertPDLToPDLInterpPass().release());
}
void mlirRegisterConversionConvertPDLToPDLInterpPass(void) {
  registerConvertPDLToPDLInterpPass();
}


MlirPass mlirCreateConversionConvertParallelLoopToGpuPass(void) {
  return wrap(createConvertParallelLoopToGpuPass().release());
}
void mlirRegisterConversionConvertParallelLoopToGpuPass(void) {
  registerConvertParallelLoopToGpuPass();
}


MlirPass mlirCreateConversionConvertSCFToOpenMPPass(void) {
  return wrap(createConvertSCFToOpenMPPass().release());
}
void mlirRegisterConversionConvertSCFToOpenMPPass(void) {
  registerConvertSCFToOpenMPPass();
}


MlirPass mlirCreateConversionConvertSPIRVToLLVMPass(void) {
  return wrap(createConvertSPIRVToLLVMPass().release());
}
void mlirRegisterConversionConvertSPIRVToLLVMPass(void) {
  registerConvertSPIRVToLLVMPass();
}


MlirPass mlirCreateConversionConvertShapeConstraintsPass(void) {
  return wrap(createConvertShapeConstraintsPass().release());
}
void mlirRegisterConversionConvertShapeConstraintsPass(void) {
  registerConvertShapeConstraintsPass();
}


MlirPass mlirCreateConversionConvertShapeToStandardPass(void) {
  return wrap(createConvertShapeToStandardPass().release());
}
void mlirRegisterConversionConvertShapeToStandardPass(void) {
  registerConvertShapeToStandardPass();
}


MlirPass mlirCreateConversionConvertTensorToLinalgPass(void) {
  return wrap(createConvertTensorToLinalgPass().release());
}
void mlirRegisterConversionConvertTensorToLinalgPass(void) {
  registerConvertTensorToLinalgPass();
}


MlirPass mlirCreateConversionConvertTensorToSPIRVPass(void) {
  return wrap(createConvertTensorToSPIRVPass().release());
}
void mlirRegisterConversionConvertTensorToSPIRVPass(void) {
  registerConvertTensorToSPIRVPass();
}


MlirPass mlirCreateConversionConvertToEmitC(void) {
  return wrap(createConvertToEmitC().release());
}
void mlirRegisterConversionConvertToEmitC(void) {
  registerConvertToEmitC();
}


MlirPass mlirCreateConversionConvertToLLVMPass(void) {
  return wrap(createConvertToLLVMPass().release());
}
void mlirRegisterConversionConvertToLLVMPass(void) {
  registerConvertToLLVMPass();
}


MlirPass mlirCreateConversionConvertVectorToArmSMEPass(void) {
  return wrap(createConvertVectorToArmSMEPass().release());
}
void mlirRegisterConversionConvertVectorToArmSMEPass(void) {
  registerConvertVectorToArmSMEPass();
}


MlirPass mlirCreateConversionConvertVectorToGPU(void) {
  return wrap(mlir::createConvertVectorToGPUPass().release());
}
void mlirRegisterConversionConvertVectorToGPU(void) {
  registerConvertVectorToGPU();
}


MlirPass mlirCreateConversionConvertVectorToLLVMPass(void) {
  return wrap(createConvertVectorToLLVMPass().release());
}
void mlirRegisterConversionConvertVectorToLLVMPass(void) {
  registerConvertVectorToLLVMPass();
}


MlirPass mlirCreateConversionConvertVectorToSCF(void) {
  return wrap(mlir::createConvertVectorToSCFPass().release());
}
void mlirRegisterConversionConvertVectorToSCF(void) {
  registerConvertVectorToSCF();
}


MlirPass mlirCreateConversionConvertVectorToSPIRVPass(void) {
  return wrap(createConvertVectorToSPIRVPass().release());
}
void mlirRegisterConversionConvertVectorToSPIRVPass(void) {
  registerConvertVectorToSPIRVPass();
}


MlirPass mlirCreateConversionConvertVectorToXeGPU(void) {
  return wrap(createConvertVectorToXeGPU().release());
}
void mlirRegisterConversionConvertVectorToXeGPU(void) {
  registerConvertVectorToXeGPU();
}


MlirPass mlirCreateConversionFinalizeMemRefToLLVMConversionPass(void) {
  return wrap(createFinalizeMemRefToLLVMConversionPass().release());
}
void mlirRegisterConversionFinalizeMemRefToLLVMConversionPass(void) {
  registerFinalizeMemRefToLLVMConversionPass();
}


MlirPass mlirCreateConversionGpuToLLVMConversionPass(void) {
  return wrap(createGpuToLLVMConversionPass().release());
}
void mlirRegisterConversionGpuToLLVMConversionPass(void) {
  registerGpuToLLVMConversionPass();
}


MlirPass mlirCreateConversionLiftControlFlowToSCFPass(void) {
  return wrap(createLiftControlFlowToSCFPass().release());
}
void mlirRegisterConversionLiftControlFlowToSCFPass(void) {
  registerLiftControlFlowToSCFPass();
}


MlirPass mlirCreateConversionLowerAffinePass(void) {
  return wrap(createLowerAffinePass().release());
}
void mlirRegisterConversionLowerAffinePass(void) {
  registerLowerAffinePass();
}


MlirPass mlirCreateConversionLowerHostCodeToLLVMPass(void) {
  return wrap(createLowerHostCodeToLLVMPass().release());
}
void mlirRegisterConversionLowerHostCodeToLLVMPass(void) {
  registerLowerHostCodeToLLVMPass();
}


MlirPass mlirCreateConversionMapMemRefStorageClass(void) {
  return wrap(mlir::createMapMemRefStorageClassPass().release());
}
void mlirRegisterConversionMapMemRefStorageClass(void) {
  registerMapMemRefStorageClass();
}


MlirPass mlirCreateConversionReconcileUnrealizedCastsPass(void) {
  return wrap(createReconcileUnrealizedCastsPass().release());
}
void mlirRegisterConversionReconcileUnrealizedCastsPass(void) {
  registerReconcileUnrealizedCastsPass();
}


MlirPass mlirCreateConversionSCFToControlFlowPass(void) {
  return wrap(createSCFToControlFlowPass().release());
}
void mlirRegisterConversionSCFToControlFlowPass(void) {
  registerSCFToControlFlowPass();
}


MlirPass mlirCreateConversionSCFToEmitC(void) {
  return wrap(createSCFToEmitC().release());
}
void mlirRegisterConversionSCFToEmitC(void) {
  registerSCFToEmitC();
}


MlirPass mlirCreateConversionSCFToSPIRV(void) {
  return wrap(createSCFToSPIRV().release());
}
void mlirRegisterConversionSCFToSPIRV(void) {
  registerSCFToSPIRV();
}


MlirPass mlirCreateConversionSetLLVMModuleDataLayoutPass(void) {
  return wrap(createSetLLVMModuleDataLayoutPass().release());
}
void mlirRegisterConversionSetLLVMModuleDataLayoutPass(void) {
  registerSetLLVMModuleDataLayoutPass();
}


MlirPass mlirCreateConversionTosaToArithPass(void) {
  return wrap(createTosaToArithPass().release());
}
void mlirRegisterConversionTosaToArithPass(void) {
  registerTosaToArithPass();
}


MlirPass mlirCreateConversionTosaToLinalg(void) {
  return wrap(tosa::createTosaToLinalg().release());
}
void mlirRegisterConversionTosaToLinalg(void) {
  registerTosaToLinalg();
}


MlirPass mlirCreateConversionTosaToLinalgNamed(void) {
  return wrap(tosa::createTosaToLinalgNamed().release());
}
void mlirRegisterConversionTosaToLinalgNamed(void) {
  registerTosaToLinalgNamed();
}


MlirPass mlirCreateConversionTosaToMLProgram(void) {
  return wrap(createTosaToMLProgram().release());
}
void mlirRegisterConversionTosaToMLProgram(void) {
  registerTosaToMLProgram();
}


MlirPass mlirCreateConversionTosaToSCFPass(void) {
  return wrap(createTosaToSCFPass().release());
}
void mlirRegisterConversionTosaToSCFPass(void) {
  registerTosaToSCFPass();
}


MlirPass mlirCreateConversionTosaToTensorPass(void) {
  return wrap(createTosaToTensorPass().release());
}
void mlirRegisterConversionTosaToTensorPass(void) {
  registerTosaToTensorPass();
}


MlirPass mlirCreateConversionUBToLLVMConversionPass(void) {
  return wrap(createUBToLLVMConversionPass().release());
}
void mlirRegisterConversionUBToLLVMConversionPass(void) {
  registerUBToLLVMConversionPass();
}


MlirPass mlirCreateConversionUBToSPIRVConversionPass(void) {
  return wrap(createUBToSPIRVConversionPass().release());
}
void mlirRegisterConversionUBToSPIRVConversionPass(void) {
  registerUBToSPIRVConversionPass();
}

