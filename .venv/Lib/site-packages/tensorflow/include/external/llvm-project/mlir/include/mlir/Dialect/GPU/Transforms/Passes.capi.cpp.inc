/* Autogenerated by mlir-tblgen; don't manually edit. */
//===----------------------------------------------------------------------===//
// GPU Group Registration
//===----------------------------------------------------------------------===//

void mlirRegisterGPUPasses(void) {
  registerGPUPasses();
}

MlirPass mlirCreateGPUGpuAsyncRegionPass(void) {
  return wrap(createGpuAsyncRegionPass().release());
}
void mlirRegisterGPUGpuAsyncRegionPass(void) {
  registerGpuAsyncRegionPass();
}


MlirPass mlirCreateGPUGpuDecomposeMemrefsPass(void) {
  return wrap(createGpuDecomposeMemrefsPass().release());
}
void mlirRegisterGPUGpuDecomposeMemrefsPass(void) {
  registerGpuDecomposeMemrefsPass();
}


MlirPass mlirCreateGPUGpuEliminateBarriers(void) {
  return wrap(createGpuEliminateBarriers().release());
}
void mlirRegisterGPUGpuEliminateBarriers(void) {
  registerGpuEliminateBarriers();
}


MlirPass mlirCreateGPUGpuKernelOutliningPass(void) {
  return wrap(createGpuKernelOutliningPass().release());
}
void mlirRegisterGPUGpuKernelOutliningPass(void) {
  registerGpuKernelOutliningPass();
}


MlirPass mlirCreateGPUGpuLaunchSinkIndexComputationsPass(void) {
  return wrap(createGpuLaunchSinkIndexComputationsPass().release());
}
void mlirRegisterGPUGpuLaunchSinkIndexComputationsPass(void) {
  registerGpuLaunchSinkIndexComputationsPass();
}


MlirPass mlirCreateGPUGpuMapParallelLoopsPass(void) {
  return wrap(createGpuMapParallelLoopsPass().release());
}
void mlirRegisterGPUGpuMapParallelLoopsPass(void) {
  registerGpuMapParallelLoopsPass();
}


MlirPass mlirCreateGPUGpuModuleToBinaryPass(void) {
  return wrap(createGpuModuleToBinaryPass().release());
}
void mlirRegisterGPUGpuModuleToBinaryPass(void) {
  registerGpuModuleToBinaryPass();
}


MlirPass mlirCreateGPUGpuNVVMAttachTarget(void) {
  return wrap(createGpuNVVMAttachTarget().release());
}
void mlirRegisterGPUGpuNVVMAttachTarget(void) {
  registerGpuNVVMAttachTarget();
}


MlirPass mlirCreateGPUGpuROCDLAttachTarget(void) {
  return wrap(createGpuROCDLAttachTarget().release());
}
void mlirRegisterGPUGpuROCDLAttachTarget(void) {
  registerGpuROCDLAttachTarget();
}


MlirPass mlirCreateGPUGpuSPIRVAttachTarget(void) {
  return wrap(createGpuSPIRVAttachTarget().release());
}
void mlirRegisterGPUGpuSPIRVAttachTarget(void) {
  registerGpuSPIRVAttachTarget();
}

