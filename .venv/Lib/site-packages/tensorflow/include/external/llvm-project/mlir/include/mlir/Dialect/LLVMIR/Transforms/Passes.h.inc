/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_DISCOPEFORLLVMFUNCOPPASS
#define GEN_PASS_DECL_LLVMADDCOMDATS
#define GEN_PASS_DECL_LLVMLEGALIZEFOREXPORTPASS
#define GEN_PASS_DECL_LLVMREQUESTCWRAPPERSPASS
#define GEN_PASS_DECL_NVVMOPTIMIZEFORTARGETPASS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// DIScopeForLLVMFuncOpPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_DISCOPEFORLLVMFUNCOPPASS
struct DIScopeForLLVMFuncOpPassOptions {
  mlir::LLVM::DIEmissionKind emissionKind = mlir::LLVM::DIEmissionKind::LineTablesOnly;
};
std::unique_ptr<::mlir::Pass> createDIScopeForLLVMFuncOpPass();
std::unique_ptr<::mlir::Pass> createDIScopeForLLVMFuncOpPass(DIScopeForLLVMFuncOpPassOptions options);
#undef GEN_PASS_DECL_DISCOPEFORLLVMFUNCOPPASS
#endif // GEN_PASS_DECL_DISCOPEFORLLVMFUNCOPPASS
#ifdef GEN_PASS_DEF_DISCOPEFORLLVMFUNCOPPASS

namespace impl {
  std::unique_ptr<::mlir::Pass> createDIScopeForLLVMFuncOpPass();
} // namespace impl

namespace impl {
  std::unique_ptr<::mlir::Pass> createDIScopeForLLVMFuncOpPass(DIScopeForLLVMFuncOpPassOptions options);
} // namespace impl
namespace impl {

template <typename DerivedT>
class DIScopeForLLVMFuncOpPassBase : public ::mlir::OperationPass<::mlir::ModuleOp> {
public:
  using Base = DIScopeForLLVMFuncOpPassBase;

  DIScopeForLLVMFuncOpPassBase() : ::mlir::OperationPass<::mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  DIScopeForLLVMFuncOpPassBase(const DIScopeForLLVMFuncOpPassBase &other) : ::mlir::OperationPass<::mlir::ModuleOp>(other) {}
  DIScopeForLLVMFuncOpPassBase& operator=(const DIScopeForLLVMFuncOpPassBase &) = delete;
  DIScopeForLLVMFuncOpPassBase(DIScopeForLLVMFuncOpPassBase &&) = delete;
  DIScopeForLLVMFuncOpPassBase& operator=(DIScopeForLLVMFuncOpPassBase &&) = delete;
  ~DIScopeForLLVMFuncOpPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("ensure-debug-info-scope-on-llvm-func");
  }
  ::llvm::StringRef getArgument() const override { return "ensure-debug-info-scope-on-llvm-func"; }

  ::llvm::StringRef getDescription() const override { return "Materialize LLVM debug info subprogram attribute on every LLVMFuncOp"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DIScopeForLLVMFuncOpPass");
  }
  ::llvm::StringRef getName() const override { return "DIScopeForLLVMFuncOpPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(DIScopeForLLVMFuncOpPassBase<DerivedT>)

  DIScopeForLLVMFuncOpPassBase(DIScopeForLLVMFuncOpPassOptions options) : DIScopeForLLVMFuncOpPassBase() {
    emissionKind = std::move(options.emissionKind);
  }
protected:
  ::mlir::Pass::Option<mlir::LLVM::DIEmissionKind> emissionKind{*this, "emission-kind", ::llvm::cl::desc("Emission kind to generate debug info."), ::llvm::cl::init(mlir::LLVM::DIEmissionKind::LineTablesOnly), ::llvm::cl::values(
	     clEnumValN(::mlir::LLVM::DIEmissionKind::None, "None", "None"),
	     clEnumValN(::mlir::LLVM::DIEmissionKind::Full, "Full", "Full"),
	     clEnumValN(::mlir::LLVM::DIEmissionKind::LineTablesOnly, "LineTablesOnly", "LineTablesOnly (default)"),
	     clEnumValN(::mlir::LLVM::DIEmissionKind::DebugDirectivesOnly, "DebugDirectivesOnly", "DebugDirectivesOnly")
	   )};
private:

  friend std::unique_ptr<::mlir::Pass> createDIScopeForLLVMFuncOpPass() {
    return std::make_unique<DerivedT>();
  }

  friend std::unique_ptr<::mlir::Pass> createDIScopeForLLVMFuncOpPass(DIScopeForLLVMFuncOpPassOptions options) {
    return std::make_unique<DerivedT>(std::move(options));
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createDIScopeForLLVMFuncOpPass() {
  return impl::createDIScopeForLLVMFuncOpPass();
}

std::unique_ptr<::mlir::Pass> createDIScopeForLLVMFuncOpPass(DIScopeForLLVMFuncOpPassOptions options) {
  return impl::createDIScopeForLLVMFuncOpPass(std::move(options));
}
#undef GEN_PASS_DEF_DISCOPEFORLLVMFUNCOPPASS
#endif // GEN_PASS_DEF_DISCOPEFORLLVMFUNCOPPASS

//===----------------------------------------------------------------------===//
// LLVMAddComdats
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_LLVMADDCOMDATS
std::unique_ptr<::mlir::Pass> createLLVMAddComdats();
#undef GEN_PASS_DECL_LLVMADDCOMDATS
#endif // GEN_PASS_DECL_LLVMADDCOMDATS
#ifdef GEN_PASS_DEF_LLVMADDCOMDATS

namespace impl {
  std::unique_ptr<::mlir::Pass> createLLVMAddComdats();
} // namespace impl
namespace impl {

template <typename DerivedT>
class LLVMAddComdatsBase : public ::mlir::OperationPass<::mlir::ModuleOp> {
public:
  using Base = LLVMAddComdatsBase;

  LLVMAddComdatsBase() : ::mlir::OperationPass<::mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LLVMAddComdatsBase(const LLVMAddComdatsBase &other) : ::mlir::OperationPass<::mlir::ModuleOp>(other) {}
  LLVMAddComdatsBase& operator=(const LLVMAddComdatsBase &) = delete;
  LLVMAddComdatsBase(LLVMAddComdatsBase &&) = delete;
  LLVMAddComdatsBase& operator=(LLVMAddComdatsBase &&) = delete;
  ~LLVMAddComdatsBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("llvm-add-comdats");
  }
  ::llvm::StringRef getArgument() const override { return "llvm-add-comdats"; }

  ::llvm::StringRef getDescription() const override { return "Add comdats to linkonce and linkonce_odr functions"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LLVMAddComdats");
  }
  ::llvm::StringRef getName() const override { return "LLVMAddComdats"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LLVMAddComdatsBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createLLVMAddComdats() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createLLVMAddComdats() {
  return impl::createLLVMAddComdats();
}
#undef GEN_PASS_DEF_LLVMADDCOMDATS
#endif // GEN_PASS_DEF_LLVMADDCOMDATS

//===----------------------------------------------------------------------===//
// LLVMLegalizeForExportPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_LLVMLEGALIZEFOREXPORTPASS
std::unique_ptr<::mlir::Pass> createLLVMLegalizeForExportPass();
#undef GEN_PASS_DECL_LLVMLEGALIZEFOREXPORTPASS
#endif // GEN_PASS_DECL_LLVMLEGALIZEFOREXPORTPASS
#ifdef GEN_PASS_DEF_LLVMLEGALIZEFOREXPORTPASS

namespace impl {
  std::unique_ptr<::mlir::Pass> createLLVMLegalizeForExportPass();
} // namespace impl
namespace impl {

template <typename DerivedT>
class LLVMLegalizeForExportPassBase : public ::mlir::OperationPass<> {
public:
  using Base = LLVMLegalizeForExportPassBase;

  LLVMLegalizeForExportPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  LLVMLegalizeForExportPassBase(const LLVMLegalizeForExportPassBase &other) : ::mlir::OperationPass<>(other) {}
  LLVMLegalizeForExportPassBase& operator=(const LLVMLegalizeForExportPassBase &) = delete;
  LLVMLegalizeForExportPassBase(LLVMLegalizeForExportPassBase &&) = delete;
  LLVMLegalizeForExportPassBase& operator=(LLVMLegalizeForExportPassBase &&) = delete;
  ~LLVMLegalizeForExportPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("llvm-legalize-for-export");
  }
  ::llvm::StringRef getArgument() const override { return "llvm-legalize-for-export"; }

  ::llvm::StringRef getDescription() const override { return "Legalize LLVM dialect to be convertible to LLVM IR"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LLVMLegalizeForExportPass");
  }
  ::llvm::StringRef getName() const override { return "LLVMLegalizeForExportPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<LLVM::LLVMDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LLVMLegalizeForExportPassBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createLLVMLegalizeForExportPass() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createLLVMLegalizeForExportPass() {
  return impl::createLLVMLegalizeForExportPass();
}
#undef GEN_PASS_DEF_LLVMLEGALIZEFOREXPORTPASS
#endif // GEN_PASS_DEF_LLVMLEGALIZEFOREXPORTPASS

//===----------------------------------------------------------------------===//
// LLVMRequestCWrappersPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_LLVMREQUESTCWRAPPERSPASS
std::unique_ptr<::mlir::Pass> createLLVMRequestCWrappersPass();
#undef GEN_PASS_DECL_LLVMREQUESTCWRAPPERSPASS
#endif // GEN_PASS_DECL_LLVMREQUESTCWRAPPERSPASS
#ifdef GEN_PASS_DEF_LLVMREQUESTCWRAPPERSPASS

namespace impl {
  std::unique_ptr<::mlir::Pass> createLLVMRequestCWrappersPass();
} // namespace impl
namespace impl {

template <typename DerivedT>
class LLVMRequestCWrappersPassBase : public ::mlir::OperationPass<::mlir::func::FuncOp> {
public:
  using Base = LLVMRequestCWrappersPassBase;

  LLVMRequestCWrappersPassBase() : ::mlir::OperationPass<::mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  LLVMRequestCWrappersPassBase(const LLVMRequestCWrappersPassBase &other) : ::mlir::OperationPass<::mlir::func::FuncOp>(other) {}
  LLVMRequestCWrappersPassBase& operator=(const LLVMRequestCWrappersPassBase &) = delete;
  LLVMRequestCWrappersPassBase(LLVMRequestCWrappersPassBase &&) = delete;
  LLVMRequestCWrappersPassBase& operator=(LLVMRequestCWrappersPassBase &&) = delete;
  ~LLVMRequestCWrappersPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("llvm-request-c-wrappers");
  }
  ::llvm::StringRef getArgument() const override { return "llvm-request-c-wrappers"; }

  ::llvm::StringRef getDescription() const override { return "Request C wrapper emission for all functions"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LLVMRequestCWrappersPass");
  }
  ::llvm::StringRef getName() const override { return "LLVMRequestCWrappersPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LLVMRequestCWrappersPassBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createLLVMRequestCWrappersPass() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createLLVMRequestCWrappersPass() {
  return impl::createLLVMRequestCWrappersPass();
}
#undef GEN_PASS_DEF_LLVMREQUESTCWRAPPERSPASS
#endif // GEN_PASS_DEF_LLVMREQUESTCWRAPPERSPASS

//===----------------------------------------------------------------------===//
// NVVMOptimizeForTargetPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_NVVMOPTIMIZEFORTARGETPASS
std::unique_ptr<::mlir::Pass> createNVVMOptimizeForTargetPass();
#undef GEN_PASS_DECL_NVVMOPTIMIZEFORTARGETPASS
#endif // GEN_PASS_DECL_NVVMOPTIMIZEFORTARGETPASS
#ifdef GEN_PASS_DEF_NVVMOPTIMIZEFORTARGETPASS

namespace impl {
  std::unique_ptr<::mlir::Pass> createNVVMOptimizeForTargetPass();
} // namespace impl
namespace impl {

template <typename DerivedT>
class NVVMOptimizeForTargetPassBase : public ::mlir::OperationPass<> {
public:
  using Base = NVVMOptimizeForTargetPassBase;

  NVVMOptimizeForTargetPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  NVVMOptimizeForTargetPassBase(const NVVMOptimizeForTargetPassBase &other) : ::mlir::OperationPass<>(other) {}
  NVVMOptimizeForTargetPassBase& operator=(const NVVMOptimizeForTargetPassBase &) = delete;
  NVVMOptimizeForTargetPassBase(NVVMOptimizeForTargetPassBase &&) = delete;
  NVVMOptimizeForTargetPassBase& operator=(NVVMOptimizeForTargetPassBase &&) = delete;
  ~NVVMOptimizeForTargetPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("llvm-optimize-for-nvvm-target");
  }
  ::llvm::StringRef getArgument() const override { return "llvm-optimize-for-nvvm-target"; }

  ::llvm::StringRef getDescription() const override { return "Optimize NVVM IR"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVVMOptimizeForTargetPass");
  }
  ::llvm::StringRef getName() const override { return "NVVMOptimizeForTargetPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVVMOptimizeForTargetPassBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createNVVMOptimizeForTargetPass() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createNVVMOptimizeForTargetPass() {
  return impl::createNVVMOptimizeForTargetPass();
}
#undef GEN_PASS_DEF_NVVMOPTIMIZEFORTARGETPASS
#endif // GEN_PASS_DEF_NVVMOPTIMIZEFORTARGETPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// DIScopeForLLVMFuncOpPass Registration
//===----------------------------------------------------------------------===//

inline void registerDIScopeForLLVMFuncOpPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createDIScopeForLLVMFuncOpPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerDIScopeForLLVMFuncOpPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createDIScopeForLLVMFuncOpPass();
  });
}

//===----------------------------------------------------------------------===//
// LLVMAddComdats Registration
//===----------------------------------------------------------------------===//

inline void registerLLVMAddComdats() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createLLVMAddComdats();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerLLVMAddComdatsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createLLVMAddComdats();
  });
}

//===----------------------------------------------------------------------===//
// LLVMLegalizeForExportPass Registration
//===----------------------------------------------------------------------===//

inline void registerLLVMLegalizeForExportPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createLLVMLegalizeForExportPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerLLVMLegalizeForExportPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createLLVMLegalizeForExportPass();
  });
}

//===----------------------------------------------------------------------===//
// LLVMRequestCWrappersPass Registration
//===----------------------------------------------------------------------===//

inline void registerLLVMRequestCWrappersPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createLLVMRequestCWrappersPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerLLVMRequestCWrappersPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createLLVMRequestCWrappersPass();
  });
}

//===----------------------------------------------------------------------===//
// NVVMOptimizeForTargetPass Registration
//===----------------------------------------------------------------------===//

inline void registerNVVMOptimizeForTargetPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVVMOptimizeForTargetPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerNVVMOptimizeForTargetPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVVMOptimizeForTargetPass();
  });
}

//===----------------------------------------------------------------------===//
// LLVM Registration
//===----------------------------------------------------------------------===//

inline void registerLLVMPasses() {
  registerDIScopeForLLVMFuncOpPass();
  registerLLVMAddComdats();
  registerLLVMLegalizeForExportPass();
  registerLLVMRequestCWrappersPass();
  registerNVVMOptimizeForTargetPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class DIScopeForLLVMFuncOpPassBase : public ::mlir::OperationPass<::mlir::ModuleOp> {
public:
  using Base = DIScopeForLLVMFuncOpPassBase;

  DIScopeForLLVMFuncOpPassBase() : ::mlir::OperationPass<::mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  DIScopeForLLVMFuncOpPassBase(const DIScopeForLLVMFuncOpPassBase &other) : ::mlir::OperationPass<::mlir::ModuleOp>(other) {}
  DIScopeForLLVMFuncOpPassBase& operator=(const DIScopeForLLVMFuncOpPassBase &) = delete;
  DIScopeForLLVMFuncOpPassBase(DIScopeForLLVMFuncOpPassBase &&) = delete;
  DIScopeForLLVMFuncOpPassBase& operator=(DIScopeForLLVMFuncOpPassBase &&) = delete;
  ~DIScopeForLLVMFuncOpPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("ensure-debug-info-scope-on-llvm-func");
  }
  ::llvm::StringRef getArgument() const override { return "ensure-debug-info-scope-on-llvm-func"; }

  ::llvm::StringRef getDescription() const override { return "Materialize LLVM debug info subprogram attribute on every LLVMFuncOp"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DIScopeForLLVMFuncOpPass");
  }
  ::llvm::StringRef getName() const override { return "DIScopeForLLVMFuncOpPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(DIScopeForLLVMFuncOpPassBase<DerivedT>)

protected:
  ::mlir::Pass::Option<mlir::LLVM::DIEmissionKind> emissionKind{*this, "emission-kind", ::llvm::cl::desc("Emission kind to generate debug info."), ::llvm::cl::init(mlir::LLVM::DIEmissionKind::LineTablesOnly), ::llvm::cl::values(
	     clEnumValN(::mlir::LLVM::DIEmissionKind::None, "None", "None"),
	     clEnumValN(::mlir::LLVM::DIEmissionKind::Full, "Full", "Full"),
	     clEnumValN(::mlir::LLVM::DIEmissionKind::LineTablesOnly, "LineTablesOnly", "LineTablesOnly (default)"),
	     clEnumValN(::mlir::LLVM::DIEmissionKind::DebugDirectivesOnly, "DebugDirectivesOnly", "DebugDirectivesOnly")
	   )};
};

template <typename DerivedT>
class LLVMAddComdatsBase : public ::mlir::OperationPass<::mlir::ModuleOp> {
public:
  using Base = LLVMAddComdatsBase;

  LLVMAddComdatsBase() : ::mlir::OperationPass<::mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LLVMAddComdatsBase(const LLVMAddComdatsBase &other) : ::mlir::OperationPass<::mlir::ModuleOp>(other) {}
  LLVMAddComdatsBase& operator=(const LLVMAddComdatsBase &) = delete;
  LLVMAddComdatsBase(LLVMAddComdatsBase &&) = delete;
  LLVMAddComdatsBase& operator=(LLVMAddComdatsBase &&) = delete;
  ~LLVMAddComdatsBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("llvm-add-comdats");
  }
  ::llvm::StringRef getArgument() const override { return "llvm-add-comdats"; }

  ::llvm::StringRef getDescription() const override { return "Add comdats to linkonce and linkonce_odr functions"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LLVMAddComdats");
  }
  ::llvm::StringRef getName() const override { return "LLVMAddComdats"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LLVMAddComdatsBase<DerivedT>)

protected:
};

template <typename DerivedT>
class LLVMLegalizeForExportPassBase : public ::mlir::OperationPass<> {
public:
  using Base = LLVMLegalizeForExportPassBase;

  LLVMLegalizeForExportPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  LLVMLegalizeForExportPassBase(const LLVMLegalizeForExportPassBase &other) : ::mlir::OperationPass<>(other) {}
  LLVMLegalizeForExportPassBase& operator=(const LLVMLegalizeForExportPassBase &) = delete;
  LLVMLegalizeForExportPassBase(LLVMLegalizeForExportPassBase &&) = delete;
  LLVMLegalizeForExportPassBase& operator=(LLVMLegalizeForExportPassBase &&) = delete;
  ~LLVMLegalizeForExportPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("llvm-legalize-for-export");
  }
  ::llvm::StringRef getArgument() const override { return "llvm-legalize-for-export"; }

  ::llvm::StringRef getDescription() const override { return "Legalize LLVM dialect to be convertible to LLVM IR"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LLVMLegalizeForExportPass");
  }
  ::llvm::StringRef getName() const override { return "LLVMLegalizeForExportPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<LLVM::LLVMDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LLVMLegalizeForExportPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class LLVMRequestCWrappersPassBase : public ::mlir::OperationPass<::mlir::func::FuncOp> {
public:
  using Base = LLVMRequestCWrappersPassBase;

  LLVMRequestCWrappersPassBase() : ::mlir::OperationPass<::mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  LLVMRequestCWrappersPassBase(const LLVMRequestCWrappersPassBase &other) : ::mlir::OperationPass<::mlir::func::FuncOp>(other) {}
  LLVMRequestCWrappersPassBase& operator=(const LLVMRequestCWrappersPassBase &) = delete;
  LLVMRequestCWrappersPassBase(LLVMRequestCWrappersPassBase &&) = delete;
  LLVMRequestCWrappersPassBase& operator=(LLVMRequestCWrappersPassBase &&) = delete;
  ~LLVMRequestCWrappersPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("llvm-request-c-wrappers");
  }
  ::llvm::StringRef getArgument() const override { return "llvm-request-c-wrappers"; }

  ::llvm::StringRef getDescription() const override { return "Request C wrapper emission for all functions"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LLVMRequestCWrappersPass");
  }
  ::llvm::StringRef getName() const override { return "LLVMRequestCWrappersPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LLVMRequestCWrappersPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class NVVMOptimizeForTargetPassBase : public ::mlir::OperationPass<> {
public:
  using Base = NVVMOptimizeForTargetPassBase;

  NVVMOptimizeForTargetPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  NVVMOptimizeForTargetPassBase(const NVVMOptimizeForTargetPassBase &other) : ::mlir::OperationPass<>(other) {}
  NVVMOptimizeForTargetPassBase& operator=(const NVVMOptimizeForTargetPassBase &) = delete;
  NVVMOptimizeForTargetPassBase(NVVMOptimizeForTargetPassBase &&) = delete;
  NVVMOptimizeForTargetPassBase& operator=(NVVMOptimizeForTargetPassBase &&) = delete;
  ~NVVMOptimizeForTargetPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("llvm-optimize-for-nvvm-target");
  }
  ::llvm::StringRef getArgument() const override { return "llvm-optimize-for-nvvm-target"; }

  ::llvm::StringRef getDescription() const override { return "Optimize NVVM IR"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVVMOptimizeForTargetPass");
  }
  ::llvm::StringRef getName() const override { return "NVVMOptimizeForTargetPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVVMOptimizeForTargetPassBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
