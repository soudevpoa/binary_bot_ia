/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_OUTLINESHAPECOMPUTATIONPASS
#define GEN_PASS_DECL_REMOVESHAPECONSTRAINTSPASS
#define GEN_PASS_DECL_SHAPETOSHAPELOWERINGPASS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// OutlineShapeComputationPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_OUTLINESHAPECOMPUTATIONPASS
std::unique_ptr<::mlir::Pass> createOutlineShapeComputationPass();
#undef GEN_PASS_DECL_OUTLINESHAPECOMPUTATIONPASS
#endif // GEN_PASS_DECL_OUTLINESHAPECOMPUTATIONPASS
#ifdef GEN_PASS_DEF_OUTLINESHAPECOMPUTATIONPASS

namespace impl {
  std::unique_ptr<::mlir::Pass> createOutlineShapeComputationPass();
} // namespace impl
namespace impl {

template <typename DerivedT>
class OutlineShapeComputationPassBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = OutlineShapeComputationPassBase;

  OutlineShapeComputationPassBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  OutlineShapeComputationPassBase(const OutlineShapeComputationPassBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  OutlineShapeComputationPassBase& operator=(const OutlineShapeComputationPassBase &) = delete;
  OutlineShapeComputationPassBase(OutlineShapeComputationPassBase &&) = delete;
  OutlineShapeComputationPassBase& operator=(OutlineShapeComputationPassBase &&) = delete;
  ~OutlineShapeComputationPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("outline-shape-computation");
  }
  ::llvm::StringRef getArgument() const override { return "outline-shape-computation"; }

  ::llvm::StringRef getDescription() const override { return "Using shape.func to preserve shape computation"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("OutlineShapeComputationPass");
  }
  ::llvm::StringRef getName() const override { return "OutlineShapeComputationPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<shape::ShapeDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(OutlineShapeComputationPassBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createOutlineShapeComputationPass() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createOutlineShapeComputationPass() {
  return impl::createOutlineShapeComputationPass();
}
#undef GEN_PASS_DEF_OUTLINESHAPECOMPUTATIONPASS
#endif // GEN_PASS_DEF_OUTLINESHAPECOMPUTATIONPASS

//===----------------------------------------------------------------------===//
// RemoveShapeConstraintsPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_REMOVESHAPECONSTRAINTSPASS
std::unique_ptr<::mlir::Pass> createRemoveShapeConstraintsPass();
#undef GEN_PASS_DECL_REMOVESHAPECONSTRAINTSPASS
#endif // GEN_PASS_DECL_REMOVESHAPECONSTRAINTSPASS
#ifdef GEN_PASS_DEF_REMOVESHAPECONSTRAINTSPASS

namespace impl {
  std::unique_ptr<::mlir::Pass> createRemoveShapeConstraintsPass();
} // namespace impl
namespace impl {

template <typename DerivedT>
class RemoveShapeConstraintsPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = RemoveShapeConstraintsPassBase;

  RemoveShapeConstraintsPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  RemoveShapeConstraintsPassBase(const RemoveShapeConstraintsPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}
  RemoveShapeConstraintsPassBase& operator=(const RemoveShapeConstraintsPassBase &) = delete;
  RemoveShapeConstraintsPassBase(RemoveShapeConstraintsPassBase &&) = delete;
  RemoveShapeConstraintsPassBase& operator=(RemoveShapeConstraintsPassBase &&) = delete;
  ~RemoveShapeConstraintsPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("remove-shape-constraints");
  }
  ::llvm::StringRef getArgument() const override { return "remove-shape-constraints"; }

  ::llvm::StringRef getDescription() const override { return "Replace all cstr_ ops with a true witness"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("RemoveShapeConstraintsPass");
  }
  ::llvm::StringRef getName() const override { return "RemoveShapeConstraintsPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(RemoveShapeConstraintsPassBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createRemoveShapeConstraintsPass() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createRemoveShapeConstraintsPass() {
  return impl::createRemoveShapeConstraintsPass();
}
#undef GEN_PASS_DEF_REMOVESHAPECONSTRAINTSPASS
#endif // GEN_PASS_DEF_REMOVESHAPECONSTRAINTSPASS

//===----------------------------------------------------------------------===//
// ShapeToShapeLoweringPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_SHAPETOSHAPELOWERINGPASS
std::unique_ptr<::mlir::Pass> createShapeToShapeLoweringPass();
#undef GEN_PASS_DECL_SHAPETOSHAPELOWERINGPASS
#endif // GEN_PASS_DECL_SHAPETOSHAPELOWERINGPASS
#ifdef GEN_PASS_DEF_SHAPETOSHAPELOWERINGPASS

namespace impl {
  std::unique_ptr<::mlir::Pass> createShapeToShapeLoweringPass();
} // namespace impl
namespace impl {

template <typename DerivedT>
class ShapeToShapeLoweringPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = ShapeToShapeLoweringPassBase;

  ShapeToShapeLoweringPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  ShapeToShapeLoweringPassBase(const ShapeToShapeLoweringPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}
  ShapeToShapeLoweringPassBase& operator=(const ShapeToShapeLoweringPassBase &) = delete;
  ShapeToShapeLoweringPassBase(ShapeToShapeLoweringPassBase &&) = delete;
  ShapeToShapeLoweringPassBase& operator=(ShapeToShapeLoweringPassBase &&) = delete;
  ~ShapeToShapeLoweringPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("shape-to-shape-lowering");
  }
  ::llvm::StringRef getArgument() const override { return "shape-to-shape-lowering"; }

  ::llvm::StringRef getDescription() const override { return "Legalize Shape dialect to be convertible to Arith"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ShapeToShapeLoweringPass");
  }
  ::llvm::StringRef getName() const override { return "ShapeToShapeLoweringPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ShapeToShapeLoweringPassBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createShapeToShapeLoweringPass() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createShapeToShapeLoweringPass() {
  return impl::createShapeToShapeLoweringPass();
}
#undef GEN_PASS_DEF_SHAPETOSHAPELOWERINGPASS
#endif // GEN_PASS_DEF_SHAPETOSHAPELOWERINGPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// OutlineShapeComputationPass Registration
//===----------------------------------------------------------------------===//

inline void registerOutlineShapeComputationPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createOutlineShapeComputationPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerOutlineShapeComputationPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createOutlineShapeComputationPass();
  });
}

//===----------------------------------------------------------------------===//
// RemoveShapeConstraintsPass Registration
//===----------------------------------------------------------------------===//

inline void registerRemoveShapeConstraintsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createRemoveShapeConstraintsPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerRemoveShapeConstraintsPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createRemoveShapeConstraintsPass();
  });
}

//===----------------------------------------------------------------------===//
// ShapeToShapeLoweringPass Registration
//===----------------------------------------------------------------------===//

inline void registerShapeToShapeLoweringPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createShapeToShapeLoweringPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerShapeToShapeLoweringPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createShapeToShapeLoweringPass();
  });
}

//===----------------------------------------------------------------------===//
// Shape Registration
//===----------------------------------------------------------------------===//

inline void registerShapePasses() {
  registerOutlineShapeComputationPass();
  registerRemoveShapeConstraintsPass();
  registerShapeToShapeLoweringPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class OutlineShapeComputationPassBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = OutlineShapeComputationPassBase;

  OutlineShapeComputationPassBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  OutlineShapeComputationPassBase(const OutlineShapeComputationPassBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  OutlineShapeComputationPassBase& operator=(const OutlineShapeComputationPassBase &) = delete;
  OutlineShapeComputationPassBase(OutlineShapeComputationPassBase &&) = delete;
  OutlineShapeComputationPassBase& operator=(OutlineShapeComputationPassBase &&) = delete;
  ~OutlineShapeComputationPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("outline-shape-computation");
  }
  ::llvm::StringRef getArgument() const override { return "outline-shape-computation"; }

  ::llvm::StringRef getDescription() const override { return "Using shape.func to preserve shape computation"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("OutlineShapeComputationPass");
  }
  ::llvm::StringRef getName() const override { return "OutlineShapeComputationPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<shape::ShapeDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(OutlineShapeComputationPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class RemoveShapeConstraintsPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = RemoveShapeConstraintsPassBase;

  RemoveShapeConstraintsPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  RemoveShapeConstraintsPassBase(const RemoveShapeConstraintsPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}
  RemoveShapeConstraintsPassBase& operator=(const RemoveShapeConstraintsPassBase &) = delete;
  RemoveShapeConstraintsPassBase(RemoveShapeConstraintsPassBase &&) = delete;
  RemoveShapeConstraintsPassBase& operator=(RemoveShapeConstraintsPassBase &&) = delete;
  ~RemoveShapeConstraintsPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("remove-shape-constraints");
  }
  ::llvm::StringRef getArgument() const override { return "remove-shape-constraints"; }

  ::llvm::StringRef getDescription() const override { return "Replace all cstr_ ops with a true witness"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("RemoveShapeConstraintsPass");
  }
  ::llvm::StringRef getName() const override { return "RemoveShapeConstraintsPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(RemoveShapeConstraintsPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class ShapeToShapeLoweringPassBase : public ::mlir::OperationPass<func::FuncOp> {
public:
  using Base = ShapeToShapeLoweringPassBase;

  ShapeToShapeLoweringPassBase() : ::mlir::OperationPass<func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  ShapeToShapeLoweringPassBase(const ShapeToShapeLoweringPassBase &other) : ::mlir::OperationPass<func::FuncOp>(other) {}
  ShapeToShapeLoweringPassBase& operator=(const ShapeToShapeLoweringPassBase &) = delete;
  ShapeToShapeLoweringPassBase(ShapeToShapeLoweringPassBase &&) = delete;
  ShapeToShapeLoweringPassBase& operator=(ShapeToShapeLoweringPassBase &&) = delete;
  ~ShapeToShapeLoweringPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("shape-to-shape-lowering");
  }
  ::llvm::StringRef getArgument() const override { return "shape-to-shape-lowering"; }

  ::llvm::StringRef getDescription() const override { return "Legalize Shape dialect to be convertible to Arith"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ShapeToShapeLoweringPass");
  }
  ::llvm::StringRef getName() const override { return "ShapeToShapeLoweringPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ShapeToShapeLoweringPassBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
