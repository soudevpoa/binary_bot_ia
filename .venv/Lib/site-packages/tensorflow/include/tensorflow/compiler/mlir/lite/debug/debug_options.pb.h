// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/compiler/mlir/lite/debug/debug_options.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2flite_2fdebug_2fdebug_5foptions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2flite_2fdebug_2fdebug_5foptions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fmlir_2flite_2fdebug_2fdebug_5foptions_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcompiler_2fmlir_2flite_2fdebug_2fdebug_5foptions_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcompiler_2fmlir_2flite_2fdebug_2fdebug_5foptions_2eproto;
namespace tensorflow {
namespace converter {
class DebugOptions;
struct DebugOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern DebugOptionsDefaultTypeInternal _DebugOptions_default_instance_;
}  // namespace converter
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace converter {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT DebugOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.converter.DebugOptions) */ {
 public:
  inline DebugOptions() : DebugOptions(nullptr) {}
  ~DebugOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DebugOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline DebugOptions(const DebugOptions& from) : DebugOptions(nullptr, from) {}
  inline DebugOptions(DebugOptions&& from) noexcept
      : DebugOptions(nullptr, std::move(from)) {}
  inline DebugOptions& operator=(const DebugOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugOptions& operator=(DebugOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugOptions* internal_default_instance() {
    return reinterpret_cast<const DebugOptions*>(
        &_DebugOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DebugOptions& a, DebugOptions& b) { a.Swap(&b); }
  inline void Swap(DebugOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DebugOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DebugOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DebugOptions& from) { DebugOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DebugOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.converter.DebugOptions"; }

 protected:
  explicit DebugOptions(::google::protobuf::Arena* arena);
  DebugOptions(::google::protobuf::Arena* arena, const DebugOptions& from);
  DebugOptions(::google::protobuf::Arena* arena, DebugOptions&& from) noexcept
      : DebugOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIrDumpDirFieldNumber = 1,
    kIrDumpPassRegexFieldNumber = 2,
    kIrDumpFuncRegexFieldNumber = 3,
    kPrintIrBeforeFieldNumber = 5,
    kPrintIrAfterFieldNumber = 6,
    kElideElementsattrsIfLargerFieldNumber = 8,
    kEnableTimingFieldNumber = 4,
    kPrintIrModuleScopeFieldNumber = 7,
  };
  // optional string ir_dump_dir = 1 [default = ""];
  bool has_ir_dump_dir() const;
  void clear_ir_dump_dir() ;
  const std::string& ir_dump_dir() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ir_dump_dir(Arg_&& arg, Args_... args);
  std::string* mutable_ir_dump_dir();
  PROTOBUF_NODISCARD std::string* release_ir_dump_dir();
  void set_allocated_ir_dump_dir(std::string* value);

  private:
  const std::string& _internal_ir_dump_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ir_dump_dir(
      const std::string& value);
  std::string* _internal_mutable_ir_dump_dir();

  public:
  // optional string ir_dump_pass_regex = 2 [default = ".*"];
  bool has_ir_dump_pass_regex() const;
  void clear_ir_dump_pass_regex() ;
  const std::string& ir_dump_pass_regex() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ir_dump_pass_regex(Arg_&& arg, Args_... args);
  std::string* mutable_ir_dump_pass_regex();
  PROTOBUF_NODISCARD std::string* release_ir_dump_pass_regex();
  void set_allocated_ir_dump_pass_regex(std::string* value);

  private:
  const std::string& _internal_ir_dump_pass_regex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ir_dump_pass_regex(
      const std::string& value);
  std::string* _internal_mutable_ir_dump_pass_regex();

  public:
  // optional string ir_dump_func_regex = 3 [default = ".*"];
  bool has_ir_dump_func_regex() const;
  void clear_ir_dump_func_regex() ;
  const std::string& ir_dump_func_regex() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ir_dump_func_regex(Arg_&& arg, Args_... args);
  std::string* mutable_ir_dump_func_regex();
  PROTOBUF_NODISCARD std::string* release_ir_dump_func_regex();
  void set_allocated_ir_dump_func_regex(std::string* value);

  private:
  const std::string& _internal_ir_dump_func_regex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ir_dump_func_regex(
      const std::string& value);
  std::string* _internal_mutable_ir_dump_func_regex();

  public:
  // optional string print_ir_before = 5 [default = ""];
  bool has_print_ir_before() const;
  void clear_print_ir_before() ;
  const std::string& print_ir_before() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_print_ir_before(Arg_&& arg, Args_... args);
  std::string* mutable_print_ir_before();
  PROTOBUF_NODISCARD std::string* release_print_ir_before();
  void set_allocated_print_ir_before(std::string* value);

  private:
  const std::string& _internal_print_ir_before() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_print_ir_before(
      const std::string& value);
  std::string* _internal_mutable_print_ir_before();

  public:
  // optional string print_ir_after = 6 [default = ""];
  bool has_print_ir_after() const;
  void clear_print_ir_after() ;
  const std::string& print_ir_after() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_print_ir_after(Arg_&& arg, Args_... args);
  std::string* mutable_print_ir_after();
  PROTOBUF_NODISCARD std::string* release_print_ir_after();
  void set_allocated_print_ir_after(std::string* value);

  private:
  const std::string& _internal_print_ir_after() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_print_ir_after(
      const std::string& value);
  std::string* _internal_mutable_print_ir_after();

  public:
  // optional int64 elide_elementsattrs_if_larger = 8;
  bool has_elide_elementsattrs_if_larger() const;
  void clear_elide_elementsattrs_if_larger() ;
  ::int64_t elide_elementsattrs_if_larger() const;
  void set_elide_elementsattrs_if_larger(::int64_t value);

  private:
  ::int64_t _internal_elide_elementsattrs_if_larger() const;
  void _internal_set_elide_elementsattrs_if_larger(::int64_t value);

  public:
  // optional bool enable_timing = 4 [default = false];
  bool has_enable_timing() const;
  void clear_enable_timing() ;
  bool enable_timing() const;
  void set_enable_timing(bool value);

  private:
  bool _internal_enable_timing() const;
  void _internal_set_enable_timing(bool value);

  public:
  // optional bool print_ir_module_scope = 7 [default = true];
  bool has_print_ir_module_scope() const;
  void clear_print_ir_module_scope() ;
  bool print_ir_module_scope() const;
  void set_print_ir_module_scope(bool value);

  private:
  bool _internal_print_ir_module_scope() const;
  void _internal_set_print_ir_module_scope(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.converter.DebugOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      126, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DebugOptions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ir_dump_dir_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_ir_dump_pass_regex_;
    ::google::protobuf::internal::ArenaStringPtr ir_dump_pass_regex_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_ir_dump_func_regex_;
    ::google::protobuf::internal::ArenaStringPtr ir_dump_func_regex_;
    ::google::protobuf::internal::ArenaStringPtr print_ir_before_;
    ::google::protobuf::internal::ArenaStringPtr print_ir_after_;
    ::int64_t elide_elementsattrs_if_larger_;
    bool enable_timing_;
    bool print_ir_module_scope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2flite_2fdebug_2fdebug_5foptions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DebugOptions

// optional string ir_dump_dir = 1 [default = ""];
inline bool DebugOptions::has_ir_dump_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DebugOptions::clear_ir_dump_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ir_dump_dir_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugOptions::ir_dump_dir() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.converter.DebugOptions.ir_dump_dir)
  return _internal_ir_dump_dir();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugOptions::set_ir_dump_dir(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ir_dump_dir_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.converter.DebugOptions.ir_dump_dir)
}
inline std::string* DebugOptions::mutable_ir_dump_dir() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ir_dump_dir();
  // @@protoc_insertion_point(field_mutable:tensorflow.converter.DebugOptions.ir_dump_dir)
  return _s;
}
inline const std::string& DebugOptions::_internal_ir_dump_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ir_dump_dir_.Get();
}
inline void DebugOptions::_internal_set_ir_dump_dir(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ir_dump_dir_.Set(value, GetArena());
}
inline std::string* DebugOptions::_internal_mutable_ir_dump_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ir_dump_dir_.Mutable( GetArena());
}
inline std::string* DebugOptions::release_ir_dump_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.converter.DebugOptions.ir_dump_dir)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.ir_dump_dir_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ir_dump_dir_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DebugOptions::set_allocated_ir_dump_dir(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ir_dump_dir_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ir_dump_dir_.IsDefault()) {
          _impl_.ir_dump_dir_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.converter.DebugOptions.ir_dump_dir)
}

// optional string ir_dump_pass_regex = 2 [default = ".*"];
inline bool DebugOptions::has_ir_dump_pass_regex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DebugOptions::clear_ir_dump_pass_regex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ir_dump_pass_regex_.ClearToDefault(::tensorflow::converter::DebugOptions::Impl_::_i_give_permission_to_break_this_code_default_ir_dump_pass_regex_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DebugOptions::ir_dump_pass_regex() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.converter.DebugOptions.ir_dump_pass_regex)
  if (_impl_.ir_dump_pass_regex_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_ir_dump_pass_regex_.get();
  }
  return _internal_ir_dump_pass_regex();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugOptions::set_ir_dump_pass_regex(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ir_dump_pass_regex_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.converter.DebugOptions.ir_dump_pass_regex)
}
inline std::string* DebugOptions::mutable_ir_dump_pass_regex() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ir_dump_pass_regex();
  // @@protoc_insertion_point(field_mutable:tensorflow.converter.DebugOptions.ir_dump_pass_regex)
  return _s;
}
inline const std::string& DebugOptions::_internal_ir_dump_pass_regex() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ir_dump_pass_regex_.Get();
}
inline void DebugOptions::_internal_set_ir_dump_pass_regex(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ir_dump_pass_regex_.Set(value, GetArena());
}
inline std::string* DebugOptions::_internal_mutable_ir_dump_pass_regex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ir_dump_pass_regex_.Mutable(::tensorflow::converter::DebugOptions::Impl_::_i_give_permission_to_break_this_code_default_ir_dump_pass_regex_, GetArena());
}
inline std::string* DebugOptions::release_ir_dump_pass_regex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.converter.DebugOptions.ir_dump_pass_regex)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  return _impl_.ir_dump_pass_regex_.Release();
}
inline void DebugOptions::set_allocated_ir_dump_pass_regex(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ir_dump_pass_regex_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.converter.DebugOptions.ir_dump_pass_regex)
}

// optional string ir_dump_func_regex = 3 [default = ".*"];
inline bool DebugOptions::has_ir_dump_func_regex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DebugOptions::clear_ir_dump_func_regex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ir_dump_func_regex_.ClearToDefault(::tensorflow::converter::DebugOptions::Impl_::_i_give_permission_to_break_this_code_default_ir_dump_func_regex_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DebugOptions::ir_dump_func_regex() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.converter.DebugOptions.ir_dump_func_regex)
  if (_impl_.ir_dump_func_regex_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_ir_dump_func_regex_.get();
  }
  return _internal_ir_dump_func_regex();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugOptions::set_ir_dump_func_regex(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ir_dump_func_regex_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.converter.DebugOptions.ir_dump_func_regex)
}
inline std::string* DebugOptions::mutable_ir_dump_func_regex() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ir_dump_func_regex();
  // @@protoc_insertion_point(field_mutable:tensorflow.converter.DebugOptions.ir_dump_func_regex)
  return _s;
}
inline const std::string& DebugOptions::_internal_ir_dump_func_regex() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ir_dump_func_regex_.Get();
}
inline void DebugOptions::_internal_set_ir_dump_func_regex(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ir_dump_func_regex_.Set(value, GetArena());
}
inline std::string* DebugOptions::_internal_mutable_ir_dump_func_regex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ir_dump_func_regex_.Mutable(::tensorflow::converter::DebugOptions::Impl_::_i_give_permission_to_break_this_code_default_ir_dump_func_regex_, GetArena());
}
inline std::string* DebugOptions::release_ir_dump_func_regex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.converter.DebugOptions.ir_dump_func_regex)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  return _impl_.ir_dump_func_regex_.Release();
}
inline void DebugOptions::set_allocated_ir_dump_func_regex(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ir_dump_func_regex_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.converter.DebugOptions.ir_dump_func_regex)
}

// optional bool enable_timing = 4 [default = false];
inline bool DebugOptions::has_enable_timing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void DebugOptions::clear_enable_timing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_timing_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DebugOptions::enable_timing() const {
  // @@protoc_insertion_point(field_get:tensorflow.converter.DebugOptions.enable_timing)
  return _internal_enable_timing();
}
inline void DebugOptions::set_enable_timing(bool value) {
  _internal_set_enable_timing(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:tensorflow.converter.DebugOptions.enable_timing)
}
inline bool DebugOptions::_internal_enable_timing() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_timing_;
}
inline void DebugOptions::_internal_set_enable_timing(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_timing_ = value;
}

// optional string print_ir_before = 5 [default = ""];
inline bool DebugOptions::has_print_ir_before() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DebugOptions::clear_print_ir_before() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.print_ir_before_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DebugOptions::print_ir_before() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.converter.DebugOptions.print_ir_before)
  return _internal_print_ir_before();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugOptions::set_print_ir_before(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.print_ir_before_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.converter.DebugOptions.print_ir_before)
}
inline std::string* DebugOptions::mutable_print_ir_before() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_print_ir_before();
  // @@protoc_insertion_point(field_mutable:tensorflow.converter.DebugOptions.print_ir_before)
  return _s;
}
inline const std::string& DebugOptions::_internal_print_ir_before() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.print_ir_before_.Get();
}
inline void DebugOptions::_internal_set_print_ir_before(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.print_ir_before_.Set(value, GetArena());
}
inline std::string* DebugOptions::_internal_mutable_print_ir_before() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.print_ir_before_.Mutable( GetArena());
}
inline std::string* DebugOptions::release_print_ir_before() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.converter.DebugOptions.print_ir_before)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.print_ir_before_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.print_ir_before_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DebugOptions::set_allocated_print_ir_before(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.print_ir_before_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.print_ir_before_.IsDefault()) {
          _impl_.print_ir_before_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.converter.DebugOptions.print_ir_before)
}

// optional string print_ir_after = 6 [default = ""];
inline bool DebugOptions::has_print_ir_after() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void DebugOptions::clear_print_ir_after() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.print_ir_after_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DebugOptions::print_ir_after() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.converter.DebugOptions.print_ir_after)
  return _internal_print_ir_after();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugOptions::set_print_ir_after(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.print_ir_after_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.converter.DebugOptions.print_ir_after)
}
inline std::string* DebugOptions::mutable_print_ir_after() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_print_ir_after();
  // @@protoc_insertion_point(field_mutable:tensorflow.converter.DebugOptions.print_ir_after)
  return _s;
}
inline const std::string& DebugOptions::_internal_print_ir_after() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.print_ir_after_.Get();
}
inline void DebugOptions::_internal_set_print_ir_after(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.print_ir_after_.Set(value, GetArena());
}
inline std::string* DebugOptions::_internal_mutable_print_ir_after() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.print_ir_after_.Mutable( GetArena());
}
inline std::string* DebugOptions::release_print_ir_after() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.converter.DebugOptions.print_ir_after)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.print_ir_after_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.print_ir_after_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DebugOptions::set_allocated_print_ir_after(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.print_ir_after_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.print_ir_after_.IsDefault()) {
          _impl_.print_ir_after_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.converter.DebugOptions.print_ir_after)
}

// optional bool print_ir_module_scope = 7 [default = true];
inline bool DebugOptions::has_print_ir_module_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void DebugOptions::clear_print_ir_module_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.print_ir_module_scope_ = true;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool DebugOptions::print_ir_module_scope() const {
  // @@protoc_insertion_point(field_get:tensorflow.converter.DebugOptions.print_ir_module_scope)
  return _internal_print_ir_module_scope();
}
inline void DebugOptions::set_print_ir_module_scope(bool value) {
  _internal_set_print_ir_module_scope(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:tensorflow.converter.DebugOptions.print_ir_module_scope)
}
inline bool DebugOptions::_internal_print_ir_module_scope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.print_ir_module_scope_;
}
inline void DebugOptions::_internal_set_print_ir_module_scope(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.print_ir_module_scope_ = value;
}

// optional int64 elide_elementsattrs_if_larger = 8;
inline bool DebugOptions::has_elide_elementsattrs_if_larger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void DebugOptions::clear_elide_elementsattrs_if_larger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elide_elementsattrs_if_larger_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t DebugOptions::elide_elementsattrs_if_larger() const {
  // @@protoc_insertion_point(field_get:tensorflow.converter.DebugOptions.elide_elementsattrs_if_larger)
  return _internal_elide_elementsattrs_if_larger();
}
inline void DebugOptions::set_elide_elementsattrs_if_larger(::int64_t value) {
  _internal_set_elide_elementsattrs_if_larger(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:tensorflow.converter.DebugOptions.elide_elementsattrs_if_larger)
}
inline ::int64_t DebugOptions::_internal_elide_elementsattrs_if_larger() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.elide_elementsattrs_if_larger_;
}
inline void DebugOptions::_internal_set_elide_elementsattrs_if_larger(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elide_elementsattrs_if_larger_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace converter
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2flite_2fdebug_2fdebug_5foptions_2eproto_2epb_2eh
