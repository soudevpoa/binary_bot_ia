// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/compiler/mlir/quantization/tensorflow/calibrator/calibration_statistics.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto;
namespace tensorflow {
namespace calibrator {
class CalibrationStatistics;
struct CalibrationStatisticsDefaultTypeInternal;
PROTOBUF_EXPORT extern CalibrationStatisticsDefaultTypeInternal _CalibrationStatistics_default_instance_;
class CalibrationStatisticsMap;
struct CalibrationStatisticsMapDefaultTypeInternal;
PROTOBUF_EXPORT extern CalibrationStatisticsMapDefaultTypeInternal _CalibrationStatisticsMap_default_instance_;
class CalibrationStatisticsMap_StatisticsEntry_DoNotUse;
struct CalibrationStatisticsMap_StatisticsEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern CalibrationStatisticsMap_StatisticsEntry_DoNotUseDefaultTypeInternal _CalibrationStatisticsMap_StatisticsEntry_DoNotUse_default_instance_;
class CalibrationStatistics_AverageMinMaxStatistics;
struct CalibrationStatistics_AverageMinMaxStatisticsDefaultTypeInternal;
PROTOBUF_EXPORT extern CalibrationStatistics_AverageMinMaxStatisticsDefaultTypeInternal _CalibrationStatistics_AverageMinMaxStatistics_default_instance_;
class CalibrationStatistics_HistogramStatistics;
struct CalibrationStatistics_HistogramStatisticsDefaultTypeInternal;
PROTOBUF_EXPORT extern CalibrationStatistics_HistogramStatisticsDefaultTypeInternal _CalibrationStatistics_HistogramStatistics_default_instance_;
class CalibrationStatistics_MinMaxStatistics;
struct CalibrationStatistics_MinMaxStatisticsDefaultTypeInternal;
PROTOBUF_EXPORT extern CalibrationStatistics_MinMaxStatisticsDefaultTypeInternal _CalibrationStatistics_MinMaxStatistics_default_instance_;
}  // namespace calibrator
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace calibrator {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT CalibrationStatistics_MinMaxStatistics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics) */ {
 public:
  inline CalibrationStatistics_MinMaxStatistics() : CalibrationStatistics_MinMaxStatistics(nullptr) {}
  ~CalibrationStatistics_MinMaxStatistics() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationStatistics_MinMaxStatistics(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrationStatistics_MinMaxStatistics(const CalibrationStatistics_MinMaxStatistics& from) : CalibrationStatistics_MinMaxStatistics(nullptr, from) {}
  inline CalibrationStatistics_MinMaxStatistics(CalibrationStatistics_MinMaxStatistics&& from) noexcept
      : CalibrationStatistics_MinMaxStatistics(nullptr, std::move(from)) {}
  inline CalibrationStatistics_MinMaxStatistics& operator=(const CalibrationStatistics_MinMaxStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationStatistics_MinMaxStatistics& operator=(CalibrationStatistics_MinMaxStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationStatistics_MinMaxStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationStatistics_MinMaxStatistics* internal_default_instance() {
    return reinterpret_cast<const CalibrationStatistics_MinMaxStatistics*>(
        &_CalibrationStatistics_MinMaxStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CalibrationStatistics_MinMaxStatistics& a, CalibrationStatistics_MinMaxStatistics& b) { a.Swap(&b); }
  inline void Swap(CalibrationStatistics_MinMaxStatistics* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationStatistics_MinMaxStatistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationStatistics_MinMaxStatistics* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CalibrationStatistics_MinMaxStatistics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationStatistics_MinMaxStatistics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrationStatistics_MinMaxStatistics& from) { CalibrationStatistics_MinMaxStatistics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CalibrationStatistics_MinMaxStatistics* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics"; }

 protected:
  explicit CalibrationStatistics_MinMaxStatistics(::google::protobuf::Arena* arena);
  CalibrationStatistics_MinMaxStatistics(::google::protobuf::Arena* arena, const CalibrationStatistics_MinMaxStatistics& from);
  CalibrationStatistics_MinMaxStatistics(::google::protobuf::Arena* arena, CalibrationStatistics_MinMaxStatistics&& from) noexcept
      : CalibrationStatistics_MinMaxStatistics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGlobalMinFieldNumber = 1,
    kGlobalMaxFieldNumber = 2,
  };
  // float global_min = 1;
  void clear_global_min() ;
  float global_min() const;
  void set_global_min(float value);

  private:
  float _internal_global_min() const;
  void _internal_set_global_min(float value);

  public:
  // float global_max = 2;
  void clear_global_max() ;
  float global_max() const;
  void set_global_max(float value);

  private:
  float _internal_global_max() const;
  void _internal_set_global_max(float value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrationStatistics_MinMaxStatistics& from_msg);
    float global_min_;
    float global_max_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CalibrationStatistics_HistogramStatistics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics) */ {
 public:
  inline CalibrationStatistics_HistogramStatistics() : CalibrationStatistics_HistogramStatistics(nullptr) {}
  ~CalibrationStatistics_HistogramStatistics() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationStatistics_HistogramStatistics(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrationStatistics_HistogramStatistics(const CalibrationStatistics_HistogramStatistics& from) : CalibrationStatistics_HistogramStatistics(nullptr, from) {}
  inline CalibrationStatistics_HistogramStatistics(CalibrationStatistics_HistogramStatistics&& from) noexcept
      : CalibrationStatistics_HistogramStatistics(nullptr, std::move(from)) {}
  inline CalibrationStatistics_HistogramStatistics& operator=(const CalibrationStatistics_HistogramStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationStatistics_HistogramStatistics& operator=(CalibrationStatistics_HistogramStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationStatistics_HistogramStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationStatistics_HistogramStatistics* internal_default_instance() {
    return reinterpret_cast<const CalibrationStatistics_HistogramStatistics*>(
        &_CalibrationStatistics_HistogramStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CalibrationStatistics_HistogramStatistics& a, CalibrationStatistics_HistogramStatistics& b) { a.Swap(&b); }
  inline void Swap(CalibrationStatistics_HistogramStatistics* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationStatistics_HistogramStatistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationStatistics_HistogramStatistics* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CalibrationStatistics_HistogramStatistics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationStatistics_HistogramStatistics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrationStatistics_HistogramStatistics& from) { CalibrationStatistics_HistogramStatistics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CalibrationStatistics_HistogramStatistics* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.calibrator.CalibrationStatistics.HistogramStatistics"; }

 protected:
  explicit CalibrationStatistics_HistogramStatistics(::google::protobuf::Arena* arena);
  CalibrationStatistics_HistogramStatistics(::google::protobuf::Arena* arena, const CalibrationStatistics_HistogramStatistics& from);
  CalibrationStatistics_HistogramStatistics(::google::protobuf::Arena* arena, CalibrationStatistics_HistogramStatistics&& from) noexcept
      : CalibrationStatistics_HistogramStatistics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHistFreqFieldNumber = 3,
    kBinWidthFieldNumber = 1,
    kLowerBoundFieldNumber = 2,
  };
  // repeated float hist_freq = 3;
  int hist_freq_size() const;
  private:
  int _internal_hist_freq_size() const;

  public:
  void clear_hist_freq() ;
  float hist_freq(int index) const;
  void set_hist_freq(int index, float value);
  void add_hist_freq(float value);
  const ::google::protobuf::RepeatedField<float>& hist_freq() const;
  ::google::protobuf::RepeatedField<float>* mutable_hist_freq();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_hist_freq() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_hist_freq();

  public:
  // float bin_width = 1;
  void clear_bin_width() ;
  float bin_width() const;
  void set_bin_width(float value);

  private:
  float _internal_bin_width() const;
  void _internal_set_bin_width(float value);

  public:
  // float lower_bound = 2;
  void clear_lower_bound() ;
  float lower_bound() const;
  void set_lower_bound(float value);

  private:
  float _internal_lower_bound() const;
  void _internal_set_lower_bound(float value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrationStatistics_HistogramStatistics& from_msg);
    ::google::protobuf::RepeatedField<float> hist_freq_;
    float bin_width_;
    float lower_bound_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CalibrationStatistics_AverageMinMaxStatistics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics) */ {
 public:
  inline CalibrationStatistics_AverageMinMaxStatistics() : CalibrationStatistics_AverageMinMaxStatistics(nullptr) {}
  ~CalibrationStatistics_AverageMinMaxStatistics() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationStatistics_AverageMinMaxStatistics(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrationStatistics_AverageMinMaxStatistics(const CalibrationStatistics_AverageMinMaxStatistics& from) : CalibrationStatistics_AverageMinMaxStatistics(nullptr, from) {}
  inline CalibrationStatistics_AverageMinMaxStatistics(CalibrationStatistics_AverageMinMaxStatistics&& from) noexcept
      : CalibrationStatistics_AverageMinMaxStatistics(nullptr, std::move(from)) {}
  inline CalibrationStatistics_AverageMinMaxStatistics& operator=(const CalibrationStatistics_AverageMinMaxStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationStatistics_AverageMinMaxStatistics& operator=(CalibrationStatistics_AverageMinMaxStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationStatistics_AverageMinMaxStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationStatistics_AverageMinMaxStatistics* internal_default_instance() {
    return reinterpret_cast<const CalibrationStatistics_AverageMinMaxStatistics*>(
        &_CalibrationStatistics_AverageMinMaxStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CalibrationStatistics_AverageMinMaxStatistics& a, CalibrationStatistics_AverageMinMaxStatistics& b) { a.Swap(&b); }
  inline void Swap(CalibrationStatistics_AverageMinMaxStatistics* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationStatistics_AverageMinMaxStatistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationStatistics_AverageMinMaxStatistics* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CalibrationStatistics_AverageMinMaxStatistics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationStatistics_AverageMinMaxStatistics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrationStatistics_AverageMinMaxStatistics& from) { CalibrationStatistics_AverageMinMaxStatistics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CalibrationStatistics_AverageMinMaxStatistics* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics"; }

 protected:
  explicit CalibrationStatistics_AverageMinMaxStatistics(::google::protobuf::Arena* arena);
  CalibrationStatistics_AverageMinMaxStatistics(::google::protobuf::Arena* arena, const CalibrationStatistics_AverageMinMaxStatistics& from);
  CalibrationStatistics_AverageMinMaxStatistics(::google::protobuf::Arena* arena, CalibrationStatistics_AverageMinMaxStatistics&& from) noexcept
      : CalibrationStatistics_AverageMinMaxStatistics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMinSumFieldNumber = 1,
    kMaxSumFieldNumber = 2,
    kNumSamplesFieldNumber = 3,
  };
  // float min_sum = 1;
  void clear_min_sum() ;
  float min_sum() const;
  void set_min_sum(float value);

  private:
  float _internal_min_sum() const;
  void _internal_set_min_sum(float value);

  public:
  // float max_sum = 2;
  void clear_max_sum() ;
  float max_sum() const;
  void set_max_sum(float value);

  private:
  float _internal_max_sum() const;
  void _internal_set_max_sum(float value);

  public:
  // int32 num_samples = 3;
  void clear_num_samples() ;
  ::int32_t num_samples() const;
  void set_num_samples(::int32_t value);

  private:
  ::int32_t _internal_num_samples() const;
  void _internal_set_num_samples(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrationStatistics_AverageMinMaxStatistics& from_msg);
    float min_sum_;
    float max_sum_;
    ::int32_t num_samples_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CalibrationStatistics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.calibrator.CalibrationStatistics) */ {
 public:
  inline CalibrationStatistics() : CalibrationStatistics(nullptr) {}
  ~CalibrationStatistics() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationStatistics(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrationStatistics(const CalibrationStatistics& from) : CalibrationStatistics(nullptr, from) {}
  inline CalibrationStatistics(CalibrationStatistics&& from) noexcept
      : CalibrationStatistics(nullptr, std::move(from)) {}
  inline CalibrationStatistics& operator=(const CalibrationStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationStatistics& operator=(CalibrationStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationStatistics* internal_default_instance() {
    return reinterpret_cast<const CalibrationStatistics*>(
        &_CalibrationStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CalibrationStatistics& a, CalibrationStatistics& b) { a.Swap(&b); }
  inline void Swap(CalibrationStatistics* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationStatistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationStatistics* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CalibrationStatistics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationStatistics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrationStatistics& from) { CalibrationStatistics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CalibrationStatistics* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.calibrator.CalibrationStatistics"; }

 protected:
  explicit CalibrationStatistics(::google::protobuf::Arena* arena);
  CalibrationStatistics(::google::protobuf::Arena* arena, const CalibrationStatistics& from);
  CalibrationStatistics(::google::protobuf::Arena* arena, CalibrationStatistics&& from) noexcept
      : CalibrationStatistics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using MinMaxStatistics = CalibrationStatistics_MinMaxStatistics;
  using AverageMinMaxStatistics = CalibrationStatistics_AverageMinMaxStatistics;
  using HistogramStatistics = CalibrationStatistics_HistogramStatistics;

  // accessors -------------------------------------------------------
  enum : int {
    kMinMaxStatisticsFieldNumber = 1,
    kAverageMinMaxStatisticsFieldNumber = 2,
    kHistogramStatisticsFieldNumber = 3,
  };
  // .tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics min_max_statistics = 1;
  bool has_min_max_statistics() const;
  void clear_min_max_statistics() ;
  const ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics& min_max_statistics() const;
  PROTOBUF_NODISCARD ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* release_min_max_statistics();
  ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* mutable_min_max_statistics();
  void set_allocated_min_max_statistics(::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* value);
  void unsafe_arena_set_allocated_min_max_statistics(::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* value);
  ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* unsafe_arena_release_min_max_statistics();

  private:
  const ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics& _internal_min_max_statistics() const;
  ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* _internal_mutable_min_max_statistics();

  public:
  // .tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics average_min_max_statistics = 2;
  bool has_average_min_max_statistics() const;
  void clear_average_min_max_statistics() ;
  const ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics& average_min_max_statistics() const;
  PROTOBUF_NODISCARD ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* release_average_min_max_statistics();
  ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* mutable_average_min_max_statistics();
  void set_allocated_average_min_max_statistics(::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* value);
  void unsafe_arena_set_allocated_average_min_max_statistics(::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* value);
  ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* unsafe_arena_release_average_min_max_statistics();

  private:
  const ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics& _internal_average_min_max_statistics() const;
  ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* _internal_mutable_average_min_max_statistics();

  public:
  // .tensorflow.calibrator.CalibrationStatistics.HistogramStatistics histogram_statistics = 3;
  bool has_histogram_statistics() const;
  void clear_histogram_statistics() ;
  const ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics& histogram_statistics() const;
  PROTOBUF_NODISCARD ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* release_histogram_statistics();
  ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* mutable_histogram_statistics();
  void set_allocated_histogram_statistics(::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* value);
  void unsafe_arena_set_allocated_histogram_statistics(::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* value);
  ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* unsafe_arena_release_histogram_statistics();

  private:
  const ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics& _internal_histogram_statistics() const;
  ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* _internal_mutable_histogram_statistics();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.calibrator.CalibrationStatistics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrationStatistics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* min_max_statistics_;
    ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* average_min_max_statistics_;
    ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* histogram_statistics_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto;
};
// -------------------------------------------------------------------

class CalibrationStatisticsMap_StatisticsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          CalibrationStatisticsMap_StatisticsEntry_DoNotUse, std::string, ::tensorflow::calibrator::CalibrationStatistics,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      CalibrationStatisticsMap_StatisticsEntry_DoNotUse, std::string, ::tensorflow::calibrator::CalibrationStatistics,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  CalibrationStatisticsMap_StatisticsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationStatisticsMap_StatisticsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CalibrationStatisticsMap_StatisticsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CalibrationStatisticsMap_StatisticsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CalibrationStatisticsMap_StatisticsEntry_DoNotUse*>(
        &_CalibrationStatisticsMap_StatisticsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      74, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CalibrationStatisticsMap final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.calibrator.CalibrationStatisticsMap) */ {
 public:
  inline CalibrationStatisticsMap() : CalibrationStatisticsMap(nullptr) {}
  ~CalibrationStatisticsMap() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationStatisticsMap(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrationStatisticsMap(const CalibrationStatisticsMap& from) : CalibrationStatisticsMap(nullptr, from) {}
  inline CalibrationStatisticsMap(CalibrationStatisticsMap&& from) noexcept
      : CalibrationStatisticsMap(nullptr, std::move(from)) {}
  inline CalibrationStatisticsMap& operator=(const CalibrationStatisticsMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationStatisticsMap& operator=(CalibrationStatisticsMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationStatisticsMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationStatisticsMap* internal_default_instance() {
    return reinterpret_cast<const CalibrationStatisticsMap*>(
        &_CalibrationStatisticsMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(CalibrationStatisticsMap& a, CalibrationStatisticsMap& b) { a.Swap(&b); }
  inline void Swap(CalibrationStatisticsMap* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationStatisticsMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationStatisticsMap* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CalibrationStatisticsMap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationStatisticsMap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrationStatisticsMap& from) { CalibrationStatisticsMap::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CalibrationStatisticsMap* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.calibrator.CalibrationStatisticsMap"; }

 protected:
  explicit CalibrationStatisticsMap(::google::protobuf::Arena* arena);
  CalibrationStatisticsMap(::google::protobuf::Arena* arena, const CalibrationStatisticsMap& from);
  CalibrationStatisticsMap(::google::protobuf::Arena* arena, CalibrationStatisticsMap&& from) noexcept
      : CalibrationStatisticsMap(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatisticsFieldNumber = 1,
  };
  // map<string, .tensorflow.calibrator.CalibrationStatistics> statistics = 1;
  int statistics_size() const;
  private:
  int _internal_statistics_size() const;

  public:
  void clear_statistics() ;
  const ::google::protobuf::Map<std::string, ::tensorflow::calibrator::CalibrationStatistics>& statistics() const;
  ::google::protobuf::Map<std::string, ::tensorflow::calibrator::CalibrationStatistics>* mutable_statistics();

  private:
  const ::google::protobuf::Map<std::string, ::tensorflow::calibrator::CalibrationStatistics>& _internal_statistics() const;
  ::google::protobuf::Map<std::string, ::tensorflow::calibrator::CalibrationStatistics>* _internal_mutable_statistics();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.calibrator.CalibrationStatisticsMap)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      65, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrationStatisticsMap& from_msg);
    ::google::protobuf::internal::MapField<CalibrationStatisticsMap_StatisticsEntry_DoNotUse, std::string, ::tensorflow::calibrator::CalibrationStatistics,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        statistics_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CalibrationStatistics_MinMaxStatistics

// float global_min = 1;
inline void CalibrationStatistics_MinMaxStatistics::clear_global_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_min_ = 0;
}
inline float CalibrationStatistics_MinMaxStatistics::global_min() const {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics.global_min)
  return _internal_global_min();
}
inline void CalibrationStatistics_MinMaxStatistics::set_global_min(float value) {
  _internal_set_global_min(value);
  // @@protoc_insertion_point(field_set:tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics.global_min)
}
inline float CalibrationStatistics_MinMaxStatistics::_internal_global_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_min_;
}
inline void CalibrationStatistics_MinMaxStatistics::_internal_set_global_min(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_min_ = value;
}

// float global_max = 2;
inline void CalibrationStatistics_MinMaxStatistics::clear_global_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_max_ = 0;
}
inline float CalibrationStatistics_MinMaxStatistics::global_max() const {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics.global_max)
  return _internal_global_max();
}
inline void CalibrationStatistics_MinMaxStatistics::set_global_max(float value) {
  _internal_set_global_max(value);
  // @@protoc_insertion_point(field_set:tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics.global_max)
}
inline float CalibrationStatistics_MinMaxStatistics::_internal_global_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_max_;
}
inline void CalibrationStatistics_MinMaxStatistics::_internal_set_global_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_max_ = value;
}

// -------------------------------------------------------------------

// CalibrationStatistics_AverageMinMaxStatistics

// float min_sum = 1;
inline void CalibrationStatistics_AverageMinMaxStatistics::clear_min_sum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_sum_ = 0;
}
inline float CalibrationStatistics_AverageMinMaxStatistics::min_sum() const {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics.min_sum)
  return _internal_min_sum();
}
inline void CalibrationStatistics_AverageMinMaxStatistics::set_min_sum(float value) {
  _internal_set_min_sum(value);
  // @@protoc_insertion_point(field_set:tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics.min_sum)
}
inline float CalibrationStatistics_AverageMinMaxStatistics::_internal_min_sum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_sum_;
}
inline void CalibrationStatistics_AverageMinMaxStatistics::_internal_set_min_sum(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_sum_ = value;
}

// float max_sum = 2;
inline void CalibrationStatistics_AverageMinMaxStatistics::clear_max_sum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_sum_ = 0;
}
inline float CalibrationStatistics_AverageMinMaxStatistics::max_sum() const {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics.max_sum)
  return _internal_max_sum();
}
inline void CalibrationStatistics_AverageMinMaxStatistics::set_max_sum(float value) {
  _internal_set_max_sum(value);
  // @@protoc_insertion_point(field_set:tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics.max_sum)
}
inline float CalibrationStatistics_AverageMinMaxStatistics::_internal_max_sum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_sum_;
}
inline void CalibrationStatistics_AverageMinMaxStatistics::_internal_set_max_sum(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_sum_ = value;
}

// int32 num_samples = 3;
inline void CalibrationStatistics_AverageMinMaxStatistics::clear_num_samples() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_samples_ = 0;
}
inline ::int32_t CalibrationStatistics_AverageMinMaxStatistics::num_samples() const {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics.num_samples)
  return _internal_num_samples();
}
inline void CalibrationStatistics_AverageMinMaxStatistics::set_num_samples(::int32_t value) {
  _internal_set_num_samples(value);
  // @@protoc_insertion_point(field_set:tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics.num_samples)
}
inline ::int32_t CalibrationStatistics_AverageMinMaxStatistics::_internal_num_samples() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_samples_;
}
inline void CalibrationStatistics_AverageMinMaxStatistics::_internal_set_num_samples(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_samples_ = value;
}

// -------------------------------------------------------------------

// CalibrationStatistics_HistogramStatistics

// float bin_width = 1;
inline void CalibrationStatistics_HistogramStatistics::clear_bin_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bin_width_ = 0;
}
inline float CalibrationStatistics_HistogramStatistics::bin_width() const {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.bin_width)
  return _internal_bin_width();
}
inline void CalibrationStatistics_HistogramStatistics::set_bin_width(float value) {
  _internal_set_bin_width(value);
  // @@protoc_insertion_point(field_set:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.bin_width)
}
inline float CalibrationStatistics_HistogramStatistics::_internal_bin_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bin_width_;
}
inline void CalibrationStatistics_HistogramStatistics::_internal_set_bin_width(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bin_width_ = value;
}

// float lower_bound = 2;
inline void CalibrationStatistics_HistogramStatistics::clear_lower_bound() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lower_bound_ = 0;
}
inline float CalibrationStatistics_HistogramStatistics::lower_bound() const {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.lower_bound)
  return _internal_lower_bound();
}
inline void CalibrationStatistics_HistogramStatistics::set_lower_bound(float value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.lower_bound)
}
inline float CalibrationStatistics_HistogramStatistics::_internal_lower_bound() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lower_bound_;
}
inline void CalibrationStatistics_HistogramStatistics::_internal_set_lower_bound(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lower_bound_ = value;
}

// repeated float hist_freq = 3;
inline int CalibrationStatistics_HistogramStatistics::_internal_hist_freq_size() const {
  return _internal_hist_freq().size();
}
inline int CalibrationStatistics_HistogramStatistics::hist_freq_size() const {
  return _internal_hist_freq_size();
}
inline void CalibrationStatistics_HistogramStatistics::clear_hist_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hist_freq_.Clear();
}
inline float CalibrationStatistics_HistogramStatistics::hist_freq(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.hist_freq)
  return _internal_hist_freq().Get(index);
}
inline void CalibrationStatistics_HistogramStatistics::set_hist_freq(int index, float value) {
  _internal_mutable_hist_freq()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.hist_freq)
}
inline void CalibrationStatistics_HistogramStatistics::add_hist_freq(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_hist_freq()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.hist_freq)
}
inline const ::google::protobuf::RepeatedField<float>& CalibrationStatistics_HistogramStatistics::hist_freq() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.hist_freq)
  return _internal_hist_freq();
}
inline ::google::protobuf::RepeatedField<float>* CalibrationStatistics_HistogramStatistics::mutable_hist_freq()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.calibrator.CalibrationStatistics.HistogramStatistics.hist_freq)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_hist_freq();
}
inline const ::google::protobuf::RepeatedField<float>&
CalibrationStatistics_HistogramStatistics::_internal_hist_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hist_freq_;
}
inline ::google::protobuf::RepeatedField<float>* CalibrationStatistics_HistogramStatistics::_internal_mutable_hist_freq() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.hist_freq_;
}

// -------------------------------------------------------------------

// CalibrationStatistics

// .tensorflow.calibrator.CalibrationStatistics.MinMaxStatistics min_max_statistics = 1;
inline bool CalibrationStatistics::has_min_max_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_max_statistics_ != nullptr);
  return value;
}
inline void CalibrationStatistics::clear_min_max_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_max_statistics_ != nullptr) _impl_.min_max_statistics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics& CalibrationStatistics::_internal_min_max_statistics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* p = _impl_.min_max_statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics&>(::tensorflow::calibrator::_CalibrationStatistics_MinMaxStatistics_default_instance_);
}
inline const ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics& CalibrationStatistics::min_max_statistics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.min_max_statistics)
  return _internal_min_max_statistics();
}
inline void CalibrationStatistics::unsafe_arena_set_allocated_min_max_statistics(::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_max_statistics_);
  }
  _impl_.min_max_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.calibrator.CalibrationStatistics.min_max_statistics)
}
inline ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* CalibrationStatistics::release_min_max_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* released = _impl_.min_max_statistics_;
  _impl_.min_max_statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* CalibrationStatistics::unsafe_arena_release_min_max_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.calibrator.CalibrationStatistics.min_max_statistics)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* temp = _impl_.min_max_statistics_;
  _impl_.min_max_statistics_ = nullptr;
  return temp;
}
inline ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* CalibrationStatistics::_internal_mutable_min_max_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_max_statistics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics>(GetArena());
    _impl_.min_max_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics*>(p);
  }
  return _impl_.min_max_statistics_;
}
inline ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* CalibrationStatistics::mutable_min_max_statistics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* _msg = _internal_mutable_min_max_statistics();
  // @@protoc_insertion_point(field_mutable:tensorflow.calibrator.CalibrationStatistics.min_max_statistics)
  return _msg;
}
inline void CalibrationStatistics::set_allocated_min_max_statistics(::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.min_max_statistics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.min_max_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_MinMaxStatistics*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.calibrator.CalibrationStatistics.min_max_statistics)
}

// .tensorflow.calibrator.CalibrationStatistics.AverageMinMaxStatistics average_min_max_statistics = 2;
inline bool CalibrationStatistics::has_average_min_max_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.average_min_max_statistics_ != nullptr);
  return value;
}
inline void CalibrationStatistics::clear_average_min_max_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.average_min_max_statistics_ != nullptr) _impl_.average_min_max_statistics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics& CalibrationStatistics::_internal_average_min_max_statistics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* p = _impl_.average_min_max_statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics&>(::tensorflow::calibrator::_CalibrationStatistics_AverageMinMaxStatistics_default_instance_);
}
inline const ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics& CalibrationStatistics::average_min_max_statistics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.average_min_max_statistics)
  return _internal_average_min_max_statistics();
}
inline void CalibrationStatistics::unsafe_arena_set_allocated_average_min_max_statistics(::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_min_max_statistics_);
  }
  _impl_.average_min_max_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.calibrator.CalibrationStatistics.average_min_max_statistics)
}
inline ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* CalibrationStatistics::release_average_min_max_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* released = _impl_.average_min_max_statistics_;
  _impl_.average_min_max_statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* CalibrationStatistics::unsafe_arena_release_average_min_max_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.calibrator.CalibrationStatistics.average_min_max_statistics)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* temp = _impl_.average_min_max_statistics_;
  _impl_.average_min_max_statistics_ = nullptr;
  return temp;
}
inline ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* CalibrationStatistics::_internal_mutable_average_min_max_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.average_min_max_statistics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics>(GetArena());
    _impl_.average_min_max_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics*>(p);
  }
  return _impl_.average_min_max_statistics_;
}
inline ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* CalibrationStatistics::mutable_average_min_max_statistics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* _msg = _internal_mutable_average_min_max_statistics();
  // @@protoc_insertion_point(field_mutable:tensorflow.calibrator.CalibrationStatistics.average_min_max_statistics)
  return _msg;
}
inline void CalibrationStatistics::set_allocated_average_min_max_statistics(::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.average_min_max_statistics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.average_min_max_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_AverageMinMaxStatistics*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.calibrator.CalibrationStatistics.average_min_max_statistics)
}

// .tensorflow.calibrator.CalibrationStatistics.HistogramStatistics histogram_statistics = 3;
inline bool CalibrationStatistics::has_histogram_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.histogram_statistics_ != nullptr);
  return value;
}
inline void CalibrationStatistics::clear_histogram_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.histogram_statistics_ != nullptr) _impl_.histogram_statistics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics& CalibrationStatistics::_internal_histogram_statistics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* p = _impl_.histogram_statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics&>(::tensorflow::calibrator::_CalibrationStatistics_HistogramStatistics_default_instance_);
}
inline const ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics& CalibrationStatistics::histogram_statistics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.calibrator.CalibrationStatistics.histogram_statistics)
  return _internal_histogram_statistics();
}
inline void CalibrationStatistics::unsafe_arena_set_allocated_histogram_statistics(::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.histogram_statistics_);
  }
  _impl_.histogram_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.calibrator.CalibrationStatistics.histogram_statistics)
}
inline ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* CalibrationStatistics::release_histogram_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* released = _impl_.histogram_statistics_;
  _impl_.histogram_statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* CalibrationStatistics::unsafe_arena_release_histogram_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.calibrator.CalibrationStatistics.histogram_statistics)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* temp = _impl_.histogram_statistics_;
  _impl_.histogram_statistics_ = nullptr;
  return temp;
}
inline ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* CalibrationStatistics::_internal_mutable_histogram_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.histogram_statistics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics>(GetArena());
    _impl_.histogram_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics*>(p);
  }
  return _impl_.histogram_statistics_;
}
inline ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* CalibrationStatistics::mutable_histogram_statistics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* _msg = _internal_mutable_histogram_statistics();
  // @@protoc_insertion_point(field_mutable:tensorflow.calibrator.CalibrationStatistics.histogram_statistics)
  return _msg;
}
inline void CalibrationStatistics::set_allocated_histogram_statistics(::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.histogram_statistics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.histogram_statistics_ = reinterpret_cast<::tensorflow::calibrator::CalibrationStatistics_HistogramStatistics*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.calibrator.CalibrationStatistics.histogram_statistics)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CalibrationStatisticsMap

// map<string, .tensorflow.calibrator.CalibrationStatistics> statistics = 1;
inline int CalibrationStatisticsMap::_internal_statistics_size() const {
  return _internal_statistics().size();
}
inline int CalibrationStatisticsMap::statistics_size() const {
  return _internal_statistics_size();
}
inline void CalibrationStatisticsMap::clear_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.statistics_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::tensorflow::calibrator::CalibrationStatistics>& CalibrationStatisticsMap::_internal_statistics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.statistics_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::tensorflow::calibrator::CalibrationStatistics>& CalibrationStatisticsMap::statistics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.calibrator.CalibrationStatisticsMap.statistics)
  return _internal_statistics();
}
inline ::google::protobuf::Map<std::string, ::tensorflow::calibrator::CalibrationStatistics>* CalibrationStatisticsMap::_internal_mutable_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.statistics_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::tensorflow::calibrator::CalibrationStatistics>* CalibrationStatisticsMap::mutable_statistics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.calibrator.CalibrationStatisticsMap.statistics)
  return _internal_mutable_statistics();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace calibrator
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2ftensorflow_2fcalibrator_2fcalibration_5fstatistics_2eproto_2epb_2eh
