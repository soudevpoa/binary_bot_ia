// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/stream_executor/device_description.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "xla/autotune_results.pb.h"
#include "xla/stream_executor/cuda/cuda_compute_capability.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto;
namespace stream_executor {
class DnnVersionInfoProto;
struct DnnVersionInfoProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern DnnVersionInfoProtoDefaultTypeInternal _DnnVersionInfoProto_default_instance_;
class GpuDeviceInfoProto;
struct GpuDeviceInfoProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern GpuDeviceInfoProtoDefaultTypeInternal _GpuDeviceInfoProto_default_instance_;
class GpuTargetConfigProto;
struct GpuTargetConfigProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern GpuTargetConfigProtoDefaultTypeInternal _GpuTargetConfigProto_default_instance_;
class RocmComputeCapabilityProto;
struct RocmComputeCapabilityProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern RocmComputeCapabilityProtoDefaultTypeInternal _RocmComputeCapabilityProto_default_instance_;
class RuntimeVersionProto;
struct RuntimeVersionProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern RuntimeVersionProtoDefaultTypeInternal _RuntimeVersionProto_default_instance_;
}  // namespace stream_executor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace stream_executor {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT RuntimeVersionProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:stream_executor.RuntimeVersionProto) */ {
 public:
  inline RuntimeVersionProto() : RuntimeVersionProto(nullptr) {}
  ~RuntimeVersionProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RuntimeVersionProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline RuntimeVersionProto(const RuntimeVersionProto& from) : RuntimeVersionProto(nullptr, from) {}
  inline RuntimeVersionProto(RuntimeVersionProto&& from) noexcept
      : RuntimeVersionProto(nullptr, std::move(from)) {}
  inline RuntimeVersionProto& operator=(const RuntimeVersionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeVersionProto& operator=(RuntimeVersionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeVersionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeVersionProto* internal_default_instance() {
    return reinterpret_cast<const RuntimeVersionProto*>(
        &_RuntimeVersionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RuntimeVersionProto& a, RuntimeVersionProto& b) { a.Swap(&b); }
  inline void Swap(RuntimeVersionProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeVersionProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeVersionProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RuntimeVersionProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RuntimeVersionProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RuntimeVersionProto& from) { RuntimeVersionProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RuntimeVersionProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "stream_executor.RuntimeVersionProto"; }

 protected:
  explicit RuntimeVersionProto(::google::protobuf::Arena* arena);
  RuntimeVersionProto(::google::protobuf::Arena* arena, const RuntimeVersionProto& from);
  RuntimeVersionProto(::google::protobuf::Arena* arena, RuntimeVersionProto&& from) noexcept
      : RuntimeVersionProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // int32 major = 1;
  void clear_major() ;
  ::int32_t major() const;
  void set_major(::int32_t value);

  private:
  ::int32_t _internal_major() const;
  void _internal_set_major(::int32_t value);

  public:
  // int32 minor = 2;
  void clear_minor() ;
  ::int32_t minor() const;
  void set_minor(::int32_t value);

  private:
  ::int32_t _internal_minor() const;
  void _internal_set_minor(::int32_t value);

  public:
  // int32 patch = 3;
  void clear_patch() ;
  ::int32_t patch() const;
  void set_patch(::int32_t value);

  private:
  ::int32_t _internal_patch() const;
  void _internal_set_patch(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:stream_executor.RuntimeVersionProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RuntimeVersionProto& from_msg);
    ::int32_t major_;
    ::int32_t minor_;
    ::int32_t patch_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RocmComputeCapabilityProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:stream_executor.RocmComputeCapabilityProto) */ {
 public:
  inline RocmComputeCapabilityProto() : RocmComputeCapabilityProto(nullptr) {}
  ~RocmComputeCapabilityProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RocmComputeCapabilityProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline RocmComputeCapabilityProto(const RocmComputeCapabilityProto& from) : RocmComputeCapabilityProto(nullptr, from) {}
  inline RocmComputeCapabilityProto(RocmComputeCapabilityProto&& from) noexcept
      : RocmComputeCapabilityProto(nullptr, std::move(from)) {}
  inline RocmComputeCapabilityProto& operator=(const RocmComputeCapabilityProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RocmComputeCapabilityProto& operator=(RocmComputeCapabilityProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RocmComputeCapabilityProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RocmComputeCapabilityProto* internal_default_instance() {
    return reinterpret_cast<const RocmComputeCapabilityProto*>(
        &_RocmComputeCapabilityProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RocmComputeCapabilityProto& a, RocmComputeCapabilityProto& b) { a.Swap(&b); }
  inline void Swap(RocmComputeCapabilityProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RocmComputeCapabilityProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RocmComputeCapabilityProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RocmComputeCapabilityProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RocmComputeCapabilityProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RocmComputeCapabilityProto& from) { RocmComputeCapabilityProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RocmComputeCapabilityProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "stream_executor.RocmComputeCapabilityProto"; }

 protected:
  explicit RocmComputeCapabilityProto(::google::protobuf::Arena* arena);
  RocmComputeCapabilityProto(::google::protobuf::Arena* arena, const RocmComputeCapabilityProto& from);
  RocmComputeCapabilityProto(::google::protobuf::Arena* arena, RocmComputeCapabilityProto&& from) noexcept
      : RocmComputeCapabilityProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGcnArchNameFieldNumber = 1,
  };
  // string gcn_arch_name = 1;
  void clear_gcn_arch_name() ;
  const std::string& gcn_arch_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gcn_arch_name(Arg_&& arg, Args_... args);
  std::string* mutable_gcn_arch_name();
  PROTOBUF_NODISCARD std::string* release_gcn_arch_name();
  void set_allocated_gcn_arch_name(std::string* value);

  private:
  const std::string& _internal_gcn_arch_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcn_arch_name(
      const std::string& value);
  std::string* _internal_mutable_gcn_arch_name();

  public:
  // @@protoc_insertion_point(class_scope:stream_executor.RocmComputeCapabilityProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      64, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RocmComputeCapabilityProto& from_msg);
    ::google::protobuf::internal::ArenaStringPtr gcn_arch_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DnnVersionInfoProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:stream_executor.DnnVersionInfoProto) */ {
 public:
  inline DnnVersionInfoProto() : DnnVersionInfoProto(nullptr) {}
  ~DnnVersionInfoProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DnnVersionInfoProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline DnnVersionInfoProto(const DnnVersionInfoProto& from) : DnnVersionInfoProto(nullptr, from) {}
  inline DnnVersionInfoProto(DnnVersionInfoProto&& from) noexcept
      : DnnVersionInfoProto(nullptr, std::move(from)) {}
  inline DnnVersionInfoProto& operator=(const DnnVersionInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DnnVersionInfoProto& operator=(DnnVersionInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DnnVersionInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DnnVersionInfoProto* internal_default_instance() {
    return reinterpret_cast<const DnnVersionInfoProto*>(
        &_DnnVersionInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DnnVersionInfoProto& a, DnnVersionInfoProto& b) { a.Swap(&b); }
  inline void Swap(DnnVersionInfoProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DnnVersionInfoProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DnnVersionInfoProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DnnVersionInfoProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DnnVersionInfoProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DnnVersionInfoProto& from) { DnnVersionInfoProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DnnVersionInfoProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "stream_executor.DnnVersionInfoProto"; }

 protected:
  explicit DnnVersionInfoProto(::google::protobuf::Arena* arena);
  DnnVersionInfoProto(::google::protobuf::Arena* arena, const DnnVersionInfoProto& from);
  DnnVersionInfoProto(::google::protobuf::Arena* arena, DnnVersionInfoProto&& from) noexcept
      : DnnVersionInfoProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // int32 major = 1;
  void clear_major() ;
  ::int32_t major() const;
  void set_major(::int32_t value);

  private:
  ::int32_t _internal_major() const;
  void _internal_set_major(::int32_t value);

  public:
  // int32 minor = 2;
  void clear_minor() ;
  ::int32_t minor() const;
  void set_minor(::int32_t value);

  private:
  ::int32_t _internal_minor() const;
  void _internal_set_minor(::int32_t value);

  public:
  // int32 patch = 3;
  void clear_patch() ;
  ::int32_t patch() const;
  void set_patch(::int32_t value);

  private:
  ::int32_t _internal_patch() const;
  void _internal_set_patch(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:stream_executor.DnnVersionInfoProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DnnVersionInfoProto& from_msg);
    ::int32_t major_;
    ::int32_t minor_;
    ::int32_t patch_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GpuDeviceInfoProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:stream_executor.GpuDeviceInfoProto) */ {
 public:
  inline GpuDeviceInfoProto() : GpuDeviceInfoProto(nullptr) {}
  ~GpuDeviceInfoProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GpuDeviceInfoProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline GpuDeviceInfoProto(const GpuDeviceInfoProto& from) : GpuDeviceInfoProto(nullptr, from) {}
  inline GpuDeviceInfoProto(GpuDeviceInfoProto&& from) noexcept
      : GpuDeviceInfoProto(nullptr, std::move(from)) {}
  inline GpuDeviceInfoProto& operator=(const GpuDeviceInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuDeviceInfoProto& operator=(GpuDeviceInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuDeviceInfoProto& default_instance() {
    return *internal_default_instance();
  }
  enum ComputeCapabilityCase {
    kCudaComputeCapability = 16,
    kRocmComputeCapability = 17,
    COMPUTE_CAPABILITY_NOT_SET = 0,
  };
  static inline const GpuDeviceInfoProto* internal_default_instance() {
    return reinterpret_cast<const GpuDeviceInfoProto*>(
        &_GpuDeviceInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GpuDeviceInfoProto& a, GpuDeviceInfoProto& b) { a.Swap(&b); }
  inline void Swap(GpuDeviceInfoProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuDeviceInfoProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpuDeviceInfoProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GpuDeviceInfoProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GpuDeviceInfoProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GpuDeviceInfoProto& from) { GpuDeviceInfoProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GpuDeviceInfoProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "stream_executor.GpuDeviceInfoProto"; }

 protected:
  explicit GpuDeviceInfoProto(::google::protobuf::Arena* arena);
  GpuDeviceInfoProto(::google::protobuf::Arena* arena, const GpuDeviceInfoProto& from);
  GpuDeviceInfoProto(::google::protobuf::Arena* arena, GpuDeviceInfoProto&& from) noexcept
      : GpuDeviceInfoProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kThreadsPerBlockLimitFieldNumber = 1,
    kThreadsPerWarpFieldNumber = 2,
    kSharedMemoryPerBlockFieldNumber = 3,
    kSharedMemoryPerCoreFieldNumber = 4,
    kThreadsPerCoreLimitFieldNumber = 5,
    kCoreCountFieldNumber = 6,
    kFpusPerCoreFieldNumber = 7,
    kBlockDimLimitXFieldNumber = 8,
    kBlockDimLimitYFieldNumber = 9,
    kMemoryBandwidthFieldNumber = 11,
    kBlockDimLimitZFieldNumber = 10,
    kClockRateGhzFieldNumber = 13,
    kL2CacheSizeFieldNumber = 12,
    kDeviceMemorySizeFieldNumber = 14,
    kRegistersPerCoreLimitFieldNumber = 18,
    kRegistersPerBlockLimitFieldNumber = 19,
    kSharedMemoryPerBlockOptinFieldNumber = 15,
    kCudaComputeCapabilityFieldNumber = 16,
    kRocmComputeCapabilityFieldNumber = 17,
  };
  // int32 threads_per_block_limit = 1;
  void clear_threads_per_block_limit() ;
  ::int32_t threads_per_block_limit() const;
  void set_threads_per_block_limit(::int32_t value);

  private:
  ::int32_t _internal_threads_per_block_limit() const;
  void _internal_set_threads_per_block_limit(::int32_t value);

  public:
  // int32 threads_per_warp = 2;
  void clear_threads_per_warp() ;
  ::int32_t threads_per_warp() const;
  void set_threads_per_warp(::int32_t value);

  private:
  ::int32_t _internal_threads_per_warp() const;
  void _internal_set_threads_per_warp(::int32_t value);

  public:
  // int32 shared_memory_per_block = 3;
  void clear_shared_memory_per_block() ;
  ::int32_t shared_memory_per_block() const;
  void set_shared_memory_per_block(::int32_t value);

  private:
  ::int32_t _internal_shared_memory_per_block() const;
  void _internal_set_shared_memory_per_block(::int32_t value);

  public:
  // int32 shared_memory_per_core = 4;
  void clear_shared_memory_per_core() ;
  ::int32_t shared_memory_per_core() const;
  void set_shared_memory_per_core(::int32_t value);

  private:
  ::int32_t _internal_shared_memory_per_core() const;
  void _internal_set_shared_memory_per_core(::int32_t value);

  public:
  // int32 threads_per_core_limit = 5;
  void clear_threads_per_core_limit() ;
  ::int32_t threads_per_core_limit() const;
  void set_threads_per_core_limit(::int32_t value);

  private:
  ::int32_t _internal_threads_per_core_limit() const;
  void _internal_set_threads_per_core_limit(::int32_t value);

  public:
  // int32 core_count = 6;
  void clear_core_count() ;
  ::int32_t core_count() const;
  void set_core_count(::int32_t value);

  private:
  ::int32_t _internal_core_count() const;
  void _internal_set_core_count(::int32_t value);

  public:
  // int64 fpus_per_core = 7;
  void clear_fpus_per_core() ;
  ::int64_t fpus_per_core() const;
  void set_fpus_per_core(::int64_t value);

  private:
  ::int64_t _internal_fpus_per_core() const;
  void _internal_set_fpus_per_core(::int64_t value);

  public:
  // int32 block_dim_limit_x = 8;
  void clear_block_dim_limit_x() ;
  ::int32_t block_dim_limit_x() const;
  void set_block_dim_limit_x(::int32_t value);

  private:
  ::int32_t _internal_block_dim_limit_x() const;
  void _internal_set_block_dim_limit_x(::int32_t value);

  public:
  // int32 block_dim_limit_y = 9;
  void clear_block_dim_limit_y() ;
  ::int32_t block_dim_limit_y() const;
  void set_block_dim_limit_y(::int32_t value);

  private:
  ::int32_t _internal_block_dim_limit_y() const;
  void _internal_set_block_dim_limit_y(::int32_t value);

  public:
  // int64 memory_bandwidth = 11;
  void clear_memory_bandwidth() ;
  ::int64_t memory_bandwidth() const;
  void set_memory_bandwidth(::int64_t value);

  private:
  ::int64_t _internal_memory_bandwidth() const;
  void _internal_set_memory_bandwidth(::int64_t value);

  public:
  // int32 block_dim_limit_z = 10;
  void clear_block_dim_limit_z() ;
  ::int32_t block_dim_limit_z() const;
  void set_block_dim_limit_z(::int32_t value);

  private:
  ::int32_t _internal_block_dim_limit_z() const;
  void _internal_set_block_dim_limit_z(::int32_t value);

  public:
  // float clock_rate_ghz = 13;
  void clear_clock_rate_ghz() ;
  float clock_rate_ghz() const;
  void set_clock_rate_ghz(float value);

  private:
  float _internal_clock_rate_ghz() const;
  void _internal_set_clock_rate_ghz(float value);

  public:
  // int64 l2_cache_size = 12;
  void clear_l2_cache_size() ;
  ::int64_t l2_cache_size() const;
  void set_l2_cache_size(::int64_t value);

  private:
  ::int64_t _internal_l2_cache_size() const;
  void _internal_set_l2_cache_size(::int64_t value);

  public:
  // int64 device_memory_size = 14;
  void clear_device_memory_size() ;
  ::int64_t device_memory_size() const;
  void set_device_memory_size(::int64_t value);

  private:
  ::int64_t _internal_device_memory_size() const;
  void _internal_set_device_memory_size(::int64_t value);

  public:
  // int64 registers_per_core_limit = 18;
  void clear_registers_per_core_limit() ;
  ::int64_t registers_per_core_limit() const;
  void set_registers_per_core_limit(::int64_t value);

  private:
  ::int64_t _internal_registers_per_core_limit() const;
  void _internal_set_registers_per_core_limit(::int64_t value);

  public:
  // int64 registers_per_block_limit = 19;
  void clear_registers_per_block_limit() ;
  ::int64_t registers_per_block_limit() const;
  void set_registers_per_block_limit(::int64_t value);

  private:
  ::int64_t _internal_registers_per_block_limit() const;
  void _internal_set_registers_per_block_limit(::int64_t value);

  public:
  // int32 shared_memory_per_block_optin = 15;
  void clear_shared_memory_per_block_optin() ;
  ::int32_t shared_memory_per_block_optin() const;
  void set_shared_memory_per_block_optin(::int32_t value);

  private:
  ::int32_t _internal_shared_memory_per_block_optin() const;
  void _internal_set_shared_memory_per_block_optin(::int32_t value);

  public:
  // .stream_executor.CudaComputeCapabilityProto cuda_compute_capability = 16;
  bool has_cuda_compute_capability() const;
  private:
  bool _internal_has_cuda_compute_capability() const;

  public:
  void clear_cuda_compute_capability() ;
  const ::stream_executor::CudaComputeCapabilityProto& cuda_compute_capability() const;
  PROTOBUF_NODISCARD ::stream_executor::CudaComputeCapabilityProto* release_cuda_compute_capability();
  ::stream_executor::CudaComputeCapabilityProto* mutable_cuda_compute_capability();
  void set_allocated_cuda_compute_capability(::stream_executor::CudaComputeCapabilityProto* value);
  void unsafe_arena_set_allocated_cuda_compute_capability(::stream_executor::CudaComputeCapabilityProto* value);
  ::stream_executor::CudaComputeCapabilityProto* unsafe_arena_release_cuda_compute_capability();

  private:
  const ::stream_executor::CudaComputeCapabilityProto& _internal_cuda_compute_capability() const;
  ::stream_executor::CudaComputeCapabilityProto* _internal_mutable_cuda_compute_capability();

  public:
  // .stream_executor.RocmComputeCapabilityProto rocm_compute_capability = 17;
  bool has_rocm_compute_capability() const;
  private:
  bool _internal_has_rocm_compute_capability() const;

  public:
  void clear_rocm_compute_capability() ;
  const ::stream_executor::RocmComputeCapabilityProto& rocm_compute_capability() const;
  PROTOBUF_NODISCARD ::stream_executor::RocmComputeCapabilityProto* release_rocm_compute_capability();
  ::stream_executor::RocmComputeCapabilityProto* mutable_rocm_compute_capability();
  void set_allocated_rocm_compute_capability(::stream_executor::RocmComputeCapabilityProto* value);
  void unsafe_arena_set_allocated_rocm_compute_capability(::stream_executor::RocmComputeCapabilityProto* value);
  ::stream_executor::RocmComputeCapabilityProto* unsafe_arena_release_rocm_compute_capability();

  private:
  const ::stream_executor::RocmComputeCapabilityProto& _internal_rocm_compute_capability() const;
  ::stream_executor::RocmComputeCapabilityProto* _internal_mutable_rocm_compute_capability();

  public:
  void clear_compute_capability();
  ComputeCapabilityCase compute_capability_case() const;
  // @@protoc_insertion_point(class_scope:stream_executor.GpuDeviceInfoProto)
 private:
  class _Internal;
  void set_has_cuda_compute_capability();
  void set_has_rocm_compute_capability();
  inline bool has_compute_capability() const;
  inline void clear_has_compute_capability();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 2,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GpuDeviceInfoProto& from_msg);
    ::int32_t threads_per_block_limit_;
    ::int32_t threads_per_warp_;
    ::int32_t shared_memory_per_block_;
    ::int32_t shared_memory_per_core_;
    ::int32_t threads_per_core_limit_;
    ::int32_t core_count_;
    ::int64_t fpus_per_core_;
    ::int32_t block_dim_limit_x_;
    ::int32_t block_dim_limit_y_;
    ::int64_t memory_bandwidth_;
    ::int32_t block_dim_limit_z_;
    float clock_rate_ghz_;
    ::int64_t l2_cache_size_;
    ::int64_t device_memory_size_;
    ::int64_t registers_per_core_limit_;
    ::int64_t registers_per_block_limit_;
    ::int32_t shared_memory_per_block_optin_;
    union ComputeCapabilityUnion {
      constexpr ComputeCapabilityUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::stream_executor::CudaComputeCapabilityProto* cuda_compute_capability_;
      ::stream_executor::RocmComputeCapabilityProto* rocm_compute_capability_;
    } compute_capability_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GpuTargetConfigProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:stream_executor.GpuTargetConfigProto) */ {
 public:
  inline GpuTargetConfigProto() : GpuTargetConfigProto(nullptr) {}
  ~GpuTargetConfigProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GpuTargetConfigProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline GpuTargetConfigProto(const GpuTargetConfigProto& from) : GpuTargetConfigProto(nullptr, from) {}
  inline GpuTargetConfigProto(GpuTargetConfigProto&& from) noexcept
      : GpuTargetConfigProto(nullptr, std::move(from)) {}
  inline GpuTargetConfigProto& operator=(const GpuTargetConfigProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuTargetConfigProto& operator=(GpuTargetConfigProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuTargetConfigProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpuTargetConfigProto* internal_default_instance() {
    return reinterpret_cast<const GpuTargetConfigProto*>(
        &_GpuTargetConfigProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GpuTargetConfigProto& a, GpuTargetConfigProto& b) { a.Swap(&b); }
  inline void Swap(GpuTargetConfigProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuTargetConfigProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpuTargetConfigProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GpuTargetConfigProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GpuTargetConfigProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GpuTargetConfigProto& from) { GpuTargetConfigProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GpuTargetConfigProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "stream_executor.GpuTargetConfigProto"; }

 protected:
  explicit GpuTargetConfigProto(::google::protobuf::Arena* arena);
  GpuTargetConfigProto(::google::protobuf::Arena* arena, const GpuTargetConfigProto& from);
  GpuTargetConfigProto(::google::protobuf::Arena* arena, GpuTargetConfigProto&& from) noexcept
      : GpuTargetConfigProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlatformNameFieldNumber = 4,
    kDeviceDescriptionStrFieldNumber = 7,
    kGpuDeviceInfoFieldNumber = 1,
    kDnnVersionInfoFieldNumber = 5,
    kAutotuneResultsFieldNumber = 6,
    kRuntimeVersionFieldNumber = 8,
  };
  // string platform_name = 4;
  void clear_platform_name() ;
  const std::string& platform_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform_name(Arg_&& arg, Args_... args);
  std::string* mutable_platform_name();
  PROTOBUF_NODISCARD std::string* release_platform_name();
  void set_allocated_platform_name(std::string* value);

  private:
  const std::string& _internal_platform_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform_name(
      const std::string& value);
  std::string* _internal_mutable_platform_name();

  public:
  // string device_description_str = 7;
  void clear_device_description_str() ;
  const std::string& device_description_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_description_str(Arg_&& arg, Args_... args);
  std::string* mutable_device_description_str();
  PROTOBUF_NODISCARD std::string* release_device_description_str();
  void set_allocated_device_description_str(std::string* value);

  private:
  const std::string& _internal_device_description_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_description_str(
      const std::string& value);
  std::string* _internal_mutable_device_description_str();

  public:
  // .stream_executor.GpuDeviceInfoProto gpu_device_info = 1;
  bool has_gpu_device_info() const;
  void clear_gpu_device_info() ;
  const ::stream_executor::GpuDeviceInfoProto& gpu_device_info() const;
  PROTOBUF_NODISCARD ::stream_executor::GpuDeviceInfoProto* release_gpu_device_info();
  ::stream_executor::GpuDeviceInfoProto* mutable_gpu_device_info();
  void set_allocated_gpu_device_info(::stream_executor::GpuDeviceInfoProto* value);
  void unsafe_arena_set_allocated_gpu_device_info(::stream_executor::GpuDeviceInfoProto* value);
  ::stream_executor::GpuDeviceInfoProto* unsafe_arena_release_gpu_device_info();

  private:
  const ::stream_executor::GpuDeviceInfoProto& _internal_gpu_device_info() const;
  ::stream_executor::GpuDeviceInfoProto* _internal_mutable_gpu_device_info();

  public:
  // .stream_executor.DnnVersionInfoProto dnn_version_info = 5;
  bool has_dnn_version_info() const;
  void clear_dnn_version_info() ;
  const ::stream_executor::DnnVersionInfoProto& dnn_version_info() const;
  PROTOBUF_NODISCARD ::stream_executor::DnnVersionInfoProto* release_dnn_version_info();
  ::stream_executor::DnnVersionInfoProto* mutable_dnn_version_info();
  void set_allocated_dnn_version_info(::stream_executor::DnnVersionInfoProto* value);
  void unsafe_arena_set_allocated_dnn_version_info(::stream_executor::DnnVersionInfoProto* value);
  ::stream_executor::DnnVersionInfoProto* unsafe_arena_release_dnn_version_info();

  private:
  const ::stream_executor::DnnVersionInfoProto& _internal_dnn_version_info() const;
  ::stream_executor::DnnVersionInfoProto* _internal_mutable_dnn_version_info();

  public:
  // .xla.AutotuneResults autotune_results = 6;
  bool has_autotune_results() const;
  void clear_autotune_results() ;
  const ::xla::AutotuneResults& autotune_results() const;
  PROTOBUF_NODISCARD ::xla::AutotuneResults* release_autotune_results();
  ::xla::AutotuneResults* mutable_autotune_results();
  void set_allocated_autotune_results(::xla::AutotuneResults* value);
  void unsafe_arena_set_allocated_autotune_results(::xla::AutotuneResults* value);
  ::xla::AutotuneResults* unsafe_arena_release_autotune_results();

  private:
  const ::xla::AutotuneResults& _internal_autotune_results() const;
  ::xla::AutotuneResults* _internal_mutable_autotune_results();

  public:
  // .stream_executor.RuntimeVersionProto runtime_version = 8;
  bool has_runtime_version() const;
  void clear_runtime_version() ;
  const ::stream_executor::RuntimeVersionProto& runtime_version() const;
  PROTOBUF_NODISCARD ::stream_executor::RuntimeVersionProto* release_runtime_version();
  ::stream_executor::RuntimeVersionProto* mutable_runtime_version();
  void set_allocated_runtime_version(::stream_executor::RuntimeVersionProto* value);
  void unsafe_arena_set_allocated_runtime_version(::stream_executor::RuntimeVersionProto* value);
  ::stream_executor::RuntimeVersionProto* unsafe_arena_release_runtime_version();

  private:
  const ::stream_executor::RuntimeVersionProto& _internal_runtime_version() const;
  ::stream_executor::RuntimeVersionProto* _internal_mutable_runtime_version();

  public:
  // @@protoc_insertion_point(class_scope:stream_executor.GpuTargetConfigProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      80, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GpuTargetConfigProto& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr platform_name_;
    ::google::protobuf::internal::ArenaStringPtr device_description_str_;
    ::stream_executor::GpuDeviceInfoProto* gpu_device_info_;
    ::stream_executor::DnnVersionInfoProto* dnn_version_info_;
    ::xla::AutotuneResults* autotune_results_;
    ::stream_executor::RuntimeVersionProto* runtime_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RocmComputeCapabilityProto

// string gcn_arch_name = 1;
inline void RocmComputeCapabilityProto::clear_gcn_arch_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gcn_arch_name_.ClearToEmpty();
}
inline const std::string& RocmComputeCapabilityProto::gcn_arch_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.RocmComputeCapabilityProto.gcn_arch_name)
  return _internal_gcn_arch_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RocmComputeCapabilityProto::set_gcn_arch_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gcn_arch_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:stream_executor.RocmComputeCapabilityProto.gcn_arch_name)
}
inline std::string* RocmComputeCapabilityProto::mutable_gcn_arch_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gcn_arch_name();
  // @@protoc_insertion_point(field_mutable:stream_executor.RocmComputeCapabilityProto.gcn_arch_name)
  return _s;
}
inline const std::string& RocmComputeCapabilityProto::_internal_gcn_arch_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gcn_arch_name_.Get();
}
inline void RocmComputeCapabilityProto::_internal_set_gcn_arch_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gcn_arch_name_.Set(value, GetArena());
}
inline std::string* RocmComputeCapabilityProto::_internal_mutable_gcn_arch_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gcn_arch_name_.Mutable( GetArena());
}
inline std::string* RocmComputeCapabilityProto::release_gcn_arch_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:stream_executor.RocmComputeCapabilityProto.gcn_arch_name)
  return _impl_.gcn_arch_name_.Release();
}
inline void RocmComputeCapabilityProto::set_allocated_gcn_arch_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gcn_arch_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gcn_arch_name_.IsDefault()) {
          _impl_.gcn_arch_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stream_executor.RocmComputeCapabilityProto.gcn_arch_name)
}

// -------------------------------------------------------------------

// GpuDeviceInfoProto

// int32 threads_per_block_limit = 1;
inline void GpuDeviceInfoProto::clear_threads_per_block_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threads_per_block_limit_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::threads_per_block_limit() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.threads_per_block_limit)
  return _internal_threads_per_block_limit();
}
inline void GpuDeviceInfoProto::set_threads_per_block_limit(::int32_t value) {
  _internal_set_threads_per_block_limit(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.threads_per_block_limit)
}
inline ::int32_t GpuDeviceInfoProto::_internal_threads_per_block_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threads_per_block_limit_;
}
inline void GpuDeviceInfoProto::_internal_set_threads_per_block_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threads_per_block_limit_ = value;
}

// int32 threads_per_warp = 2;
inline void GpuDeviceInfoProto::clear_threads_per_warp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threads_per_warp_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::threads_per_warp() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.threads_per_warp)
  return _internal_threads_per_warp();
}
inline void GpuDeviceInfoProto::set_threads_per_warp(::int32_t value) {
  _internal_set_threads_per_warp(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.threads_per_warp)
}
inline ::int32_t GpuDeviceInfoProto::_internal_threads_per_warp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threads_per_warp_;
}
inline void GpuDeviceInfoProto::_internal_set_threads_per_warp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threads_per_warp_ = value;
}

// int32 shared_memory_per_block = 3;
inline void GpuDeviceInfoProto::clear_shared_memory_per_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_memory_per_block_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::shared_memory_per_block() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.shared_memory_per_block)
  return _internal_shared_memory_per_block();
}
inline void GpuDeviceInfoProto::set_shared_memory_per_block(::int32_t value) {
  _internal_set_shared_memory_per_block(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.shared_memory_per_block)
}
inline ::int32_t GpuDeviceInfoProto::_internal_shared_memory_per_block() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shared_memory_per_block_;
}
inline void GpuDeviceInfoProto::_internal_set_shared_memory_per_block(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_memory_per_block_ = value;
}

// int32 shared_memory_per_core = 4;
inline void GpuDeviceInfoProto::clear_shared_memory_per_core() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_memory_per_core_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::shared_memory_per_core() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.shared_memory_per_core)
  return _internal_shared_memory_per_core();
}
inline void GpuDeviceInfoProto::set_shared_memory_per_core(::int32_t value) {
  _internal_set_shared_memory_per_core(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.shared_memory_per_core)
}
inline ::int32_t GpuDeviceInfoProto::_internal_shared_memory_per_core() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shared_memory_per_core_;
}
inline void GpuDeviceInfoProto::_internal_set_shared_memory_per_core(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_memory_per_core_ = value;
}

// int32 threads_per_core_limit = 5;
inline void GpuDeviceInfoProto::clear_threads_per_core_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threads_per_core_limit_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::threads_per_core_limit() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.threads_per_core_limit)
  return _internal_threads_per_core_limit();
}
inline void GpuDeviceInfoProto::set_threads_per_core_limit(::int32_t value) {
  _internal_set_threads_per_core_limit(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.threads_per_core_limit)
}
inline ::int32_t GpuDeviceInfoProto::_internal_threads_per_core_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threads_per_core_limit_;
}
inline void GpuDeviceInfoProto::_internal_set_threads_per_core_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threads_per_core_limit_ = value;
}

// int32 core_count = 6;
inline void GpuDeviceInfoProto::clear_core_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.core_count_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::core_count() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.core_count)
  return _internal_core_count();
}
inline void GpuDeviceInfoProto::set_core_count(::int32_t value) {
  _internal_set_core_count(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.core_count)
}
inline ::int32_t GpuDeviceInfoProto::_internal_core_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.core_count_;
}
inline void GpuDeviceInfoProto::_internal_set_core_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.core_count_ = value;
}

// int64 fpus_per_core = 7;
inline void GpuDeviceInfoProto::clear_fpus_per_core() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fpus_per_core_ = ::int64_t{0};
}
inline ::int64_t GpuDeviceInfoProto::fpus_per_core() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.fpus_per_core)
  return _internal_fpus_per_core();
}
inline void GpuDeviceInfoProto::set_fpus_per_core(::int64_t value) {
  _internal_set_fpus_per_core(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.fpus_per_core)
}
inline ::int64_t GpuDeviceInfoProto::_internal_fpus_per_core() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fpus_per_core_;
}
inline void GpuDeviceInfoProto::_internal_set_fpus_per_core(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fpus_per_core_ = value;
}

// int32 block_dim_limit_x = 8;
inline void GpuDeviceInfoProto::clear_block_dim_limit_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_dim_limit_x_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::block_dim_limit_x() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.block_dim_limit_x)
  return _internal_block_dim_limit_x();
}
inline void GpuDeviceInfoProto::set_block_dim_limit_x(::int32_t value) {
  _internal_set_block_dim_limit_x(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.block_dim_limit_x)
}
inline ::int32_t GpuDeviceInfoProto::_internal_block_dim_limit_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_dim_limit_x_;
}
inline void GpuDeviceInfoProto::_internal_set_block_dim_limit_x(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_dim_limit_x_ = value;
}

// int32 block_dim_limit_y = 9;
inline void GpuDeviceInfoProto::clear_block_dim_limit_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_dim_limit_y_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::block_dim_limit_y() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.block_dim_limit_y)
  return _internal_block_dim_limit_y();
}
inline void GpuDeviceInfoProto::set_block_dim_limit_y(::int32_t value) {
  _internal_set_block_dim_limit_y(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.block_dim_limit_y)
}
inline ::int32_t GpuDeviceInfoProto::_internal_block_dim_limit_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_dim_limit_y_;
}
inline void GpuDeviceInfoProto::_internal_set_block_dim_limit_y(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_dim_limit_y_ = value;
}

// int32 block_dim_limit_z = 10;
inline void GpuDeviceInfoProto::clear_block_dim_limit_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_dim_limit_z_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::block_dim_limit_z() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.block_dim_limit_z)
  return _internal_block_dim_limit_z();
}
inline void GpuDeviceInfoProto::set_block_dim_limit_z(::int32_t value) {
  _internal_set_block_dim_limit_z(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.block_dim_limit_z)
}
inline ::int32_t GpuDeviceInfoProto::_internal_block_dim_limit_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_dim_limit_z_;
}
inline void GpuDeviceInfoProto::_internal_set_block_dim_limit_z(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_dim_limit_z_ = value;
}

// int64 memory_bandwidth = 11;
inline void GpuDeviceInfoProto::clear_memory_bandwidth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_bandwidth_ = ::int64_t{0};
}
inline ::int64_t GpuDeviceInfoProto::memory_bandwidth() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.memory_bandwidth)
  return _internal_memory_bandwidth();
}
inline void GpuDeviceInfoProto::set_memory_bandwidth(::int64_t value) {
  _internal_set_memory_bandwidth(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.memory_bandwidth)
}
inline ::int64_t GpuDeviceInfoProto::_internal_memory_bandwidth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_bandwidth_;
}
inline void GpuDeviceInfoProto::_internal_set_memory_bandwidth(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_bandwidth_ = value;
}

// int64 l2_cache_size = 12;
inline void GpuDeviceInfoProto::clear_l2_cache_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l2_cache_size_ = ::int64_t{0};
}
inline ::int64_t GpuDeviceInfoProto::l2_cache_size() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.l2_cache_size)
  return _internal_l2_cache_size();
}
inline void GpuDeviceInfoProto::set_l2_cache_size(::int64_t value) {
  _internal_set_l2_cache_size(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.l2_cache_size)
}
inline ::int64_t GpuDeviceInfoProto::_internal_l2_cache_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.l2_cache_size_;
}
inline void GpuDeviceInfoProto::_internal_set_l2_cache_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l2_cache_size_ = value;
}

// float clock_rate_ghz = 13;
inline void GpuDeviceInfoProto::clear_clock_rate_ghz() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_rate_ghz_ = 0;
}
inline float GpuDeviceInfoProto::clock_rate_ghz() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.clock_rate_ghz)
  return _internal_clock_rate_ghz();
}
inline void GpuDeviceInfoProto::set_clock_rate_ghz(float value) {
  _internal_set_clock_rate_ghz(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.clock_rate_ghz)
}
inline float GpuDeviceInfoProto::_internal_clock_rate_ghz() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clock_rate_ghz_;
}
inline void GpuDeviceInfoProto::_internal_set_clock_rate_ghz(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_rate_ghz_ = value;
}

// int64 device_memory_size = 14;
inline void GpuDeviceInfoProto::clear_device_memory_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_memory_size_ = ::int64_t{0};
}
inline ::int64_t GpuDeviceInfoProto::device_memory_size() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.device_memory_size)
  return _internal_device_memory_size();
}
inline void GpuDeviceInfoProto::set_device_memory_size(::int64_t value) {
  _internal_set_device_memory_size(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.device_memory_size)
}
inline ::int64_t GpuDeviceInfoProto::_internal_device_memory_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_memory_size_;
}
inline void GpuDeviceInfoProto::_internal_set_device_memory_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_memory_size_ = value;
}

// int32 shared_memory_per_block_optin = 15;
inline void GpuDeviceInfoProto::clear_shared_memory_per_block_optin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_memory_per_block_optin_ = 0;
}
inline ::int32_t GpuDeviceInfoProto::shared_memory_per_block_optin() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.shared_memory_per_block_optin)
  return _internal_shared_memory_per_block_optin();
}
inline void GpuDeviceInfoProto::set_shared_memory_per_block_optin(::int32_t value) {
  _internal_set_shared_memory_per_block_optin(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.shared_memory_per_block_optin)
}
inline ::int32_t GpuDeviceInfoProto::_internal_shared_memory_per_block_optin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shared_memory_per_block_optin_;
}
inline void GpuDeviceInfoProto::_internal_set_shared_memory_per_block_optin(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_memory_per_block_optin_ = value;
}

// .stream_executor.CudaComputeCapabilityProto cuda_compute_capability = 16;
inline bool GpuDeviceInfoProto::has_cuda_compute_capability() const {
  return compute_capability_case() == kCudaComputeCapability;
}
inline bool GpuDeviceInfoProto::_internal_has_cuda_compute_capability() const {
  return compute_capability_case() == kCudaComputeCapability;
}
inline void GpuDeviceInfoProto::set_has_cuda_compute_capability() {
  _impl_._oneof_case_[0] = kCudaComputeCapability;
}
inline ::stream_executor::CudaComputeCapabilityProto* GpuDeviceInfoProto::release_cuda_compute_capability() {
  // @@protoc_insertion_point(field_release:stream_executor.GpuDeviceInfoProto.cuda_compute_capability)
  if (compute_capability_case() == kCudaComputeCapability) {
    clear_has_compute_capability();
    auto* temp = _impl_.compute_capability_.cuda_compute_capability_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.compute_capability_.cuda_compute_capability_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stream_executor::CudaComputeCapabilityProto& GpuDeviceInfoProto::_internal_cuda_compute_capability() const {
  return compute_capability_case() == kCudaComputeCapability ? *_impl_.compute_capability_.cuda_compute_capability_ : reinterpret_cast<::stream_executor::CudaComputeCapabilityProto&>(::stream_executor::_CudaComputeCapabilityProto_default_instance_);
}
inline const ::stream_executor::CudaComputeCapabilityProto& GpuDeviceInfoProto::cuda_compute_capability() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.cuda_compute_capability)
  return _internal_cuda_compute_capability();
}
inline ::stream_executor::CudaComputeCapabilityProto* GpuDeviceInfoProto::unsafe_arena_release_cuda_compute_capability() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stream_executor.GpuDeviceInfoProto.cuda_compute_capability)
  if (compute_capability_case() == kCudaComputeCapability) {
    clear_has_compute_capability();
    auto* temp = _impl_.compute_capability_.cuda_compute_capability_;
    _impl_.compute_capability_.cuda_compute_capability_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GpuDeviceInfoProto::unsafe_arena_set_allocated_cuda_compute_capability(::stream_executor::CudaComputeCapabilityProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_compute_capability();
  if (value) {
    set_has_cuda_compute_capability();
    _impl_.compute_capability_.cuda_compute_capability_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.GpuDeviceInfoProto.cuda_compute_capability)
}
inline ::stream_executor::CudaComputeCapabilityProto* GpuDeviceInfoProto::_internal_mutable_cuda_compute_capability() {
  if (compute_capability_case() != kCudaComputeCapability) {
    clear_compute_capability();
    set_has_cuda_compute_capability();
    _impl_.compute_capability_.cuda_compute_capability_ =
        ::google::protobuf::Message::DefaultConstruct<::stream_executor::CudaComputeCapabilityProto>(GetArena());
  }
  return _impl_.compute_capability_.cuda_compute_capability_;
}
inline ::stream_executor::CudaComputeCapabilityProto* GpuDeviceInfoProto::mutable_cuda_compute_capability() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::stream_executor::CudaComputeCapabilityProto* _msg = _internal_mutable_cuda_compute_capability();
  // @@protoc_insertion_point(field_mutable:stream_executor.GpuDeviceInfoProto.cuda_compute_capability)
  return _msg;
}

// .stream_executor.RocmComputeCapabilityProto rocm_compute_capability = 17;
inline bool GpuDeviceInfoProto::has_rocm_compute_capability() const {
  return compute_capability_case() == kRocmComputeCapability;
}
inline bool GpuDeviceInfoProto::_internal_has_rocm_compute_capability() const {
  return compute_capability_case() == kRocmComputeCapability;
}
inline void GpuDeviceInfoProto::set_has_rocm_compute_capability() {
  _impl_._oneof_case_[0] = kRocmComputeCapability;
}
inline void GpuDeviceInfoProto::clear_rocm_compute_capability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (compute_capability_case() == kRocmComputeCapability) {
    if (GetArena() == nullptr) {
      delete _impl_.compute_capability_.rocm_compute_capability_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.compute_capability_.rocm_compute_capability_);
    }
    clear_has_compute_capability();
  }
}
inline ::stream_executor::RocmComputeCapabilityProto* GpuDeviceInfoProto::release_rocm_compute_capability() {
  // @@protoc_insertion_point(field_release:stream_executor.GpuDeviceInfoProto.rocm_compute_capability)
  if (compute_capability_case() == kRocmComputeCapability) {
    clear_has_compute_capability();
    auto* temp = _impl_.compute_capability_.rocm_compute_capability_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.compute_capability_.rocm_compute_capability_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stream_executor::RocmComputeCapabilityProto& GpuDeviceInfoProto::_internal_rocm_compute_capability() const {
  return compute_capability_case() == kRocmComputeCapability ? *_impl_.compute_capability_.rocm_compute_capability_ : reinterpret_cast<::stream_executor::RocmComputeCapabilityProto&>(::stream_executor::_RocmComputeCapabilityProto_default_instance_);
}
inline const ::stream_executor::RocmComputeCapabilityProto& GpuDeviceInfoProto::rocm_compute_capability() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.rocm_compute_capability)
  return _internal_rocm_compute_capability();
}
inline ::stream_executor::RocmComputeCapabilityProto* GpuDeviceInfoProto::unsafe_arena_release_rocm_compute_capability() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stream_executor.GpuDeviceInfoProto.rocm_compute_capability)
  if (compute_capability_case() == kRocmComputeCapability) {
    clear_has_compute_capability();
    auto* temp = _impl_.compute_capability_.rocm_compute_capability_;
    _impl_.compute_capability_.rocm_compute_capability_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GpuDeviceInfoProto::unsafe_arena_set_allocated_rocm_compute_capability(::stream_executor::RocmComputeCapabilityProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_compute_capability();
  if (value) {
    set_has_rocm_compute_capability();
    _impl_.compute_capability_.rocm_compute_capability_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.GpuDeviceInfoProto.rocm_compute_capability)
}
inline ::stream_executor::RocmComputeCapabilityProto* GpuDeviceInfoProto::_internal_mutable_rocm_compute_capability() {
  if (compute_capability_case() != kRocmComputeCapability) {
    clear_compute_capability();
    set_has_rocm_compute_capability();
    _impl_.compute_capability_.rocm_compute_capability_ =
        ::google::protobuf::Message::DefaultConstruct<::stream_executor::RocmComputeCapabilityProto>(GetArena());
  }
  return _impl_.compute_capability_.rocm_compute_capability_;
}
inline ::stream_executor::RocmComputeCapabilityProto* GpuDeviceInfoProto::mutable_rocm_compute_capability() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::stream_executor::RocmComputeCapabilityProto* _msg = _internal_mutable_rocm_compute_capability();
  // @@protoc_insertion_point(field_mutable:stream_executor.GpuDeviceInfoProto.rocm_compute_capability)
  return _msg;
}

// int64 registers_per_core_limit = 18;
inline void GpuDeviceInfoProto::clear_registers_per_core_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registers_per_core_limit_ = ::int64_t{0};
}
inline ::int64_t GpuDeviceInfoProto::registers_per_core_limit() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.registers_per_core_limit)
  return _internal_registers_per_core_limit();
}
inline void GpuDeviceInfoProto::set_registers_per_core_limit(::int64_t value) {
  _internal_set_registers_per_core_limit(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.registers_per_core_limit)
}
inline ::int64_t GpuDeviceInfoProto::_internal_registers_per_core_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.registers_per_core_limit_;
}
inline void GpuDeviceInfoProto::_internal_set_registers_per_core_limit(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registers_per_core_limit_ = value;
}

// int64 registers_per_block_limit = 19;
inline void GpuDeviceInfoProto::clear_registers_per_block_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registers_per_block_limit_ = ::int64_t{0};
}
inline ::int64_t GpuDeviceInfoProto::registers_per_block_limit() const {
  // @@protoc_insertion_point(field_get:stream_executor.GpuDeviceInfoProto.registers_per_block_limit)
  return _internal_registers_per_block_limit();
}
inline void GpuDeviceInfoProto::set_registers_per_block_limit(::int64_t value) {
  _internal_set_registers_per_block_limit(value);
  // @@protoc_insertion_point(field_set:stream_executor.GpuDeviceInfoProto.registers_per_block_limit)
}
inline ::int64_t GpuDeviceInfoProto::_internal_registers_per_block_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.registers_per_block_limit_;
}
inline void GpuDeviceInfoProto::_internal_set_registers_per_block_limit(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registers_per_block_limit_ = value;
}

inline bool GpuDeviceInfoProto::has_compute_capability() const {
  return compute_capability_case() != COMPUTE_CAPABILITY_NOT_SET;
}
inline void GpuDeviceInfoProto::clear_has_compute_capability() {
  _impl_._oneof_case_[0] = COMPUTE_CAPABILITY_NOT_SET;
}
inline GpuDeviceInfoProto::ComputeCapabilityCase GpuDeviceInfoProto::compute_capability_case() const {
  return GpuDeviceInfoProto::ComputeCapabilityCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DnnVersionInfoProto

// int32 major = 1;
inline void DnnVersionInfoProto::clear_major() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.major_ = 0;
}
inline ::int32_t DnnVersionInfoProto::major() const {
  // @@protoc_insertion_point(field_get:stream_executor.DnnVersionInfoProto.major)
  return _internal_major();
}
inline void DnnVersionInfoProto::set_major(::int32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:stream_executor.DnnVersionInfoProto.major)
}
inline ::int32_t DnnVersionInfoProto::_internal_major() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.major_;
}
inline void DnnVersionInfoProto::_internal_set_major(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.major_ = value;
}

// int32 minor = 2;
inline void DnnVersionInfoProto::clear_minor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minor_ = 0;
}
inline ::int32_t DnnVersionInfoProto::minor() const {
  // @@protoc_insertion_point(field_get:stream_executor.DnnVersionInfoProto.minor)
  return _internal_minor();
}
inline void DnnVersionInfoProto::set_minor(::int32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:stream_executor.DnnVersionInfoProto.minor)
}
inline ::int32_t DnnVersionInfoProto::_internal_minor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minor_;
}
inline void DnnVersionInfoProto::_internal_set_minor(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minor_ = value;
}

// int32 patch = 3;
inline void DnnVersionInfoProto::clear_patch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.patch_ = 0;
}
inline ::int32_t DnnVersionInfoProto::patch() const {
  // @@protoc_insertion_point(field_get:stream_executor.DnnVersionInfoProto.patch)
  return _internal_patch();
}
inline void DnnVersionInfoProto::set_patch(::int32_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:stream_executor.DnnVersionInfoProto.patch)
}
inline ::int32_t DnnVersionInfoProto::_internal_patch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.patch_;
}
inline void DnnVersionInfoProto::_internal_set_patch(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.patch_ = value;
}

// -------------------------------------------------------------------

// RuntimeVersionProto

// int32 major = 1;
inline void RuntimeVersionProto::clear_major() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.major_ = 0;
}
inline ::int32_t RuntimeVersionProto::major() const {
  // @@protoc_insertion_point(field_get:stream_executor.RuntimeVersionProto.major)
  return _internal_major();
}
inline void RuntimeVersionProto::set_major(::int32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:stream_executor.RuntimeVersionProto.major)
}
inline ::int32_t RuntimeVersionProto::_internal_major() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.major_;
}
inline void RuntimeVersionProto::_internal_set_major(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.major_ = value;
}

// int32 minor = 2;
inline void RuntimeVersionProto::clear_minor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minor_ = 0;
}
inline ::int32_t RuntimeVersionProto::minor() const {
  // @@protoc_insertion_point(field_get:stream_executor.RuntimeVersionProto.minor)
  return _internal_minor();
}
inline void RuntimeVersionProto::set_minor(::int32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:stream_executor.RuntimeVersionProto.minor)
}
inline ::int32_t RuntimeVersionProto::_internal_minor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minor_;
}
inline void RuntimeVersionProto::_internal_set_minor(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minor_ = value;
}

// int32 patch = 3;
inline void RuntimeVersionProto::clear_patch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.patch_ = 0;
}
inline ::int32_t RuntimeVersionProto::patch() const {
  // @@protoc_insertion_point(field_get:stream_executor.RuntimeVersionProto.patch)
  return _internal_patch();
}
inline void RuntimeVersionProto::set_patch(::int32_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:stream_executor.RuntimeVersionProto.patch)
}
inline ::int32_t RuntimeVersionProto::_internal_patch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.patch_;
}
inline void RuntimeVersionProto::_internal_set_patch(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.patch_ = value;
}

// -------------------------------------------------------------------

// GpuTargetConfigProto

// .stream_executor.GpuDeviceInfoProto gpu_device_info = 1;
inline bool GpuTargetConfigProto::has_gpu_device_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gpu_device_info_ != nullptr);
  return value;
}
inline void GpuTargetConfigProto::clear_gpu_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gpu_device_info_ != nullptr) _impl_.gpu_device_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::stream_executor::GpuDeviceInfoProto& GpuTargetConfigProto::_internal_gpu_device_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::stream_executor::GpuDeviceInfoProto* p = _impl_.gpu_device_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::stream_executor::GpuDeviceInfoProto&>(::stream_executor::_GpuDeviceInfoProto_default_instance_);
}
inline const ::stream_executor::GpuDeviceInfoProto& GpuTargetConfigProto::gpu_device_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.GpuTargetConfigProto.gpu_device_info)
  return _internal_gpu_device_info();
}
inline void GpuTargetConfigProto::unsafe_arena_set_allocated_gpu_device_info(::stream_executor::GpuDeviceInfoProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gpu_device_info_);
  }
  _impl_.gpu_device_info_ = reinterpret_cast<::stream_executor::GpuDeviceInfoProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.GpuTargetConfigProto.gpu_device_info)
}
inline ::stream_executor::GpuDeviceInfoProto* GpuTargetConfigProto::release_gpu_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::stream_executor::GpuDeviceInfoProto* released = _impl_.gpu_device_info_;
  _impl_.gpu_device_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::stream_executor::GpuDeviceInfoProto* GpuTargetConfigProto::unsafe_arena_release_gpu_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:stream_executor.GpuTargetConfigProto.gpu_device_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::stream_executor::GpuDeviceInfoProto* temp = _impl_.gpu_device_info_;
  _impl_.gpu_device_info_ = nullptr;
  return temp;
}
inline ::stream_executor::GpuDeviceInfoProto* GpuTargetConfigProto::_internal_mutable_gpu_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gpu_device_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::stream_executor::GpuDeviceInfoProto>(GetArena());
    _impl_.gpu_device_info_ = reinterpret_cast<::stream_executor::GpuDeviceInfoProto*>(p);
  }
  return _impl_.gpu_device_info_;
}
inline ::stream_executor::GpuDeviceInfoProto* GpuTargetConfigProto::mutable_gpu_device_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::stream_executor::GpuDeviceInfoProto* _msg = _internal_mutable_gpu_device_info();
  // @@protoc_insertion_point(field_mutable:stream_executor.GpuTargetConfigProto.gpu_device_info)
  return _msg;
}
inline void GpuTargetConfigProto::set_allocated_gpu_device_info(::stream_executor::GpuDeviceInfoProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gpu_device_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gpu_device_info_ = reinterpret_cast<::stream_executor::GpuDeviceInfoProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:stream_executor.GpuTargetConfigProto.gpu_device_info)
}

// string platform_name = 4;
inline void GpuTargetConfigProto::clear_platform_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_name_.ClearToEmpty();
}
inline const std::string& GpuTargetConfigProto::platform_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.GpuTargetConfigProto.platform_name)
  return _internal_platform_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GpuTargetConfigProto::set_platform_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:stream_executor.GpuTargetConfigProto.platform_name)
}
inline std::string* GpuTargetConfigProto::mutable_platform_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_platform_name();
  // @@protoc_insertion_point(field_mutable:stream_executor.GpuTargetConfigProto.platform_name)
  return _s;
}
inline const std::string& GpuTargetConfigProto::_internal_platform_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.platform_name_.Get();
}
inline void GpuTargetConfigProto::_internal_set_platform_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_name_.Set(value, GetArena());
}
inline std::string* GpuTargetConfigProto::_internal_mutable_platform_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.platform_name_.Mutable( GetArena());
}
inline std::string* GpuTargetConfigProto::release_platform_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:stream_executor.GpuTargetConfigProto.platform_name)
  return _impl_.platform_name_.Release();
}
inline void GpuTargetConfigProto::set_allocated_platform_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.platform_name_.IsDefault()) {
          _impl_.platform_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stream_executor.GpuTargetConfigProto.platform_name)
}

// .stream_executor.DnnVersionInfoProto dnn_version_info = 5;
inline bool GpuTargetConfigProto::has_dnn_version_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dnn_version_info_ != nullptr);
  return value;
}
inline void GpuTargetConfigProto::clear_dnn_version_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dnn_version_info_ != nullptr) _impl_.dnn_version_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::stream_executor::DnnVersionInfoProto& GpuTargetConfigProto::_internal_dnn_version_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::stream_executor::DnnVersionInfoProto* p = _impl_.dnn_version_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::stream_executor::DnnVersionInfoProto&>(::stream_executor::_DnnVersionInfoProto_default_instance_);
}
inline const ::stream_executor::DnnVersionInfoProto& GpuTargetConfigProto::dnn_version_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.GpuTargetConfigProto.dnn_version_info)
  return _internal_dnn_version_info();
}
inline void GpuTargetConfigProto::unsafe_arena_set_allocated_dnn_version_info(::stream_executor::DnnVersionInfoProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dnn_version_info_);
  }
  _impl_.dnn_version_info_ = reinterpret_cast<::stream_executor::DnnVersionInfoProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.GpuTargetConfigProto.dnn_version_info)
}
inline ::stream_executor::DnnVersionInfoProto* GpuTargetConfigProto::release_dnn_version_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::stream_executor::DnnVersionInfoProto* released = _impl_.dnn_version_info_;
  _impl_.dnn_version_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::stream_executor::DnnVersionInfoProto* GpuTargetConfigProto::unsafe_arena_release_dnn_version_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:stream_executor.GpuTargetConfigProto.dnn_version_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::stream_executor::DnnVersionInfoProto* temp = _impl_.dnn_version_info_;
  _impl_.dnn_version_info_ = nullptr;
  return temp;
}
inline ::stream_executor::DnnVersionInfoProto* GpuTargetConfigProto::_internal_mutable_dnn_version_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dnn_version_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::stream_executor::DnnVersionInfoProto>(GetArena());
    _impl_.dnn_version_info_ = reinterpret_cast<::stream_executor::DnnVersionInfoProto*>(p);
  }
  return _impl_.dnn_version_info_;
}
inline ::stream_executor::DnnVersionInfoProto* GpuTargetConfigProto::mutable_dnn_version_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::stream_executor::DnnVersionInfoProto* _msg = _internal_mutable_dnn_version_info();
  // @@protoc_insertion_point(field_mutable:stream_executor.GpuTargetConfigProto.dnn_version_info)
  return _msg;
}
inline void GpuTargetConfigProto::set_allocated_dnn_version_info(::stream_executor::DnnVersionInfoProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.dnn_version_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.dnn_version_info_ = reinterpret_cast<::stream_executor::DnnVersionInfoProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:stream_executor.GpuTargetConfigProto.dnn_version_info)
}

// .stream_executor.RuntimeVersionProto runtime_version = 8;
inline bool GpuTargetConfigProto::has_runtime_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.runtime_version_ != nullptr);
  return value;
}
inline void GpuTargetConfigProto::clear_runtime_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.runtime_version_ != nullptr) _impl_.runtime_version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::stream_executor::RuntimeVersionProto& GpuTargetConfigProto::_internal_runtime_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::stream_executor::RuntimeVersionProto* p = _impl_.runtime_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::stream_executor::RuntimeVersionProto&>(::stream_executor::_RuntimeVersionProto_default_instance_);
}
inline const ::stream_executor::RuntimeVersionProto& GpuTargetConfigProto::runtime_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.GpuTargetConfigProto.runtime_version)
  return _internal_runtime_version();
}
inline void GpuTargetConfigProto::unsafe_arena_set_allocated_runtime_version(::stream_executor::RuntimeVersionProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.runtime_version_);
  }
  _impl_.runtime_version_ = reinterpret_cast<::stream_executor::RuntimeVersionProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.GpuTargetConfigProto.runtime_version)
}
inline ::stream_executor::RuntimeVersionProto* GpuTargetConfigProto::release_runtime_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::stream_executor::RuntimeVersionProto* released = _impl_.runtime_version_;
  _impl_.runtime_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::stream_executor::RuntimeVersionProto* GpuTargetConfigProto::unsafe_arena_release_runtime_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:stream_executor.GpuTargetConfigProto.runtime_version)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::stream_executor::RuntimeVersionProto* temp = _impl_.runtime_version_;
  _impl_.runtime_version_ = nullptr;
  return temp;
}
inline ::stream_executor::RuntimeVersionProto* GpuTargetConfigProto::_internal_mutable_runtime_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.runtime_version_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::stream_executor::RuntimeVersionProto>(GetArena());
    _impl_.runtime_version_ = reinterpret_cast<::stream_executor::RuntimeVersionProto*>(p);
  }
  return _impl_.runtime_version_;
}
inline ::stream_executor::RuntimeVersionProto* GpuTargetConfigProto::mutable_runtime_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::stream_executor::RuntimeVersionProto* _msg = _internal_mutable_runtime_version();
  // @@protoc_insertion_point(field_mutable:stream_executor.GpuTargetConfigProto.runtime_version)
  return _msg;
}
inline void GpuTargetConfigProto::set_allocated_runtime_version(::stream_executor::RuntimeVersionProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.runtime_version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.runtime_version_ = reinterpret_cast<::stream_executor::RuntimeVersionProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:stream_executor.GpuTargetConfigProto.runtime_version)
}

// .xla.AutotuneResults autotune_results = 6;
inline bool GpuTargetConfigProto::has_autotune_results() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.autotune_results_ != nullptr);
  return value;
}
inline const ::xla::AutotuneResults& GpuTargetConfigProto::_internal_autotune_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xla::AutotuneResults* p = _impl_.autotune_results_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::AutotuneResults&>(::xla::_AutotuneResults_default_instance_);
}
inline const ::xla::AutotuneResults& GpuTargetConfigProto::autotune_results() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.GpuTargetConfigProto.autotune_results)
  return _internal_autotune_results();
}
inline void GpuTargetConfigProto::unsafe_arena_set_allocated_autotune_results(::xla::AutotuneResults* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.autotune_results_);
  }
  _impl_.autotune_results_ = reinterpret_cast<::xla::AutotuneResults*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.GpuTargetConfigProto.autotune_results)
}
inline ::xla::AutotuneResults* GpuTargetConfigProto::release_autotune_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::xla::AutotuneResults* released = _impl_.autotune_results_;
  _impl_.autotune_results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::xla::AutotuneResults* GpuTargetConfigProto::unsafe_arena_release_autotune_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:stream_executor.GpuTargetConfigProto.autotune_results)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::xla::AutotuneResults* temp = _impl_.autotune_results_;
  _impl_.autotune_results_ = nullptr;
  return temp;
}
inline ::xla::AutotuneResults* GpuTargetConfigProto::_internal_mutable_autotune_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.autotune_results_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xla::AutotuneResults>(GetArena());
    _impl_.autotune_results_ = reinterpret_cast<::xla::AutotuneResults*>(p);
  }
  return _impl_.autotune_results_;
}
inline ::xla::AutotuneResults* GpuTargetConfigProto::mutable_autotune_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::xla::AutotuneResults* _msg = _internal_mutable_autotune_results();
  // @@protoc_insertion_point(field_mutable:stream_executor.GpuTargetConfigProto.autotune_results)
  return _msg;
}
inline void GpuTargetConfigProto::set_allocated_autotune_results(::xla::AutotuneResults* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.autotune_results_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.autotune_results_ = reinterpret_cast<::xla::AutotuneResults*>(value);
  // @@protoc_insertion_point(field_set_allocated:stream_executor.GpuTargetConfigProto.autotune_results)
}

// string device_description_str = 7;
inline void GpuTargetConfigProto::clear_device_description_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_description_str_.ClearToEmpty();
}
inline const std::string& GpuTargetConfigProto::device_description_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:stream_executor.GpuTargetConfigProto.device_description_str)
  return _internal_device_description_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GpuTargetConfigProto::set_device_description_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_description_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:stream_executor.GpuTargetConfigProto.device_description_str)
}
inline std::string* GpuTargetConfigProto::mutable_device_description_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_description_str();
  // @@protoc_insertion_point(field_mutable:stream_executor.GpuTargetConfigProto.device_description_str)
  return _s;
}
inline const std::string& GpuTargetConfigProto::_internal_device_description_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_description_str_.Get();
}
inline void GpuTargetConfigProto::_internal_set_device_description_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_description_str_.Set(value, GetArena());
}
inline std::string* GpuTargetConfigProto::_internal_mutable_device_description_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_description_str_.Mutable( GetArena());
}
inline std::string* GpuTargetConfigProto::release_device_description_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:stream_executor.GpuTargetConfigProto.device_description_str)
  return _impl_.device_description_str_.Release();
}
inline void GpuTargetConfigProto::set_allocated_device_description_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_description_str_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_description_str_.IsDefault()) {
          _impl_.device_description_str_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stream_executor.GpuTargetConfigProto.device_description_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace stream_executor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fdevice_5fdescription_2eproto_2epb_2eh
