// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/tsl/protobuf/coordination_config.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fcoordination_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fcoordination_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xla_2ftsl_2fprotobuf_2fcoordination_5fconfig_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2ftsl_2fprotobuf_2fcoordination_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xla_2ftsl_2fprotobuf_2fcoordination_5fconfig_2eproto;
namespace tensorflow {
class CoordinatedJob;
struct CoordinatedJobDefaultTypeInternal;
PROTOBUF_EXPORT extern CoordinatedJobDefaultTypeInternal _CoordinatedJob_default_instance_;
class CoordinationServiceConfig;
struct CoordinationServiceConfigDefaultTypeInternal;
PROTOBUF_EXPORT extern CoordinationServiceConfigDefaultTypeInternal _CoordinationServiceConfig_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT CoordinatedJob final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.CoordinatedJob) */ {
 public:
  inline CoordinatedJob() : CoordinatedJob(nullptr) {}
  ~CoordinatedJob() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CoordinatedJob(
      ::google::protobuf::internal::ConstantInitialized);

  inline CoordinatedJob(const CoordinatedJob& from) : CoordinatedJob(nullptr, from) {}
  inline CoordinatedJob(CoordinatedJob&& from) noexcept
      : CoordinatedJob(nullptr, std::move(from)) {}
  inline CoordinatedJob& operator=(const CoordinatedJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinatedJob& operator=(CoordinatedJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordinatedJob& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordinatedJob* internal_default_instance() {
    return reinterpret_cast<const CoordinatedJob*>(
        &_CoordinatedJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CoordinatedJob& a, CoordinatedJob& b) { a.Swap(&b); }
  inline void Swap(CoordinatedJob* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinatedJob* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordinatedJob* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CoordinatedJob>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CoordinatedJob& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CoordinatedJob& from) { CoordinatedJob::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CoordinatedJob* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.CoordinatedJob"; }

 protected:
  explicit CoordinatedJob(::google::protobuf::Arena* arena);
  CoordinatedJob(::google::protobuf::Arena* arena, const CoordinatedJob& from);
  CoordinatedJob(::google::protobuf::Arena* arena, CoordinatedJob&& from) noexcept
      : CoordinatedJob(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kNumTasksFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 num_tasks = 2;
  void clear_num_tasks() ;
  ::int32_t num_tasks() const;
  void set_num_tasks(::int32_t value);

  private:
  ::int32_t _internal_num_tasks() const;
  void _internal_set_num_tasks(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.CoordinatedJob)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CoordinatedJob& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t num_tasks_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2ftsl_2fprotobuf_2fcoordination_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CoordinationServiceConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.CoordinationServiceConfig) */ {
 public:
  inline CoordinationServiceConfig() : CoordinationServiceConfig(nullptr) {}
  ~CoordinationServiceConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CoordinationServiceConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline CoordinationServiceConfig(const CoordinationServiceConfig& from) : CoordinationServiceConfig(nullptr, from) {}
  inline CoordinationServiceConfig(CoordinationServiceConfig&& from) noexcept
      : CoordinationServiceConfig(nullptr, std::move(from)) {}
  inline CoordinationServiceConfig& operator=(const CoordinationServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinationServiceConfig& operator=(CoordinationServiceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordinationServiceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordinationServiceConfig* internal_default_instance() {
    return reinterpret_cast<const CoordinationServiceConfig*>(
        &_CoordinationServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CoordinationServiceConfig& a, CoordinationServiceConfig& b) { a.Swap(&b); }
  inline void Swap(CoordinationServiceConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinationServiceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordinationServiceConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CoordinationServiceConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CoordinationServiceConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CoordinationServiceConfig& from) { CoordinationServiceConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CoordinationServiceConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.CoordinationServiceConfig"; }

 protected:
  explicit CoordinationServiceConfig(::google::protobuf::Arena* arena);
  CoordinationServiceConfig(::google::protobuf::Arena* arena, const CoordinationServiceConfig& from);
  CoordinationServiceConfig(::google::protobuf::Arena* arena, CoordinationServiceConfig&& from) noexcept
      : CoordinationServiceConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRecoverableJobsFieldNumber = 9,
    kCoordinatedJobListFieldNumber = 10,
    kServiceTypeFieldNumber = 1,
    kServiceLeaderFieldNumber = 2,
    kClusterRegisterTimeoutInMsFieldNumber = 4,
    kHeartbeatTimeoutInMsFieldNumber = 5,
    kShutdownBarrierTimeoutInMsFieldNumber = 7,
    kEnableHealthCheckFieldNumber = 3,
    kClusterRegisterWithBarrierFieldNumber = 14,
    kAgentDestructionWithoutShutdownFieldNumber = 8,
    kAllowNewIncarnationToReconnectFieldNumber = 11,
    kForceDisableFieldNumber = 12,
    kPollForErrorFromServiceAtStartupFieldNumber = 13,
  };
  // repeated string recoverable_jobs = 9;
  int recoverable_jobs_size() const;
  private:
  int _internal_recoverable_jobs_size() const;

  public:
  void clear_recoverable_jobs() ;
  const std::string& recoverable_jobs(int index) const;
  std::string* mutable_recoverable_jobs(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recoverable_jobs(int index, Arg_&& value, Args_... args);
  std::string* add_recoverable_jobs();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_recoverable_jobs(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& recoverable_jobs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_recoverable_jobs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_recoverable_jobs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_recoverable_jobs();

  public:
  // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
  int coordinated_job_list_size() const;
  private:
  int _internal_coordinated_job_list_size() const;

  public:
  void clear_coordinated_job_list() ;
  ::tensorflow::CoordinatedJob* mutable_coordinated_job_list(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::CoordinatedJob>* mutable_coordinated_job_list();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::CoordinatedJob>& _internal_coordinated_job_list() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::CoordinatedJob>* _internal_mutable_coordinated_job_list();
  public:
  const ::tensorflow::CoordinatedJob& coordinated_job_list(int index) const;
  ::tensorflow::CoordinatedJob* add_coordinated_job_list();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::CoordinatedJob>& coordinated_job_list() const;
  // string service_type = 1;
  void clear_service_type() ;
  const std::string& service_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_type(Arg_&& arg, Args_... args);
  std::string* mutable_service_type();
  PROTOBUF_NODISCARD std::string* release_service_type();
  void set_allocated_service_type(std::string* value);

  private:
  const std::string& _internal_service_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_type(
      const std::string& value);
  std::string* _internal_mutable_service_type();

  public:
  // string service_leader = 2;
  void clear_service_leader() ;
  const std::string& service_leader() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_leader(Arg_&& arg, Args_... args);
  std::string* mutable_service_leader();
  PROTOBUF_NODISCARD std::string* release_service_leader();
  void set_allocated_service_leader(std::string* value);

  private:
  const std::string& _internal_service_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_leader(
      const std::string& value);
  std::string* _internal_mutable_service_leader();

  public:
  // int64 cluster_register_timeout_in_ms = 4;
  void clear_cluster_register_timeout_in_ms() ;
  ::int64_t cluster_register_timeout_in_ms() const;
  void set_cluster_register_timeout_in_ms(::int64_t value);

  private:
  ::int64_t _internal_cluster_register_timeout_in_ms() const;
  void _internal_set_cluster_register_timeout_in_ms(::int64_t value);

  public:
  // int64 heartbeat_timeout_in_ms = 5;
  void clear_heartbeat_timeout_in_ms() ;
  ::int64_t heartbeat_timeout_in_ms() const;
  void set_heartbeat_timeout_in_ms(::int64_t value);

  private:
  ::int64_t _internal_heartbeat_timeout_in_ms() const;
  void _internal_set_heartbeat_timeout_in_ms(::int64_t value);

  public:
  // int64 shutdown_barrier_timeout_in_ms = 7;
  void clear_shutdown_barrier_timeout_in_ms() ;
  ::int64_t shutdown_barrier_timeout_in_ms() const;
  void set_shutdown_barrier_timeout_in_ms(::int64_t value);

  private:
  ::int64_t _internal_shutdown_barrier_timeout_in_ms() const;
  void _internal_set_shutdown_barrier_timeout_in_ms(::int64_t value);

  public:
  // bool enable_health_check = 3;
  void clear_enable_health_check() ;
  bool enable_health_check() const;
  void set_enable_health_check(bool value);

  private:
  bool _internal_enable_health_check() const;
  void _internal_set_enable_health_check(bool value);

  public:
  // bool cluster_register_with_barrier = 14;
  void clear_cluster_register_with_barrier() ;
  bool cluster_register_with_barrier() const;
  void set_cluster_register_with_barrier(bool value);

  private:
  bool _internal_cluster_register_with_barrier() const;
  void _internal_set_cluster_register_with_barrier(bool value);

  public:
  // bool agent_destruction_without_shutdown = 8;
  void clear_agent_destruction_without_shutdown() ;
  bool agent_destruction_without_shutdown() const;
  void set_agent_destruction_without_shutdown(bool value);

  private:
  bool _internal_agent_destruction_without_shutdown() const;
  void _internal_set_agent_destruction_without_shutdown(bool value);

  public:
  // bool allow_new_incarnation_to_reconnect = 11;
  void clear_allow_new_incarnation_to_reconnect() ;
  bool allow_new_incarnation_to_reconnect() const;
  void set_allow_new_incarnation_to_reconnect(bool value);

  private:
  bool _internal_allow_new_incarnation_to_reconnect() const;
  void _internal_set_allow_new_incarnation_to_reconnect(bool value);

  public:
  // bool force_disable = 12;
  void clear_force_disable() ;
  bool force_disable() const;
  void set_force_disable(bool value);

  private:
  bool _internal_force_disable() const;
  void _internal_set_force_disable(bool value);

  public:
  // bool poll_for_error_from_service_at_startup = 13;
  void clear_poll_for_error_from_service_at_startup() ;
  bool poll_for_error_from_service_at_startup() const;
  void set_poll_for_error_from_service_at_startup(bool value);

  private:
  bool _internal_poll_for_error_from_service_at_startup() const;
  void _internal_set_poll_for_error_from_service_at_startup(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.CoordinationServiceConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      95, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CoordinationServiceConfig& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> recoverable_jobs_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::CoordinatedJob > coordinated_job_list_;
    ::google::protobuf::internal::ArenaStringPtr service_type_;
    ::google::protobuf::internal::ArenaStringPtr service_leader_;
    ::int64_t cluster_register_timeout_in_ms_;
    ::int64_t heartbeat_timeout_in_ms_;
    ::int64_t shutdown_barrier_timeout_in_ms_;
    bool enable_health_check_;
    bool cluster_register_with_barrier_;
    bool agent_destruction_without_shutdown_;
    bool allow_new_incarnation_to_reconnect_;
    bool force_disable_;
    bool poll_for_error_from_service_at_startup_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2ftsl_2fprotobuf_2fcoordination_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CoordinatedJob

// string name = 1;
inline void CoordinatedJob::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CoordinatedJob::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinatedJob.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CoordinatedJob::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.CoordinatedJob.name)
}
inline std::string* CoordinatedJob::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinatedJob.name)
  return _s;
}
inline const std::string& CoordinatedJob::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void CoordinatedJob::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CoordinatedJob::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CoordinatedJob::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.CoordinatedJob.name)
  return _impl_.name_.Release();
}
inline void CoordinatedJob::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CoordinatedJob.name)
}

// int32 num_tasks = 2;
inline void CoordinatedJob::clear_num_tasks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tasks_ = 0;
}
inline ::int32_t CoordinatedJob::num_tasks() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinatedJob.num_tasks)
  return _internal_num_tasks();
}
inline void CoordinatedJob::set_num_tasks(::int32_t value) {
  _internal_set_num_tasks(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinatedJob.num_tasks)
}
inline ::int32_t CoordinatedJob::_internal_num_tasks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_tasks_;
}
inline void CoordinatedJob::_internal_set_num_tasks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tasks_ = value;
}

// -------------------------------------------------------------------

// CoordinationServiceConfig

// string service_type = 1;
inline void CoordinationServiceConfig::clear_service_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_type_.ClearToEmpty();
}
inline const std::string& CoordinationServiceConfig::service_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.service_type)
  return _internal_service_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CoordinationServiceConfig::set_service_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.service_type)
}
inline std::string* CoordinationServiceConfig::mutable_service_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.service_type)
  return _s;
}
inline const std::string& CoordinationServiceConfig::_internal_service_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_type_.Get();
}
inline void CoordinationServiceConfig::_internal_set_service_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_type_.Set(value, GetArena());
}
inline std::string* CoordinationServiceConfig::_internal_mutable_service_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.service_type_.Mutable( GetArena());
}
inline std::string* CoordinationServiceConfig::release_service_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.CoordinationServiceConfig.service_type)
  return _impl_.service_type_.Release();
}
inline void CoordinationServiceConfig::set_allocated_service_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_type_.IsDefault()) {
          _impl_.service_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CoordinationServiceConfig.service_type)
}

// string service_leader = 2;
inline void CoordinationServiceConfig::clear_service_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_leader_.ClearToEmpty();
}
inline const std::string& CoordinationServiceConfig::service_leader() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.service_leader)
  return _internal_service_leader();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CoordinationServiceConfig::set_service_leader(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_leader_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.service_leader)
}
inline std::string* CoordinationServiceConfig::mutable_service_leader() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_leader();
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.service_leader)
  return _s;
}
inline const std::string& CoordinationServiceConfig::_internal_service_leader() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_leader_.Get();
}
inline void CoordinationServiceConfig::_internal_set_service_leader(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_leader_.Set(value, GetArena());
}
inline std::string* CoordinationServiceConfig::_internal_mutable_service_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.service_leader_.Mutable( GetArena());
}
inline std::string* CoordinationServiceConfig::release_service_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.CoordinationServiceConfig.service_leader)
  return _impl_.service_leader_.Release();
}
inline void CoordinationServiceConfig::set_allocated_service_leader(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_leader_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_leader_.IsDefault()) {
          _impl_.service_leader_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CoordinationServiceConfig.service_leader)
}

// bool enable_health_check = 3;
inline void CoordinationServiceConfig::clear_enable_health_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_health_check_ = false;
}
inline bool CoordinationServiceConfig::enable_health_check() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.enable_health_check)
  return _internal_enable_health_check();
}
inline void CoordinationServiceConfig::set_enable_health_check(bool value) {
  _internal_set_enable_health_check(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.enable_health_check)
}
inline bool CoordinationServiceConfig::_internal_enable_health_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_health_check_;
}
inline void CoordinationServiceConfig::_internal_set_enable_health_check(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_health_check_ = value;
}

// int64 cluster_register_timeout_in_ms = 4;
inline void CoordinationServiceConfig::clear_cluster_register_timeout_in_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_register_timeout_in_ms_ = ::int64_t{0};
}
inline ::int64_t CoordinationServiceConfig::cluster_register_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.cluster_register_timeout_in_ms)
  return _internal_cluster_register_timeout_in_ms();
}
inline void CoordinationServiceConfig::set_cluster_register_timeout_in_ms(::int64_t value) {
  _internal_set_cluster_register_timeout_in_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.cluster_register_timeout_in_ms)
}
inline ::int64_t CoordinationServiceConfig::_internal_cluster_register_timeout_in_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_register_timeout_in_ms_;
}
inline void CoordinationServiceConfig::_internal_set_cluster_register_timeout_in_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_register_timeout_in_ms_ = value;
}

// bool cluster_register_with_barrier = 14;
inline void CoordinationServiceConfig::clear_cluster_register_with_barrier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_register_with_barrier_ = false;
}
inline bool CoordinationServiceConfig::cluster_register_with_barrier() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.cluster_register_with_barrier)
  return _internal_cluster_register_with_barrier();
}
inline void CoordinationServiceConfig::set_cluster_register_with_barrier(bool value) {
  _internal_set_cluster_register_with_barrier(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.cluster_register_with_barrier)
}
inline bool CoordinationServiceConfig::_internal_cluster_register_with_barrier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_register_with_barrier_;
}
inline void CoordinationServiceConfig::_internal_set_cluster_register_with_barrier(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_register_with_barrier_ = value;
}

// int64 heartbeat_timeout_in_ms = 5;
inline void CoordinationServiceConfig::clear_heartbeat_timeout_in_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heartbeat_timeout_in_ms_ = ::int64_t{0};
}
inline ::int64_t CoordinationServiceConfig::heartbeat_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.heartbeat_timeout_in_ms)
  return _internal_heartbeat_timeout_in_ms();
}
inline void CoordinationServiceConfig::set_heartbeat_timeout_in_ms(::int64_t value) {
  _internal_set_heartbeat_timeout_in_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.heartbeat_timeout_in_ms)
}
inline ::int64_t CoordinationServiceConfig::_internal_heartbeat_timeout_in_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heartbeat_timeout_in_ms_;
}
inline void CoordinationServiceConfig::_internal_set_heartbeat_timeout_in_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heartbeat_timeout_in_ms_ = value;
}

// repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
inline int CoordinationServiceConfig::_internal_coordinated_job_list_size() const {
  return _internal_coordinated_job_list().size();
}
inline int CoordinationServiceConfig::coordinated_job_list_size() const {
  return _internal_coordinated_job_list_size();
}
inline void CoordinationServiceConfig::clear_coordinated_job_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coordinated_job_list_.Clear();
}
inline ::tensorflow::CoordinatedJob* CoordinationServiceConfig::mutable_coordinated_job_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return _internal_mutable_coordinated_job_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::CoordinatedJob>* CoordinationServiceConfig::mutable_coordinated_job_list()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_coordinated_job_list();
}
inline const ::tensorflow::CoordinatedJob& CoordinationServiceConfig::coordinated_job_list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return _internal_coordinated_job_list().Get(index);
}
inline ::tensorflow::CoordinatedJob* CoordinationServiceConfig::add_coordinated_job_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::CoordinatedJob* _add = _internal_mutable_coordinated_job_list()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::CoordinatedJob>& CoordinationServiceConfig::coordinated_job_list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.CoordinationServiceConfig.coordinated_job_list)
  return _internal_coordinated_job_list();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::CoordinatedJob>&
CoordinationServiceConfig::_internal_coordinated_job_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coordinated_job_list_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::CoordinatedJob>*
CoordinationServiceConfig::_internal_mutable_coordinated_job_list() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.coordinated_job_list_;
}

// int64 shutdown_barrier_timeout_in_ms = 7;
inline void CoordinationServiceConfig::clear_shutdown_barrier_timeout_in_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shutdown_barrier_timeout_in_ms_ = ::int64_t{0};
}
inline ::int64_t CoordinationServiceConfig::shutdown_barrier_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.shutdown_barrier_timeout_in_ms)
  return _internal_shutdown_barrier_timeout_in_ms();
}
inline void CoordinationServiceConfig::set_shutdown_barrier_timeout_in_ms(::int64_t value) {
  _internal_set_shutdown_barrier_timeout_in_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.shutdown_barrier_timeout_in_ms)
}
inline ::int64_t CoordinationServiceConfig::_internal_shutdown_barrier_timeout_in_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shutdown_barrier_timeout_in_ms_;
}
inline void CoordinationServiceConfig::_internal_set_shutdown_barrier_timeout_in_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shutdown_barrier_timeout_in_ms_ = value;
}

// bool agent_destruction_without_shutdown = 8;
inline void CoordinationServiceConfig::clear_agent_destruction_without_shutdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_destruction_without_shutdown_ = false;
}
inline bool CoordinationServiceConfig::agent_destruction_without_shutdown() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.agent_destruction_without_shutdown)
  return _internal_agent_destruction_without_shutdown();
}
inline void CoordinationServiceConfig::set_agent_destruction_without_shutdown(bool value) {
  _internal_set_agent_destruction_without_shutdown(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.agent_destruction_without_shutdown)
}
inline bool CoordinationServiceConfig::_internal_agent_destruction_without_shutdown() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.agent_destruction_without_shutdown_;
}
inline void CoordinationServiceConfig::_internal_set_agent_destruction_without_shutdown(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_destruction_without_shutdown_ = value;
}

// repeated string recoverable_jobs = 9;
inline int CoordinationServiceConfig::_internal_recoverable_jobs_size() const {
  return _internal_recoverable_jobs().size();
}
inline int CoordinationServiceConfig::recoverable_jobs_size() const {
  return _internal_recoverable_jobs_size();
}
inline void CoordinationServiceConfig::clear_recoverable_jobs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recoverable_jobs_.Clear();
}
inline std::string* CoordinationServiceConfig::add_recoverable_jobs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_recoverable_jobs()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return _s;
}
inline const std::string& CoordinationServiceConfig::recoverable_jobs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return _internal_recoverable_jobs().Get(index);
}
inline std::string* CoordinationServiceConfig::mutable_recoverable_jobs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return _internal_mutable_recoverable_jobs()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CoordinationServiceConfig::set_recoverable_jobs(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_recoverable_jobs()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.recoverable_jobs)
}
template <typename Arg_, typename... Args_>
inline void CoordinationServiceConfig::add_recoverable_jobs(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_recoverable_jobs(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.CoordinationServiceConfig.recoverable_jobs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CoordinationServiceConfig::recoverable_jobs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  return _internal_recoverable_jobs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CoordinationServiceConfig::mutable_recoverable_jobs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CoordinationServiceConfig.recoverable_jobs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_recoverable_jobs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CoordinationServiceConfig::_internal_recoverable_jobs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recoverable_jobs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CoordinationServiceConfig::_internal_mutable_recoverable_jobs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.recoverable_jobs_;
}

// bool allow_new_incarnation_to_reconnect = 11;
inline void CoordinationServiceConfig::clear_allow_new_incarnation_to_reconnect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_new_incarnation_to_reconnect_ = false;
}
inline bool CoordinationServiceConfig::allow_new_incarnation_to_reconnect() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.allow_new_incarnation_to_reconnect)
  return _internal_allow_new_incarnation_to_reconnect();
}
inline void CoordinationServiceConfig::set_allow_new_incarnation_to_reconnect(bool value) {
  _internal_set_allow_new_incarnation_to_reconnect(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.allow_new_incarnation_to_reconnect)
}
inline bool CoordinationServiceConfig::_internal_allow_new_incarnation_to_reconnect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_new_incarnation_to_reconnect_;
}
inline void CoordinationServiceConfig::_internal_set_allow_new_incarnation_to_reconnect(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_new_incarnation_to_reconnect_ = value;
}

// bool force_disable = 12;
inline void CoordinationServiceConfig::clear_force_disable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_disable_ = false;
}
inline bool CoordinationServiceConfig::force_disable() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.force_disable)
  return _internal_force_disable();
}
inline void CoordinationServiceConfig::set_force_disable(bool value) {
  _internal_set_force_disable(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.force_disable)
}
inline bool CoordinationServiceConfig::_internal_force_disable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.force_disable_;
}
inline void CoordinationServiceConfig::_internal_set_force_disable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_disable_ = value;
}

// bool poll_for_error_from_service_at_startup = 13;
inline void CoordinationServiceConfig::clear_poll_for_error_from_service_at_startup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.poll_for_error_from_service_at_startup_ = false;
}
inline bool CoordinationServiceConfig::poll_for_error_from_service_at_startup() const {
  // @@protoc_insertion_point(field_get:tensorflow.CoordinationServiceConfig.poll_for_error_from_service_at_startup)
  return _internal_poll_for_error_from_service_at_startup();
}
inline void CoordinationServiceConfig::set_poll_for_error_from_service_at_startup(bool value) {
  _internal_set_poll_for_error_from_service_at_startup(value);
  // @@protoc_insertion_point(field_set:tensorflow.CoordinationServiceConfig.poll_for_error_from_service_at_startup)
}
inline bool CoordinationServiceConfig::_internal_poll_for_error_from_service_at_startup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.poll_for_error_from_service_at_startup_;
}
inline void CoordinationServiceConfig::_internal_set_poll_for_error_from_service_at_startup(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.poll_for_error_from_service_at_startup_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fcoordination_5fconfig_2eproto_2epb_2eh
