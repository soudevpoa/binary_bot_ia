// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/tsl/protobuf/histogram.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fhistogram_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fhistogram_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xla_2ftsl_2fprotobuf_2fhistogram_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2ftsl_2fprotobuf_2fhistogram_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xla_2ftsl_2fprotobuf_2fhistogram_2eproto;
namespace tensorflow {
class HistogramProto;
struct HistogramProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern HistogramProtoDefaultTypeInternal _HistogramProto_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT HistogramProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.HistogramProto) */ {
 public:
  inline HistogramProto() : HistogramProto(nullptr) {}
  ~HistogramProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HistogramProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline HistogramProto(const HistogramProto& from) : HistogramProto(nullptr, from) {}
  inline HistogramProto(HistogramProto&& from) noexcept
      : HistogramProto(nullptr, std::move(from)) {}
  inline HistogramProto& operator=(const HistogramProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramProto& operator=(HistogramProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistogramProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistogramProto* internal_default_instance() {
    return reinterpret_cast<const HistogramProto*>(
        &_HistogramProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(HistogramProto& a, HistogramProto& b) { a.Swap(&b); }
  inline void Swap(HistogramProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistogramProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistogramProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<HistogramProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HistogramProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HistogramProto& from) { HistogramProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HistogramProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.HistogramProto"; }

 protected:
  explicit HistogramProto(::google::protobuf::Arena* arena);
  HistogramProto(::google::protobuf::Arena* arena, const HistogramProto& from);
  HistogramProto(::google::protobuf::Arena* arena, HistogramProto&& from) noexcept
      : HistogramProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketLimitFieldNumber = 6,
    kBucketFieldNumber = 7,
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kNumFieldNumber = 3,
    kSumFieldNumber = 4,
    kSumSquaresFieldNumber = 5,
  };
  // repeated double bucket_limit = 6 [packed = true];
  int bucket_limit_size() const;
  private:
  int _internal_bucket_limit_size() const;

  public:
  void clear_bucket_limit() ;
  double bucket_limit(int index) const;
  void set_bucket_limit(int index, double value);
  void add_bucket_limit(double value);
  const ::google::protobuf::RepeatedField<double>& bucket_limit() const;
  ::google::protobuf::RepeatedField<double>* mutable_bucket_limit();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_bucket_limit() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_bucket_limit();

  public:
  // repeated double bucket = 7 [packed = true];
  int bucket_size() const;
  private:
  int _internal_bucket_size() const;

  public:
  void clear_bucket() ;
  double bucket(int index) const;
  void set_bucket(int index, double value);
  void add_bucket(double value);
  const ::google::protobuf::RepeatedField<double>& bucket() const;
  ::google::protobuf::RepeatedField<double>* mutable_bucket();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_bucket() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_bucket();

  public:
  // double min = 1;
  void clear_min() ;
  double min() const;
  void set_min(double value);

  private:
  double _internal_min() const;
  void _internal_set_min(double value);

  public:
  // double max = 2;
  void clear_max() ;
  double max() const;
  void set_max(double value);

  private:
  double _internal_max() const;
  void _internal_set_max(double value);

  public:
  // double num = 3;
  void clear_num() ;
  double num() const;
  void set_num(double value);

  private:
  double _internal_num() const;
  void _internal_set_num(double value);

  public:
  // double sum = 4;
  void clear_sum() ;
  double sum() const;
  void set_sum(double value);

  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);

  public:
  // double sum_squares = 5;
  void clear_sum_squares() ;
  double sum_squares() const;
  void set_sum_squares(double value);

  private:
  double _internal_sum_squares() const;
  void _internal_set_sum_squares(double value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.HistogramProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HistogramProto& from_msg);
    ::google::protobuf::RepeatedField<double> bucket_limit_;
    ::google::protobuf::RepeatedField<double> bucket_;
    double min_;
    double max_;
    double num_;
    double sum_;
    double sum_squares_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2ftsl_2fprotobuf_2fhistogram_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HistogramProto

// double min = 1;
inline void HistogramProto::clear_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_ = 0;
}
inline double HistogramProto::min() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.min)
  return _internal_min();
}
inline void HistogramProto::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.min)
}
inline double HistogramProto::_internal_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_;
}
inline void HistogramProto::_internal_set_min(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_ = value;
}

// double max = 2;
inline void HistogramProto::clear_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ = 0;
}
inline double HistogramProto::max() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.max)
  return _internal_max();
}
inline void HistogramProto::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.max)
}
inline double HistogramProto::_internal_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_;
}
inline void HistogramProto::_internal_set_max(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ = value;
}

// double num = 3;
inline void HistogramProto::clear_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_ = 0;
}
inline double HistogramProto::num() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.num)
  return _internal_num();
}
inline void HistogramProto::set_num(double value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.num)
}
inline double HistogramProto::_internal_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_;
}
inline void HistogramProto::_internal_set_num(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_ = value;
}

// double sum = 4;
inline void HistogramProto::clear_sum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sum_ = 0;
}
inline double HistogramProto::sum() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.sum)
  return _internal_sum();
}
inline void HistogramProto::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.sum)
}
inline double HistogramProto::_internal_sum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sum_;
}
inline void HistogramProto::_internal_set_sum(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sum_ = value;
}

// double sum_squares = 5;
inline void HistogramProto::clear_sum_squares() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sum_squares_ = 0;
}
inline double HistogramProto::sum_squares() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.sum_squares)
  return _internal_sum_squares();
}
inline void HistogramProto::set_sum_squares(double value) {
  _internal_set_sum_squares(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.sum_squares)
}
inline double HistogramProto::_internal_sum_squares() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sum_squares_;
}
inline void HistogramProto::_internal_set_sum_squares(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sum_squares_ = value;
}

// repeated double bucket_limit = 6 [packed = true];
inline int HistogramProto::_internal_bucket_limit_size() const {
  return _internal_bucket_limit().size();
}
inline int HistogramProto::bucket_limit_size() const {
  return _internal_bucket_limit_size();
}
inline void HistogramProto::clear_bucket_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_limit_.Clear();
}
inline double HistogramProto::bucket_limit(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.bucket_limit)
  return _internal_bucket_limit().Get(index);
}
inline void HistogramProto::set_bucket_limit(int index, double value) {
  _internal_mutable_bucket_limit()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.bucket_limit)
}
inline void HistogramProto::add_bucket_limit(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bucket_limit()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.HistogramProto.bucket_limit)
}
inline const ::google::protobuf::RepeatedField<double>& HistogramProto::bucket_limit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.HistogramProto.bucket_limit)
  return _internal_bucket_limit();
}
inline ::google::protobuf::RepeatedField<double>* HistogramProto::mutable_bucket_limit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HistogramProto.bucket_limit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bucket_limit();
}
inline const ::google::protobuf::RepeatedField<double>&
HistogramProto::_internal_bucket_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_limit_;
}
inline ::google::protobuf::RepeatedField<double>* HistogramProto::_internal_mutable_bucket_limit() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bucket_limit_;
}

// repeated double bucket = 7 [packed = true];
inline int HistogramProto::_internal_bucket_size() const {
  return _internal_bucket().size();
}
inline int HistogramProto::bucket_size() const {
  return _internal_bucket_size();
}
inline void HistogramProto::clear_bucket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bucket_.Clear();
}
inline double HistogramProto::bucket(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.bucket)
  return _internal_bucket().Get(index);
}
inline void HistogramProto::set_bucket(int index, double value) {
  _internal_mutable_bucket()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.bucket)
}
inline void HistogramProto::add_bucket(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bucket()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.HistogramProto.bucket)
}
inline const ::google::protobuf::RepeatedField<double>& HistogramProto::bucket() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.HistogramProto.bucket)
  return _internal_bucket();
}
inline ::google::protobuf::RepeatedField<double>* HistogramProto::mutable_bucket()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HistogramProto.bucket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bucket();
}
inline const ::google::protobuf::RepeatedField<double>&
HistogramProto::_internal_bucket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bucket_;
}
inline ::google::protobuf::RepeatedField<double>* HistogramProto::_internal_mutable_bucket() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bucket_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fhistogram_2eproto_2epb_2eh
