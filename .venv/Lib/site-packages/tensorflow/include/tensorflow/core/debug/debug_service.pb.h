// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/debug/debug_service.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/profiler/tfprof_log.pb.h"
#include "tensorflow/core/protobuf/debug.pb.h"
#include "tensorflow/core/util/event.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto;
namespace tensorflow {
class CallTraceback;
struct CallTracebackDefaultTypeInternal;
PROTOBUF_EXPORT extern CallTracebackDefaultTypeInternal _CallTraceback_default_instance_;
class CallTraceback_OriginIdToStringEntry_DoNotUse;
struct CallTraceback_OriginIdToStringEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern CallTraceback_OriginIdToStringEntry_DoNotUseDefaultTypeInternal _CallTraceback_OriginIdToStringEntry_DoNotUse_default_instance_;
class EventReply;
struct EventReplyDefaultTypeInternal;
PROTOBUF_EXPORT extern EventReplyDefaultTypeInternal _EventReply_default_instance_;
class EventReply_DebugOpStateChange;
struct EventReply_DebugOpStateChangeDefaultTypeInternal;
PROTOBUF_EXPORT extern EventReply_DebugOpStateChangeDefaultTypeInternal _EventReply_DebugOpStateChange_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
enum EventReply_DebugOpStateChange_State : int {
  EventReply_DebugOpStateChange_State_STATE_UNSPECIFIED = 0,
  EventReply_DebugOpStateChange_State_DISABLED = 1,
  EventReply_DebugOpStateChange_State_READ_ONLY = 2,
  EventReply_DebugOpStateChange_State_READ_WRITE = 3,
  EventReply_DebugOpStateChange_State_EventReply_DebugOpStateChange_State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EventReply_DebugOpStateChange_State_EventReply_DebugOpStateChange_State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool EventReply_DebugOpStateChange_State_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t EventReply_DebugOpStateChange_State_internal_data_[];
constexpr EventReply_DebugOpStateChange_State EventReply_DebugOpStateChange_State_State_MIN = static_cast<EventReply_DebugOpStateChange_State>(0);
constexpr EventReply_DebugOpStateChange_State EventReply_DebugOpStateChange_State_State_MAX = static_cast<EventReply_DebugOpStateChange_State>(3);
constexpr int EventReply_DebugOpStateChange_State_State_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
EventReply_DebugOpStateChange_State_descriptor();
template <typename T>
const std::string& EventReply_DebugOpStateChange_State_Name(T value) {
  static_assert(std::is_same<T, EventReply_DebugOpStateChange_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return EventReply_DebugOpStateChange_State_Name(static_cast<EventReply_DebugOpStateChange_State>(value));
}
template <>
inline const std::string& EventReply_DebugOpStateChange_State_Name(EventReply_DebugOpStateChange_State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EventReply_DebugOpStateChange_State_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool EventReply_DebugOpStateChange_State_Parse(absl::string_view name, EventReply_DebugOpStateChange_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventReply_DebugOpStateChange_State>(
      EventReply_DebugOpStateChange_State_descriptor(), name, value);
}
enum CallTraceback_CallType : int {
  CallTraceback_CallType_UNSPECIFIED = 0,
  CallTraceback_CallType_GRAPH_EXECUTION = 1,
  CallTraceback_CallType_EAGER_EXECUTION = 2,
  CallTraceback_CallType_CallTraceback_CallType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CallTraceback_CallType_CallTraceback_CallType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool CallTraceback_CallType_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t CallTraceback_CallType_internal_data_[];
constexpr CallTraceback_CallType CallTraceback_CallType_CallType_MIN = static_cast<CallTraceback_CallType>(0);
constexpr CallTraceback_CallType CallTraceback_CallType_CallType_MAX = static_cast<CallTraceback_CallType>(2);
constexpr int CallTraceback_CallType_CallType_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
CallTraceback_CallType_descriptor();
template <typename T>
const std::string& CallTraceback_CallType_Name(T value) {
  static_assert(std::is_same<T, CallTraceback_CallType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CallType_Name().");
  return CallTraceback_CallType_Name(static_cast<CallTraceback_CallType>(value));
}
template <>
inline const std::string& CallTraceback_CallType_Name(CallTraceback_CallType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CallTraceback_CallType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CallTraceback_CallType_Parse(absl::string_view name, CallTraceback_CallType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallTraceback_CallType>(
      CallTraceback_CallType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT EventReply_DebugOpStateChange final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.EventReply.DebugOpStateChange) */ {
 public:
  inline EventReply_DebugOpStateChange() : EventReply_DebugOpStateChange(nullptr) {}
  ~EventReply_DebugOpStateChange() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventReply_DebugOpStateChange(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventReply_DebugOpStateChange(const EventReply_DebugOpStateChange& from) : EventReply_DebugOpStateChange(nullptr, from) {}
  inline EventReply_DebugOpStateChange(EventReply_DebugOpStateChange&& from) noexcept
      : EventReply_DebugOpStateChange(nullptr, std::move(from)) {}
  inline EventReply_DebugOpStateChange& operator=(const EventReply_DebugOpStateChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventReply_DebugOpStateChange& operator=(EventReply_DebugOpStateChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventReply_DebugOpStateChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventReply_DebugOpStateChange* internal_default_instance() {
    return reinterpret_cast<const EventReply_DebugOpStateChange*>(
        &_EventReply_DebugOpStateChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EventReply_DebugOpStateChange& a, EventReply_DebugOpStateChange& b) { a.Swap(&b); }
  inline void Swap(EventReply_DebugOpStateChange* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventReply_DebugOpStateChange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventReply_DebugOpStateChange* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<EventReply_DebugOpStateChange>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventReply_DebugOpStateChange& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventReply_DebugOpStateChange& from) { EventReply_DebugOpStateChange::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EventReply_DebugOpStateChange* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.EventReply.DebugOpStateChange"; }

 protected:
  explicit EventReply_DebugOpStateChange(::google::protobuf::Arena* arena);
  EventReply_DebugOpStateChange(::google::protobuf::Arena* arena, const EventReply_DebugOpStateChange& from);
  EventReply_DebugOpStateChange(::google::protobuf::Arena* arena, EventReply_DebugOpStateChange&& from) noexcept
      : EventReply_DebugOpStateChange(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using State = EventReply_DebugOpStateChange_State;
  static constexpr State STATE_UNSPECIFIED = EventReply_DebugOpStateChange_State_STATE_UNSPECIFIED;
  static constexpr State DISABLED = EventReply_DebugOpStateChange_State_DISABLED;
  static constexpr State READ_ONLY = EventReply_DebugOpStateChange_State_READ_ONLY;
  static constexpr State READ_WRITE = EventReply_DebugOpStateChange_State_READ_WRITE;
  static inline bool State_IsValid(int value) {
    return EventReply_DebugOpStateChange_State_IsValid(value);
  }
  static constexpr State State_MIN = EventReply_DebugOpStateChange_State_State_MIN;
  static constexpr State State_MAX = EventReply_DebugOpStateChange_State_State_MAX;
  static constexpr int State_ARRAYSIZE = EventReply_DebugOpStateChange_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* State_descriptor() {
    return EventReply_DebugOpStateChange_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return EventReply_DebugOpStateChange_State_Name(value);
  }
  static inline bool State_Parse(absl::string_view name, State* value) {
    return EventReply_DebugOpStateChange_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNodeNameFieldNumber = 2,
    kDebugOpFieldNumber = 4,
    kStateFieldNumber = 1,
    kOutputSlotFieldNumber = 3,
  };
  // string node_name = 2;
  void clear_node_name() ;
  const std::string& node_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_name(Arg_&& arg, Args_... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* value);

  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(
      const std::string& value);
  std::string* _internal_mutable_node_name();

  public:
  // string debug_op = 4;
  void clear_debug_op() ;
  const std::string& debug_op() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_debug_op(Arg_&& arg, Args_... args);
  std::string* mutable_debug_op();
  PROTOBUF_NODISCARD std::string* release_debug_op();
  void set_allocated_debug_op(std::string* value);

  private:
  const std::string& _internal_debug_op() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_debug_op(
      const std::string& value);
  std::string* _internal_mutable_debug_op();

  public:
  // .tensorflow.EventReply.DebugOpStateChange.State state = 1;
  void clear_state() ;
  ::tensorflow::EventReply_DebugOpStateChange_State state() const;
  void set_state(::tensorflow::EventReply_DebugOpStateChange_State value);

  private:
  ::tensorflow::EventReply_DebugOpStateChange_State _internal_state() const;
  void _internal_set_state(::tensorflow::EventReply_DebugOpStateChange_State value);

  public:
  // int32 output_slot = 3;
  void clear_output_slot() ;
  ::int32_t output_slot() const;
  void set_output_slot(::int32_t value);

  private:
  ::int32_t _internal_output_slot() const;
  void _internal_set_output_slot(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.EventReply.DebugOpStateChange)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      66, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventReply_DebugOpStateChange& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_name_;
    ::google::protobuf::internal::ArenaStringPtr debug_op_;
    int state_;
    ::int32_t output_slot_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CallTraceback_OriginIdToStringEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          CallTraceback_OriginIdToStringEntry_DoNotUse, ::int64_t, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      CallTraceback_OriginIdToStringEntry_DoNotUse, ::int64_t, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CallTraceback_OriginIdToStringEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CallTraceback_OriginIdToStringEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CallTraceback_OriginIdToStringEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CallTraceback_OriginIdToStringEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CallTraceback_OriginIdToStringEntry_DoNotUse*>(
        &_CallTraceback_OriginIdToStringEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CallTraceback final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.CallTraceback) */ {
 public:
  inline CallTraceback() : CallTraceback(nullptr) {}
  ~CallTraceback() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CallTraceback(
      ::google::protobuf::internal::ConstantInitialized);

  inline CallTraceback(const CallTraceback& from) : CallTraceback(nullptr, from) {}
  inline CallTraceback(CallTraceback&& from) noexcept
      : CallTraceback(nullptr, std::move(from)) {}
  inline CallTraceback& operator=(const CallTraceback& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallTraceback& operator=(CallTraceback&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallTraceback& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallTraceback* internal_default_instance() {
    return reinterpret_cast<const CallTraceback*>(
        &_CallTraceback_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CallTraceback& a, CallTraceback& b) { a.Swap(&b); }
  inline void Swap(CallTraceback* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallTraceback* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallTraceback* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CallTraceback>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CallTraceback& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CallTraceback& from) { CallTraceback::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CallTraceback* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.CallTraceback"; }

 protected:
  explicit CallTraceback(::google::protobuf::Arena* arena);
  CallTraceback(::google::protobuf::Arena* arena, const CallTraceback& from);
  CallTraceback(::google::protobuf::Arena* arena, CallTraceback&& from) noexcept
      : CallTraceback(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using CallType = CallTraceback_CallType;
  static constexpr CallType UNSPECIFIED = CallTraceback_CallType_UNSPECIFIED;
  static constexpr CallType GRAPH_EXECUTION = CallTraceback_CallType_GRAPH_EXECUTION;
  static constexpr CallType EAGER_EXECUTION = CallTraceback_CallType_EAGER_EXECUTION;
  static inline bool CallType_IsValid(int value) {
    return CallTraceback_CallType_IsValid(value);
  }
  static constexpr CallType CallType_MIN = CallTraceback_CallType_CallType_MIN;
  static constexpr CallType CallType_MAX = CallTraceback_CallType_CallType_MAX;
  static constexpr int CallType_ARRAYSIZE = CallTraceback_CallType_CallType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* CallType_descriptor() {
    return CallTraceback_CallType_descriptor();
  }
  template <typename T>
  static inline const std::string& CallType_Name(T value) {
    return CallTraceback_CallType_Name(value);
  }
  static inline bool CallType_Parse(absl::string_view name, CallType* value) {
    return CallTraceback_CallType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kOriginIdToStringFieldNumber = 4,
    kCallKeyFieldNumber = 2,
    kOriginStackFieldNumber = 3,
    kGraphTracebackFieldNumber = 5,
    kGraphVersionFieldNumber = 6,
    kCallTypeFieldNumber = 1,
  };
  // map<int64, string> origin_id_to_string = 4;
  int origin_id_to_string_size() const;
  private:
  int _internal_origin_id_to_string_size() const;

  public:
  void clear_origin_id_to_string() ;
  const ::google::protobuf::Map<::int64_t, std::string>& origin_id_to_string() const;
  ::google::protobuf::Map<::int64_t, std::string>* mutable_origin_id_to_string();

  private:
  const ::google::protobuf::Map<::int64_t, std::string>& _internal_origin_id_to_string() const;
  ::google::protobuf::Map<::int64_t, std::string>* _internal_mutable_origin_id_to_string();

  public:
  // string call_key = 2;
  void clear_call_key() ;
  const std::string& call_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_call_key(Arg_&& arg, Args_... args);
  std::string* mutable_call_key();
  PROTOBUF_NODISCARD std::string* release_call_key();
  void set_allocated_call_key(std::string* value);

  private:
  const std::string& _internal_call_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_key(
      const std::string& value);
  std::string* _internal_mutable_call_key();

  public:
  // .tensorflow.tfprof.CodeDef origin_stack = 3;
  bool has_origin_stack() const;
  void clear_origin_stack() ;
  const ::tensorflow::tfprof::CodeDef& origin_stack() const;
  PROTOBUF_NODISCARD ::tensorflow::tfprof::CodeDef* release_origin_stack();
  ::tensorflow::tfprof::CodeDef* mutable_origin_stack();
  void set_allocated_origin_stack(::tensorflow::tfprof::CodeDef* value);
  void unsafe_arena_set_allocated_origin_stack(::tensorflow::tfprof::CodeDef* value);
  ::tensorflow::tfprof::CodeDef* unsafe_arena_release_origin_stack();

  private:
  const ::tensorflow::tfprof::CodeDef& _internal_origin_stack() const;
  ::tensorflow::tfprof::CodeDef* _internal_mutable_origin_stack();

  public:
  // .tensorflow.tfprof.OpLogProto graph_traceback = 5;
  bool has_graph_traceback() const;
  void clear_graph_traceback() ;
  const ::tensorflow::tfprof::OpLogProto& graph_traceback() const;
  PROTOBUF_NODISCARD ::tensorflow::tfprof::OpLogProto* release_graph_traceback();
  ::tensorflow::tfprof::OpLogProto* mutable_graph_traceback();
  void set_allocated_graph_traceback(::tensorflow::tfprof::OpLogProto* value);
  void unsafe_arena_set_allocated_graph_traceback(::tensorflow::tfprof::OpLogProto* value);
  ::tensorflow::tfprof::OpLogProto* unsafe_arena_release_graph_traceback();

  private:
  const ::tensorflow::tfprof::OpLogProto& _internal_graph_traceback() const;
  ::tensorflow::tfprof::OpLogProto* _internal_mutable_graph_traceback();

  public:
  // int64 graph_version = 6;
  void clear_graph_version() ;
  ::int64_t graph_version() const;
  void set_graph_version(::int64_t value);

  private:
  ::int64_t _internal_graph_version() const;
  void _internal_set_graph_version(::int64_t value);

  public:
  // .tensorflow.CallTraceback.CallType call_type = 1;
  void clear_call_type() ;
  ::tensorflow::CallTraceback_CallType call_type() const;
  void set_call_type(::tensorflow::CallTraceback_CallType value);

  private:
  ::tensorflow::CallTraceback_CallType _internal_call_type() const;
  void _internal_set_call_type(::tensorflow::CallTraceback_CallType value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.CallTraceback)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      60, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CallTraceback& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<CallTraceback_OriginIdToStringEntry_DoNotUse, ::int64_t, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        origin_id_to_string_;
    ::google::protobuf::internal::ArenaStringPtr call_key_;
    ::tensorflow::tfprof::CodeDef* origin_stack_;
    ::tensorflow::tfprof::OpLogProto* graph_traceback_;
    ::int64_t graph_version_;
    int call_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT EventReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.EventReply) */ {
 public:
  inline EventReply() : EventReply(nullptr) {}
  ~EventReply() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventReply(const EventReply& from) : EventReply(nullptr, from) {}
  inline EventReply(EventReply&& from) noexcept
      : EventReply(nullptr, std::move(from)) {}
  inline EventReply& operator=(const EventReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventReply& operator=(EventReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventReply* internal_default_instance() {
    return reinterpret_cast<const EventReply*>(
        &_EventReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EventReply& a, EventReply& b) { a.Swap(&b); }
  inline void Swap(EventReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventReply* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<EventReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventReply& from) { EventReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EventReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.EventReply"; }

 protected:
  explicit EventReply(::google::protobuf::Arena* arena);
  EventReply(::google::protobuf::Arena* arena, const EventReply& from);
  EventReply(::google::protobuf::Arena* arena, EventReply&& from) noexcept
      : EventReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using DebugOpStateChange = EventReply_DebugOpStateChange;

  // accessors -------------------------------------------------------
  enum : int {
    kDebugOpStateChangesFieldNumber = 1,
    kTensorFieldNumber = 2,
  };
  // repeated .tensorflow.EventReply.DebugOpStateChange debug_op_state_changes = 1;
  int debug_op_state_changes_size() const;
  private:
  int _internal_debug_op_state_changes_size() const;

  public:
  void clear_debug_op_state_changes() ;
  ::tensorflow::EventReply_DebugOpStateChange* mutable_debug_op_state_changes(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::EventReply_DebugOpStateChange>* mutable_debug_op_state_changes();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::EventReply_DebugOpStateChange>& _internal_debug_op_state_changes() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::EventReply_DebugOpStateChange>* _internal_mutable_debug_op_state_changes();
  public:
  const ::tensorflow::EventReply_DebugOpStateChange& debug_op_state_changes(int index) const;
  ::tensorflow::EventReply_DebugOpStateChange* add_debug_op_state_changes();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::EventReply_DebugOpStateChange>& debug_op_state_changes() const;
  // .tensorflow.TensorProto tensor = 2;
  bool has_tensor() const;
  void clear_tensor() ;
  const ::tensorflow::TensorProto& tensor() const;
  PROTOBUF_NODISCARD ::tensorflow::TensorProto* release_tensor();
  ::tensorflow::TensorProto* mutable_tensor();
  void set_allocated_tensor(::tensorflow::TensorProto* value);
  void unsafe_arena_set_allocated_tensor(::tensorflow::TensorProto* value);
  ::tensorflow::TensorProto* unsafe_arena_release_tensor();

  private:
  const ::tensorflow::TensorProto& _internal_tensor() const;
  ::tensorflow::TensorProto* _internal_mutable_tensor();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.EventReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventReply& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::EventReply_DebugOpStateChange > debug_op_state_changes_;
    ::tensorflow::TensorProto* tensor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventReply_DebugOpStateChange

// .tensorflow.EventReply.DebugOpStateChange.State state = 1;
inline void EventReply_DebugOpStateChange::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
}
inline ::tensorflow::EventReply_DebugOpStateChange_State EventReply_DebugOpStateChange::state() const {
  // @@protoc_insertion_point(field_get:tensorflow.EventReply.DebugOpStateChange.state)
  return _internal_state();
}
inline void EventReply_DebugOpStateChange::set_state(::tensorflow::EventReply_DebugOpStateChange_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tensorflow.EventReply.DebugOpStateChange.state)
}
inline ::tensorflow::EventReply_DebugOpStateChange_State EventReply_DebugOpStateChange::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::EventReply_DebugOpStateChange_State>(_impl_.state_);
}
inline void EventReply_DebugOpStateChange::_internal_set_state(::tensorflow::EventReply_DebugOpStateChange_State value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// string node_name = 2;
inline void EventReply_DebugOpStateChange::clear_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.ClearToEmpty();
}
inline const std::string& EventReply_DebugOpStateChange::node_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.EventReply.DebugOpStateChange.node_name)
  return _internal_node_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventReply_DebugOpStateChange::set_node_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.EventReply.DebugOpStateChange.node_name)
}
inline std::string* EventReply_DebugOpStateChange::mutable_node_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.EventReply.DebugOpStateChange.node_name)
  return _s;
}
inline const std::string& EventReply_DebugOpStateChange::_internal_node_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_name_.Get();
}
inline void EventReply_DebugOpStateChange::_internal_set_node_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.Set(value, GetArena());
}
inline std::string* EventReply_DebugOpStateChange::_internal_mutable_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_name_.Mutable( GetArena());
}
inline std::string* EventReply_DebugOpStateChange::release_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.EventReply.DebugOpStateChange.node_name)
  return _impl_.node_name_.Release();
}
inline void EventReply_DebugOpStateChange::set_allocated_node_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.node_name_.IsDefault()) {
          _impl_.node_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EventReply.DebugOpStateChange.node_name)
}

// int32 output_slot = 3;
inline void EventReply_DebugOpStateChange::clear_output_slot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_slot_ = 0;
}
inline ::int32_t EventReply_DebugOpStateChange::output_slot() const {
  // @@protoc_insertion_point(field_get:tensorflow.EventReply.DebugOpStateChange.output_slot)
  return _internal_output_slot();
}
inline void EventReply_DebugOpStateChange::set_output_slot(::int32_t value) {
  _internal_set_output_slot(value);
  // @@protoc_insertion_point(field_set:tensorflow.EventReply.DebugOpStateChange.output_slot)
}
inline ::int32_t EventReply_DebugOpStateChange::_internal_output_slot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_slot_;
}
inline void EventReply_DebugOpStateChange::_internal_set_output_slot(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_slot_ = value;
}

// string debug_op = 4;
inline void EventReply_DebugOpStateChange::clear_debug_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_op_.ClearToEmpty();
}
inline const std::string& EventReply_DebugOpStateChange::debug_op() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.EventReply.DebugOpStateChange.debug_op)
  return _internal_debug_op();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventReply_DebugOpStateChange::set_debug_op(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_op_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.EventReply.DebugOpStateChange.debug_op)
}
inline std::string* EventReply_DebugOpStateChange::mutable_debug_op() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_debug_op();
  // @@protoc_insertion_point(field_mutable:tensorflow.EventReply.DebugOpStateChange.debug_op)
  return _s;
}
inline const std::string& EventReply_DebugOpStateChange::_internal_debug_op() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_op_.Get();
}
inline void EventReply_DebugOpStateChange::_internal_set_debug_op(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_op_.Set(value, GetArena());
}
inline std::string* EventReply_DebugOpStateChange::_internal_mutable_debug_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.debug_op_.Mutable( GetArena());
}
inline std::string* EventReply_DebugOpStateChange::release_debug_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.EventReply.DebugOpStateChange.debug_op)
  return _impl_.debug_op_.Release();
}
inline void EventReply_DebugOpStateChange::set_allocated_debug_op(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_op_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.debug_op_.IsDefault()) {
          _impl_.debug_op_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EventReply.DebugOpStateChange.debug_op)
}

// -------------------------------------------------------------------

// EventReply

// repeated .tensorflow.EventReply.DebugOpStateChange debug_op_state_changes = 1;
inline int EventReply::_internal_debug_op_state_changes_size() const {
  return _internal_debug_op_state_changes().size();
}
inline int EventReply::debug_op_state_changes_size() const {
  return _internal_debug_op_state_changes_size();
}
inline void EventReply::clear_debug_op_state_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_op_state_changes_.Clear();
}
inline ::tensorflow::EventReply_DebugOpStateChange* EventReply::mutable_debug_op_state_changes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.EventReply.debug_op_state_changes)
  return _internal_mutable_debug_op_state_changes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::EventReply_DebugOpStateChange>* EventReply::mutable_debug_op_state_changes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.EventReply.debug_op_state_changes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_debug_op_state_changes();
}
inline const ::tensorflow::EventReply_DebugOpStateChange& EventReply::debug_op_state_changes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.EventReply.debug_op_state_changes)
  return _internal_debug_op_state_changes().Get(index);
}
inline ::tensorflow::EventReply_DebugOpStateChange* EventReply::add_debug_op_state_changes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::EventReply_DebugOpStateChange* _add = _internal_mutable_debug_op_state_changes()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.EventReply.debug_op_state_changes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::EventReply_DebugOpStateChange>& EventReply::debug_op_state_changes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.EventReply.debug_op_state_changes)
  return _internal_debug_op_state_changes();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::EventReply_DebugOpStateChange>&
EventReply::_internal_debug_op_state_changes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_op_state_changes_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::EventReply_DebugOpStateChange>*
EventReply::_internal_mutable_debug_op_state_changes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.debug_op_state_changes_;
}

// .tensorflow.TensorProto tensor = 2;
inline bool EventReply::has_tensor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tensor_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorProto& EventReply::_internal_tensor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorProto* p = _impl_.tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorProto&>(::tensorflow::_TensorProto_default_instance_);
}
inline const ::tensorflow::TensorProto& EventReply::tensor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.EventReply.tensor)
  return _internal_tensor();
}
inline void EventReply::unsafe_arena_set_allocated_tensor(::tensorflow::TensorProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_);
  }
  _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.EventReply.tensor)
}
inline ::tensorflow::TensorProto* EventReply::release_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorProto* released = _impl_.tensor_;
  _impl_.tensor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::TensorProto* EventReply::unsafe_arena_release_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.EventReply.tensor)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorProto* temp = _impl_.tensor_;
  _impl_.tensor_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorProto* EventReply::_internal_mutable_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tensor_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorProto>(GetArena());
    _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorProto*>(p);
  }
  return _impl_.tensor_;
}
inline ::tensorflow::TensorProto* EventReply::mutable_tensor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::TensorProto* _msg = _internal_mutable_tensor();
  // @@protoc_insertion_point(field_mutable:tensorflow.EventReply.tensor)
  return _msg;
}
inline void EventReply::set_allocated_tensor(::tensorflow::TensorProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EventReply.tensor)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CallTraceback

// .tensorflow.CallTraceback.CallType call_type = 1;
inline void CallTraceback::clear_call_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.call_type_ = 0;
}
inline ::tensorflow::CallTraceback_CallType CallTraceback::call_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CallTraceback.call_type)
  return _internal_call_type();
}
inline void CallTraceback::set_call_type(::tensorflow::CallTraceback_CallType value) {
  _internal_set_call_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.CallTraceback.call_type)
}
inline ::tensorflow::CallTraceback_CallType CallTraceback::_internal_call_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::CallTraceback_CallType>(_impl_.call_type_);
}
inline void CallTraceback::_internal_set_call_type(::tensorflow::CallTraceback_CallType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.call_type_ = value;
}

// string call_key = 2;
inline void CallTraceback::clear_call_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.call_key_.ClearToEmpty();
}
inline const std::string& CallTraceback::call_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CallTraceback.call_key)
  return _internal_call_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallTraceback::set_call_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.call_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.CallTraceback.call_key)
}
inline std::string* CallTraceback::mutable_call_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_call_key();
  // @@protoc_insertion_point(field_mutable:tensorflow.CallTraceback.call_key)
  return _s;
}
inline const std::string& CallTraceback::_internal_call_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.call_key_.Get();
}
inline void CallTraceback::_internal_set_call_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.call_key_.Set(value, GetArena());
}
inline std::string* CallTraceback::_internal_mutable_call_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.call_key_.Mutable( GetArena());
}
inline std::string* CallTraceback::release_call_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.CallTraceback.call_key)
  return _impl_.call_key_.Release();
}
inline void CallTraceback::set_allocated_call_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.call_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.call_key_.IsDefault()) {
          _impl_.call_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CallTraceback.call_key)
}

// .tensorflow.tfprof.CodeDef origin_stack = 3;
inline bool CallTraceback::has_origin_stack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_stack_ != nullptr);
  return value;
}
inline const ::tensorflow::tfprof::CodeDef& CallTraceback::_internal_origin_stack() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::tfprof::CodeDef* p = _impl_.origin_stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::tfprof::CodeDef&>(::tensorflow::tfprof::_CodeDef_default_instance_);
}
inline const ::tensorflow::tfprof::CodeDef& CallTraceback::origin_stack() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CallTraceback.origin_stack)
  return _internal_origin_stack();
}
inline void CallTraceback::unsafe_arena_set_allocated_origin_stack(::tensorflow::tfprof::CodeDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.origin_stack_);
  }
  _impl_.origin_stack_ = reinterpret_cast<::tensorflow::tfprof::CodeDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CallTraceback.origin_stack)
}
inline ::tensorflow::tfprof::CodeDef* CallTraceback::release_origin_stack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::tfprof::CodeDef* released = _impl_.origin_stack_;
  _impl_.origin_stack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::tfprof::CodeDef* CallTraceback::unsafe_arena_release_origin_stack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.CallTraceback.origin_stack)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::tfprof::CodeDef* temp = _impl_.origin_stack_;
  _impl_.origin_stack_ = nullptr;
  return temp;
}
inline ::tensorflow::tfprof::CodeDef* CallTraceback::_internal_mutable_origin_stack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.origin_stack_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::tfprof::CodeDef>(GetArena());
    _impl_.origin_stack_ = reinterpret_cast<::tensorflow::tfprof::CodeDef*>(p);
  }
  return _impl_.origin_stack_;
}
inline ::tensorflow::tfprof::CodeDef* CallTraceback::mutable_origin_stack() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::tfprof::CodeDef* _msg = _internal_mutable_origin_stack();
  // @@protoc_insertion_point(field_mutable:tensorflow.CallTraceback.origin_stack)
  return _msg;
}
inline void CallTraceback::set_allocated_origin_stack(::tensorflow::tfprof::CodeDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.origin_stack_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.origin_stack_ = reinterpret_cast<::tensorflow::tfprof::CodeDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CallTraceback.origin_stack)
}

// map<int64, string> origin_id_to_string = 4;
inline int CallTraceback::_internal_origin_id_to_string_size() const {
  return _internal_origin_id_to_string().size();
}
inline int CallTraceback::origin_id_to_string_size() const {
  return _internal_origin_id_to_string_size();
}
inline void CallTraceback::clear_origin_id_to_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_id_to_string_.Clear();
}
inline const ::google::protobuf::Map<::int64_t, std::string>& CallTraceback::_internal_origin_id_to_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_id_to_string_.GetMap();
}
inline const ::google::protobuf::Map<::int64_t, std::string>& CallTraceback::origin_id_to_string() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.CallTraceback.origin_id_to_string)
  return _internal_origin_id_to_string();
}
inline ::google::protobuf::Map<::int64_t, std::string>* CallTraceback::_internal_mutable_origin_id_to_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.origin_id_to_string_.MutableMap();
}
inline ::google::protobuf::Map<::int64_t, std::string>* CallTraceback::mutable_origin_id_to_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.CallTraceback.origin_id_to_string)
  return _internal_mutable_origin_id_to_string();
}

// .tensorflow.tfprof.OpLogProto graph_traceback = 5;
inline bool CallTraceback::has_graph_traceback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.graph_traceback_ != nullptr);
  return value;
}
inline const ::tensorflow::tfprof::OpLogProto& CallTraceback::_internal_graph_traceback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::tfprof::OpLogProto* p = _impl_.graph_traceback_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::tfprof::OpLogProto&>(::tensorflow::tfprof::_OpLogProto_default_instance_);
}
inline const ::tensorflow::tfprof::OpLogProto& CallTraceback::graph_traceback() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CallTraceback.graph_traceback)
  return _internal_graph_traceback();
}
inline void CallTraceback::unsafe_arena_set_allocated_graph_traceback(::tensorflow::tfprof::OpLogProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.graph_traceback_);
  }
  _impl_.graph_traceback_ = reinterpret_cast<::tensorflow::tfprof::OpLogProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CallTraceback.graph_traceback)
}
inline ::tensorflow::tfprof::OpLogProto* CallTraceback::release_graph_traceback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::tfprof::OpLogProto* released = _impl_.graph_traceback_;
  _impl_.graph_traceback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::tfprof::OpLogProto* CallTraceback::unsafe_arena_release_graph_traceback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.CallTraceback.graph_traceback)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::tfprof::OpLogProto* temp = _impl_.graph_traceback_;
  _impl_.graph_traceback_ = nullptr;
  return temp;
}
inline ::tensorflow::tfprof::OpLogProto* CallTraceback::_internal_mutable_graph_traceback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.graph_traceback_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::tfprof::OpLogProto>(GetArena());
    _impl_.graph_traceback_ = reinterpret_cast<::tensorflow::tfprof::OpLogProto*>(p);
  }
  return _impl_.graph_traceback_;
}
inline ::tensorflow::tfprof::OpLogProto* CallTraceback::mutable_graph_traceback() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::tfprof::OpLogProto* _msg = _internal_mutable_graph_traceback();
  // @@protoc_insertion_point(field_mutable:tensorflow.CallTraceback.graph_traceback)
  return _msg;
}
inline void CallTraceback::set_allocated_graph_traceback(::tensorflow::tfprof::OpLogProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.graph_traceback_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.graph_traceback_ = reinterpret_cast<::tensorflow::tfprof::OpLogProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CallTraceback.graph_traceback)
}

// int64 graph_version = 6;
inline void CallTraceback::clear_graph_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.graph_version_ = ::int64_t{0};
}
inline ::int64_t CallTraceback::graph_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.CallTraceback.graph_version)
  return _internal_graph_version();
}
inline void CallTraceback::set_graph_version(::int64_t value) {
  _internal_set_graph_version(value);
  // @@protoc_insertion_point(field_set:tensorflow.CallTraceback.graph_version)
}
inline ::int64_t CallTraceback::_internal_graph_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.graph_version_;
}
inline void CallTraceback::_internal_set_graph_version(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.graph_version_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::EventReply_DebugOpStateChange_State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::EventReply_DebugOpStateChange_State>() {
  return ::tensorflow::EventReply_DebugOpStateChange_State_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::CallTraceback_CallType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::CallTraceback_CallType>() {
  return ::tensorflow::CallTraceback_CallType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fdebug_2fdebug_5fservice_2eproto_2epb_2eh
