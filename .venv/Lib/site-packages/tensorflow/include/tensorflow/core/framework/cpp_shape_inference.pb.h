// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/framework/cpp_shape_inference.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/framework/full_type.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto;
namespace tensorflow {
namespace core {
class CppShapeInferenceInputsNeeded;
struct CppShapeInferenceInputsNeededDefaultTypeInternal;
PROTOBUF_EXPORT extern CppShapeInferenceInputsNeededDefaultTypeInternal _CppShapeInferenceInputsNeeded_default_instance_;
class CppShapeInferenceResult;
struct CppShapeInferenceResultDefaultTypeInternal;
PROTOBUF_EXPORT extern CppShapeInferenceResultDefaultTypeInternal _CppShapeInferenceResult_default_instance_;
class CppShapeInferenceResult_HandleData;
struct CppShapeInferenceResult_HandleDataDefaultTypeInternal;
PROTOBUF_EXPORT extern CppShapeInferenceResult_HandleDataDefaultTypeInternal _CppShapeInferenceResult_HandleData_default_instance_;
class CppShapeInferenceResult_HandleShapeAndType;
struct CppShapeInferenceResult_HandleShapeAndTypeDefaultTypeInternal;
PROTOBUF_EXPORT extern CppShapeInferenceResult_HandleShapeAndTypeDefaultTypeInternal _CppShapeInferenceResult_HandleShapeAndType_default_instance_;
}  // namespace core
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace core {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT CppShapeInferenceInputsNeeded final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.core.CppShapeInferenceInputsNeeded) */ {
 public:
  inline CppShapeInferenceInputsNeeded() : CppShapeInferenceInputsNeeded(nullptr) {}
  ~CppShapeInferenceInputsNeeded() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CppShapeInferenceInputsNeeded(
      ::google::protobuf::internal::ConstantInitialized);

  inline CppShapeInferenceInputsNeeded(const CppShapeInferenceInputsNeeded& from) : CppShapeInferenceInputsNeeded(nullptr, from) {}
  inline CppShapeInferenceInputsNeeded(CppShapeInferenceInputsNeeded&& from) noexcept
      : CppShapeInferenceInputsNeeded(nullptr, std::move(from)) {}
  inline CppShapeInferenceInputsNeeded& operator=(const CppShapeInferenceInputsNeeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CppShapeInferenceInputsNeeded& operator=(CppShapeInferenceInputsNeeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CppShapeInferenceInputsNeeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CppShapeInferenceInputsNeeded* internal_default_instance() {
    return reinterpret_cast<const CppShapeInferenceInputsNeeded*>(
        &_CppShapeInferenceInputsNeeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CppShapeInferenceInputsNeeded& a, CppShapeInferenceInputsNeeded& b) { a.Swap(&b); }
  inline void Swap(CppShapeInferenceInputsNeeded* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CppShapeInferenceInputsNeeded* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CppShapeInferenceInputsNeeded* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CppShapeInferenceInputsNeeded>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CppShapeInferenceInputsNeeded& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CppShapeInferenceInputsNeeded& from) { CppShapeInferenceInputsNeeded::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CppShapeInferenceInputsNeeded* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.core.CppShapeInferenceInputsNeeded"; }

 protected:
  explicit CppShapeInferenceInputsNeeded(::google::protobuf::Arena* arena);
  CppShapeInferenceInputsNeeded(::google::protobuf::Arena* arena, const CppShapeInferenceInputsNeeded& from);
  CppShapeInferenceInputsNeeded(::google::protobuf::Arena* arena, CppShapeInferenceInputsNeeded&& from) noexcept
      : CppShapeInferenceInputsNeeded(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInputTensorsNeededFieldNumber = 1,
    kInputTensorsAsShapesNeededFieldNumber = 2,
  };
  // repeated int32 input_tensors_needed = 1;
  int input_tensors_needed_size() const;
  private:
  int _internal_input_tensors_needed_size() const;

  public:
  void clear_input_tensors_needed() ;
  ::int32_t input_tensors_needed(int index) const;
  void set_input_tensors_needed(int index, ::int32_t value);
  void add_input_tensors_needed(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& input_tensors_needed() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_input_tensors_needed();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_input_tensors_needed() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_input_tensors_needed();

  public:
  // repeated int32 input_tensors_as_shapes_needed = 2;
  int input_tensors_as_shapes_needed_size() const;
  private:
  int _internal_input_tensors_as_shapes_needed_size() const;

  public:
  void clear_input_tensors_as_shapes_needed() ;
  ::int32_t input_tensors_as_shapes_needed(int index) const;
  void set_input_tensors_as_shapes_needed(int index, ::int32_t value);
  void add_input_tensors_as_shapes_needed(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& input_tensors_as_shapes_needed() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_input_tensors_as_shapes_needed();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_input_tensors_as_shapes_needed() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_input_tensors_as_shapes_needed();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.core.CppShapeInferenceInputsNeeded)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CppShapeInferenceInputsNeeded& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> input_tensors_needed_;
    mutable ::google::protobuf::internal::CachedSize _input_tensors_needed_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> input_tensors_as_shapes_needed_;
    mutable ::google::protobuf::internal::CachedSize _input_tensors_as_shapes_needed_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CppShapeInferenceResult_HandleShapeAndType final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType) */ {
 public:
  inline CppShapeInferenceResult_HandleShapeAndType() : CppShapeInferenceResult_HandleShapeAndType(nullptr) {}
  ~CppShapeInferenceResult_HandleShapeAndType() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CppShapeInferenceResult_HandleShapeAndType(
      ::google::protobuf::internal::ConstantInitialized);

  inline CppShapeInferenceResult_HandleShapeAndType(const CppShapeInferenceResult_HandleShapeAndType& from) : CppShapeInferenceResult_HandleShapeAndType(nullptr, from) {}
  inline CppShapeInferenceResult_HandleShapeAndType(CppShapeInferenceResult_HandleShapeAndType&& from) noexcept
      : CppShapeInferenceResult_HandleShapeAndType(nullptr, std::move(from)) {}
  inline CppShapeInferenceResult_HandleShapeAndType& operator=(const CppShapeInferenceResult_HandleShapeAndType& from) {
    CopyFrom(from);
    return *this;
  }
  inline CppShapeInferenceResult_HandleShapeAndType& operator=(CppShapeInferenceResult_HandleShapeAndType&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CppShapeInferenceResult_HandleShapeAndType& default_instance() {
    return *internal_default_instance();
  }
  static inline const CppShapeInferenceResult_HandleShapeAndType* internal_default_instance() {
    return reinterpret_cast<const CppShapeInferenceResult_HandleShapeAndType*>(
        &_CppShapeInferenceResult_HandleShapeAndType_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CppShapeInferenceResult_HandleShapeAndType& a, CppShapeInferenceResult_HandleShapeAndType& b) { a.Swap(&b); }
  inline void Swap(CppShapeInferenceResult_HandleShapeAndType* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CppShapeInferenceResult_HandleShapeAndType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CppShapeInferenceResult_HandleShapeAndType* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CppShapeInferenceResult_HandleShapeAndType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CppShapeInferenceResult_HandleShapeAndType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CppShapeInferenceResult_HandleShapeAndType& from) { CppShapeInferenceResult_HandleShapeAndType::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CppShapeInferenceResult_HandleShapeAndType* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.core.CppShapeInferenceResult.HandleShapeAndType"; }

 protected:
  explicit CppShapeInferenceResult_HandleShapeAndType(::google::protobuf::Arena* arena);
  CppShapeInferenceResult_HandleShapeAndType(::google::protobuf::Arena* arena, const CppShapeInferenceResult_HandleShapeAndType& from);
  CppShapeInferenceResult_HandleShapeAndType(::google::protobuf::Arena* arena, CppShapeInferenceResult_HandleShapeAndType&& from) noexcept
      : CppShapeInferenceResult_HandleShapeAndType(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kShapeFieldNumber = 1,
    kTypeFieldNumber = 4,
    kDtypeFieldNumber = 2,
  };
  // .tensorflow.TensorShapeProto shape = 1;
  bool has_shape() const;
  void clear_shape() ;
  const ::tensorflow::TensorShapeProto& shape() const;
  PROTOBUF_NODISCARD ::tensorflow::TensorShapeProto* release_shape();
  ::tensorflow::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* value);
  void unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* value);
  ::tensorflow::TensorShapeProto* unsafe_arena_release_shape();

  private:
  const ::tensorflow::TensorShapeProto& _internal_shape() const;
  ::tensorflow::TensorShapeProto* _internal_mutable_shape();

  public:
  // .tensorflow.FullTypeDef type = 4;
  bool has_type() const;
  void clear_type() ;
  const ::tensorflow::FullTypeDef& type() const;
  PROTOBUF_NODISCARD ::tensorflow::FullTypeDef* release_type();
  ::tensorflow::FullTypeDef* mutable_type();
  void set_allocated_type(::tensorflow::FullTypeDef* value);
  void unsafe_arena_set_allocated_type(::tensorflow::FullTypeDef* value);
  ::tensorflow::FullTypeDef* unsafe_arena_release_type();

  private:
  const ::tensorflow::FullTypeDef& _internal_type() const;
  ::tensorflow::FullTypeDef* _internal_mutable_type();

  public:
  // .tensorflow.DataType dtype = 2;
  void clear_dtype() ;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  private:
  ::tensorflow::DataType _internal_dtype() const;
  void _internal_set_dtype(::tensorflow::DataType value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CppShapeInferenceResult_HandleShapeAndType& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::TensorShapeProto* shape_;
    ::tensorflow::FullTypeDef* type_;
    int dtype_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CppShapeInferenceResult_HandleData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.core.CppShapeInferenceResult.HandleData) */ {
 public:
  inline CppShapeInferenceResult_HandleData() : CppShapeInferenceResult_HandleData(nullptr) {}
  ~CppShapeInferenceResult_HandleData() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CppShapeInferenceResult_HandleData(
      ::google::protobuf::internal::ConstantInitialized);

  inline CppShapeInferenceResult_HandleData(const CppShapeInferenceResult_HandleData& from) : CppShapeInferenceResult_HandleData(nullptr, from) {}
  inline CppShapeInferenceResult_HandleData(CppShapeInferenceResult_HandleData&& from) noexcept
      : CppShapeInferenceResult_HandleData(nullptr, std::move(from)) {}
  inline CppShapeInferenceResult_HandleData& operator=(const CppShapeInferenceResult_HandleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CppShapeInferenceResult_HandleData& operator=(CppShapeInferenceResult_HandleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CppShapeInferenceResult_HandleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CppShapeInferenceResult_HandleData* internal_default_instance() {
    return reinterpret_cast<const CppShapeInferenceResult_HandleData*>(
        &_CppShapeInferenceResult_HandleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CppShapeInferenceResult_HandleData& a, CppShapeInferenceResult_HandleData& b) { a.Swap(&b); }
  inline void Swap(CppShapeInferenceResult_HandleData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CppShapeInferenceResult_HandleData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CppShapeInferenceResult_HandleData* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CppShapeInferenceResult_HandleData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CppShapeInferenceResult_HandleData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CppShapeInferenceResult_HandleData& from) { CppShapeInferenceResult_HandleData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CppShapeInferenceResult_HandleData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.core.CppShapeInferenceResult.HandleData"; }

 protected:
  explicit CppShapeInferenceResult_HandleData(::google::protobuf::Arena* arena);
  CppShapeInferenceResult_HandleData(::google::protobuf::Arena* arena, const CppShapeInferenceResult_HandleData& from);
  CppShapeInferenceResult_HandleData(::google::protobuf::Arena* arena, CppShapeInferenceResult_HandleData&& from) noexcept
      : CppShapeInferenceResult_HandleData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kShapeAndTypeFieldNumber = 2,
    kIsSetFieldNumber = 1,
  };
  // repeated .tensorflow.core.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
  int shape_and_type_size() const;
  private:
  int _internal_shape_and_type_size() const;

  public:
  void clear_shape_and_type() ;
  ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType* mutable_shape_and_type(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType>* mutable_shape_and_type();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType>& _internal_shape_and_type() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType>* _internal_mutable_shape_and_type();
  public:
  const ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType& shape_and_type(int index) const;
  ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType* add_shape_and_type();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType>& shape_and_type() const;
  // bool is_set = 1;
  void clear_is_set() ;
  bool is_set() const;
  void set_is_set(bool value);

  private:
  bool _internal_is_set() const;
  void _internal_set_is_set(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.core.CppShapeInferenceResult.HandleData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CppShapeInferenceResult_HandleData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType > shape_and_type_;
    bool is_set_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CppShapeInferenceResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.core.CppShapeInferenceResult) */ {
 public:
  inline CppShapeInferenceResult() : CppShapeInferenceResult(nullptr) {}
  ~CppShapeInferenceResult() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CppShapeInferenceResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline CppShapeInferenceResult(const CppShapeInferenceResult& from) : CppShapeInferenceResult(nullptr, from) {}
  inline CppShapeInferenceResult(CppShapeInferenceResult&& from) noexcept
      : CppShapeInferenceResult(nullptr, std::move(from)) {}
  inline CppShapeInferenceResult& operator=(const CppShapeInferenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CppShapeInferenceResult& operator=(CppShapeInferenceResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CppShapeInferenceResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CppShapeInferenceResult* internal_default_instance() {
    return reinterpret_cast<const CppShapeInferenceResult*>(
        &_CppShapeInferenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CppShapeInferenceResult& a, CppShapeInferenceResult& b) { a.Swap(&b); }
  inline void Swap(CppShapeInferenceResult* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CppShapeInferenceResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CppShapeInferenceResult* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CppShapeInferenceResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CppShapeInferenceResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CppShapeInferenceResult& from) { CppShapeInferenceResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CppShapeInferenceResult* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.core.CppShapeInferenceResult"; }

 protected:
  explicit CppShapeInferenceResult(::google::protobuf::Arena* arena);
  CppShapeInferenceResult(::google::protobuf::Arena* arena, const CppShapeInferenceResult& from);
  CppShapeInferenceResult(::google::protobuf::Arena* arena, CppShapeInferenceResult&& from) noexcept
      : CppShapeInferenceResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using HandleShapeAndType = CppShapeInferenceResult_HandleShapeAndType;
  using HandleData = CppShapeInferenceResult_HandleData;

  // accessors -------------------------------------------------------
  enum : int {
    kShapeFieldNumber = 1,
    kHandleDataFieldNumber = 4,
  };
  // .tensorflow.TensorShapeProto shape = 1;
  bool has_shape() const;
  void clear_shape() ;
  const ::tensorflow::TensorShapeProto& shape() const;
  PROTOBUF_NODISCARD ::tensorflow::TensorShapeProto* release_shape();
  ::tensorflow::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* value);
  void unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* value);
  ::tensorflow::TensorShapeProto* unsafe_arena_release_shape();

  private:
  const ::tensorflow::TensorShapeProto& _internal_shape() const;
  ::tensorflow::TensorShapeProto* _internal_mutable_shape();

  public:
  // .tensorflow.core.CppShapeInferenceResult.HandleData handle_data = 4;
  bool has_handle_data() const;
  void clear_handle_data() ;
  const ::tensorflow::core::CppShapeInferenceResult_HandleData& handle_data() const;
  PROTOBUF_NODISCARD ::tensorflow::core::CppShapeInferenceResult_HandleData* release_handle_data();
  ::tensorflow::core::CppShapeInferenceResult_HandleData* mutable_handle_data();
  void set_allocated_handle_data(::tensorflow::core::CppShapeInferenceResult_HandleData* value);
  void unsafe_arena_set_allocated_handle_data(::tensorflow::core::CppShapeInferenceResult_HandleData* value);
  ::tensorflow::core::CppShapeInferenceResult_HandleData* unsafe_arena_release_handle_data();

  private:
  const ::tensorflow::core::CppShapeInferenceResult_HandleData& _internal_handle_data() const;
  ::tensorflow::core::CppShapeInferenceResult_HandleData* _internal_mutable_handle_data();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.core.CppShapeInferenceResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CppShapeInferenceResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::TensorShapeProto* shape_;
    ::tensorflow::core::CppShapeInferenceResult_HandleData* handle_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CppShapeInferenceResult_HandleShapeAndType

// .tensorflow.TensorShapeProto shape = 1;
inline bool CppShapeInferenceResult_HandleShapeAndType::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorShapeProto& CppShapeInferenceResult_HandleShapeAndType::_internal_shape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorShapeProto* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorShapeProto&>(::tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::tensorflow::TensorShapeProto& CppShapeInferenceResult_HandleShapeAndType::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.shape)
  return _internal_shape();
}
inline void CppShapeInferenceResult_HandleShapeAndType::unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.shape)
}
inline ::tensorflow::TensorShapeProto* CppShapeInferenceResult_HandleShapeAndType::release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::TensorShapeProto* CppShapeInferenceResult_HandleShapeAndType::unsafe_arena_release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.shape)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* CppShapeInferenceResult_HandleShapeAndType::_internal_mutable_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorShapeProto>(GetArena());
    _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(p);
  }
  return _impl_.shape_;
}
inline ::tensorflow::TensorShapeProto* CppShapeInferenceResult_HandleShapeAndType::mutable_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::TensorShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.shape)
  return _msg;
}
inline void CppShapeInferenceResult_HandleShapeAndType::set_allocated_shape(::tensorflow::TensorShapeProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.shape)
}

// .tensorflow.DataType dtype = 2;
inline void CppShapeInferenceResult_HandleShapeAndType::clear_dtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dtype_ = 0;
}
inline ::tensorflow::DataType CppShapeInferenceResult_HandleShapeAndType::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.dtype)
  return _internal_dtype();
}
inline void CppShapeInferenceResult_HandleShapeAndType::set_dtype(::tensorflow::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.dtype)
}
inline ::tensorflow::DataType CppShapeInferenceResult_HandleShapeAndType::_internal_dtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::DataType>(_impl_.dtype_);
}
inline void CppShapeInferenceResult_HandleShapeAndType::_internal_set_dtype(::tensorflow::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dtype_ = value;
}

// .tensorflow.FullTypeDef type = 4;
inline bool CppShapeInferenceResult_HandleShapeAndType::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline const ::tensorflow::FullTypeDef& CppShapeInferenceResult_HandleShapeAndType::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::FullTypeDef* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::FullTypeDef&>(::tensorflow::_FullTypeDef_default_instance_);
}
inline const ::tensorflow::FullTypeDef& CppShapeInferenceResult_HandleShapeAndType::type() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.type)
  return _internal_type();
}
inline void CppShapeInferenceResult_HandleShapeAndType::unsafe_arena_set_allocated_type(::tensorflow::FullTypeDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = reinterpret_cast<::tensorflow::FullTypeDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.type)
}
inline ::tensorflow::FullTypeDef* CppShapeInferenceResult_HandleShapeAndType::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::FullTypeDef* released = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::FullTypeDef* CppShapeInferenceResult_HandleShapeAndType::unsafe_arena_release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.type)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::FullTypeDef* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::tensorflow::FullTypeDef* CppShapeInferenceResult_HandleShapeAndType::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.type_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::FullTypeDef>(GetArena());
    _impl_.type_ = reinterpret_cast<::tensorflow::FullTypeDef*>(p);
  }
  return _impl_.type_;
}
inline ::tensorflow::FullTypeDef* CppShapeInferenceResult_HandleShapeAndType::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::FullTypeDef* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.type)
  return _msg;
}
inline void CppShapeInferenceResult_HandleShapeAndType::set_allocated_type(::tensorflow::FullTypeDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.type_ = reinterpret_cast<::tensorflow::FullTypeDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType.type)
}

// -------------------------------------------------------------------

// CppShapeInferenceResult_HandleData

// bool is_set = 1;
inline void CppShapeInferenceResult_HandleData::clear_is_set() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_set_ = false;
}
inline bool CppShapeInferenceResult_HandleData::is_set() const {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceResult.HandleData.is_set)
  return _internal_is_set();
}
inline void CppShapeInferenceResult_HandleData::set_is_set(bool value) {
  _internal_set_is_set(value);
  // @@protoc_insertion_point(field_set:tensorflow.core.CppShapeInferenceResult.HandleData.is_set)
}
inline bool CppShapeInferenceResult_HandleData::_internal_is_set() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_set_;
}
inline void CppShapeInferenceResult_HandleData::_internal_set_is_set(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_set_ = value;
}

// repeated .tensorflow.core.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
inline int CppShapeInferenceResult_HandleData::_internal_shape_and_type_size() const {
  return _internal_shape_and_type().size();
}
inline int CppShapeInferenceResult_HandleData::shape_and_type_size() const {
  return _internal_shape_and_type_size();
}
inline void CppShapeInferenceResult_HandleData::clear_shape_and_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shape_and_type_.Clear();
}
inline ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType* CppShapeInferenceResult_HandleData::mutable_shape_and_type(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.core.CppShapeInferenceResult.HandleData.shape_and_type)
  return _internal_mutable_shape_and_type()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType>* CppShapeInferenceResult_HandleData::mutable_shape_and_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.core.CppShapeInferenceResult.HandleData.shape_and_type)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_shape_and_type();
}
inline const ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType& CppShapeInferenceResult_HandleData::shape_and_type(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceResult.HandleData.shape_and_type)
  return _internal_shape_and_type().Get(index);
}
inline ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType* CppShapeInferenceResult_HandleData::add_shape_and_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType* _add = _internal_mutable_shape_and_type()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.core.CppShapeInferenceResult.HandleData.shape_and_type)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType>& CppShapeInferenceResult_HandleData::shape_and_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.core.CppShapeInferenceResult.HandleData.shape_and_type)
  return _internal_shape_and_type();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType>&
CppShapeInferenceResult_HandleData::_internal_shape_and_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shape_and_type_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType>*
CppShapeInferenceResult_HandleData::_internal_mutable_shape_and_type() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.shape_and_type_;
}

// -------------------------------------------------------------------

// CppShapeInferenceResult

// .tensorflow.TensorShapeProto shape = 1;
inline bool CppShapeInferenceResult::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorShapeProto& CppShapeInferenceResult::_internal_shape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorShapeProto* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorShapeProto&>(::tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::tensorflow::TensorShapeProto& CppShapeInferenceResult::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceResult.shape)
  return _internal_shape();
}
inline void CppShapeInferenceResult::unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.core.CppShapeInferenceResult.shape)
}
inline ::tensorflow::TensorShapeProto* CppShapeInferenceResult::release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::TensorShapeProto* CppShapeInferenceResult::unsafe_arena_release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.core.CppShapeInferenceResult.shape)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* CppShapeInferenceResult::_internal_mutable_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorShapeProto>(GetArena());
    _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(p);
  }
  return _impl_.shape_;
}
inline ::tensorflow::TensorShapeProto* CppShapeInferenceResult::mutable_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::TensorShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.core.CppShapeInferenceResult.shape)
  return _msg;
}
inline void CppShapeInferenceResult::set_allocated_shape(::tensorflow::TensorShapeProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.core.CppShapeInferenceResult.shape)
}

// .tensorflow.core.CppShapeInferenceResult.HandleData handle_data = 4;
inline bool CppShapeInferenceResult::has_handle_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_data_ != nullptr);
  return value;
}
inline void CppShapeInferenceResult::clear_handle_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.handle_data_ != nullptr) _impl_.handle_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::core::CppShapeInferenceResult_HandleData& CppShapeInferenceResult::_internal_handle_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::core::CppShapeInferenceResult_HandleData* p = _impl_.handle_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::core::CppShapeInferenceResult_HandleData&>(::tensorflow::core::_CppShapeInferenceResult_HandleData_default_instance_);
}
inline const ::tensorflow::core::CppShapeInferenceResult_HandleData& CppShapeInferenceResult::handle_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceResult.handle_data)
  return _internal_handle_data();
}
inline void CppShapeInferenceResult::unsafe_arena_set_allocated_handle_data(::tensorflow::core::CppShapeInferenceResult_HandleData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.handle_data_);
  }
  _impl_.handle_data_ = reinterpret_cast<::tensorflow::core::CppShapeInferenceResult_HandleData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.core.CppShapeInferenceResult.handle_data)
}
inline ::tensorflow::core::CppShapeInferenceResult_HandleData* CppShapeInferenceResult::release_handle_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::core::CppShapeInferenceResult_HandleData* released = _impl_.handle_data_;
  _impl_.handle_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::core::CppShapeInferenceResult_HandleData* CppShapeInferenceResult::unsafe_arena_release_handle_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.core.CppShapeInferenceResult.handle_data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::core::CppShapeInferenceResult_HandleData* temp = _impl_.handle_data_;
  _impl_.handle_data_ = nullptr;
  return temp;
}
inline ::tensorflow::core::CppShapeInferenceResult_HandleData* CppShapeInferenceResult::_internal_mutable_handle_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.handle_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::core::CppShapeInferenceResult_HandleData>(GetArena());
    _impl_.handle_data_ = reinterpret_cast<::tensorflow::core::CppShapeInferenceResult_HandleData*>(p);
  }
  return _impl_.handle_data_;
}
inline ::tensorflow::core::CppShapeInferenceResult_HandleData* CppShapeInferenceResult::mutable_handle_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::core::CppShapeInferenceResult_HandleData* _msg = _internal_mutable_handle_data();
  // @@protoc_insertion_point(field_mutable:tensorflow.core.CppShapeInferenceResult.handle_data)
  return _msg;
}
inline void CppShapeInferenceResult::set_allocated_handle_data(::tensorflow::core::CppShapeInferenceResult_HandleData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.handle_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.handle_data_ = reinterpret_cast<::tensorflow::core::CppShapeInferenceResult_HandleData*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.core.CppShapeInferenceResult.handle_data)
}

// -------------------------------------------------------------------

// CppShapeInferenceInputsNeeded

// repeated int32 input_tensors_needed = 1;
inline int CppShapeInferenceInputsNeeded::_internal_input_tensors_needed_size() const {
  return _internal_input_tensors_needed().size();
}
inline int CppShapeInferenceInputsNeeded::input_tensors_needed_size() const {
  return _internal_input_tensors_needed_size();
}
inline void CppShapeInferenceInputsNeeded::clear_input_tensors_needed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_tensors_needed_.Clear();
}
inline ::int32_t CppShapeInferenceInputsNeeded::input_tensors_needed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_needed)
  return _internal_input_tensors_needed().Get(index);
}
inline void CppShapeInferenceInputsNeeded::set_input_tensors_needed(int index, ::int32_t value) {
  _internal_mutable_input_tensors_needed()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_needed)
}
inline void CppShapeInferenceInputsNeeded::add_input_tensors_needed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_input_tensors_needed()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_needed)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CppShapeInferenceInputsNeeded::input_tensors_needed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_needed)
  return _internal_input_tensors_needed();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CppShapeInferenceInputsNeeded::mutable_input_tensors_needed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_needed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_input_tensors_needed();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
CppShapeInferenceInputsNeeded::_internal_input_tensors_needed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_tensors_needed_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CppShapeInferenceInputsNeeded::_internal_mutable_input_tensors_needed() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.input_tensors_needed_;
}

// repeated int32 input_tensors_as_shapes_needed = 2;
inline int CppShapeInferenceInputsNeeded::_internal_input_tensors_as_shapes_needed_size() const {
  return _internal_input_tensors_as_shapes_needed().size();
}
inline int CppShapeInferenceInputsNeeded::input_tensors_as_shapes_needed_size() const {
  return _internal_input_tensors_as_shapes_needed_size();
}
inline void CppShapeInferenceInputsNeeded::clear_input_tensors_as_shapes_needed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_tensors_as_shapes_needed_.Clear();
}
inline ::int32_t CppShapeInferenceInputsNeeded::input_tensors_as_shapes_needed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_as_shapes_needed)
  return _internal_input_tensors_as_shapes_needed().Get(index);
}
inline void CppShapeInferenceInputsNeeded::set_input_tensors_as_shapes_needed(int index, ::int32_t value) {
  _internal_mutable_input_tensors_as_shapes_needed()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_as_shapes_needed)
}
inline void CppShapeInferenceInputsNeeded::add_input_tensors_as_shapes_needed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_input_tensors_as_shapes_needed()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_as_shapes_needed)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CppShapeInferenceInputsNeeded::input_tensors_as_shapes_needed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_as_shapes_needed)
  return _internal_input_tensors_as_shapes_needed();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CppShapeInferenceInputsNeeded::mutable_input_tensors_as_shapes_needed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.core.CppShapeInferenceInputsNeeded.input_tensors_as_shapes_needed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_input_tensors_as_shapes_needed();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
CppShapeInferenceInputsNeeded::_internal_input_tensors_as_shapes_needed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_tensors_as_shapes_needed_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CppShapeInferenceInputsNeeded::_internal_mutable_input_tensors_as_shapes_needed() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.input_tensors_as_shapes_needed_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_2epb_2eh
