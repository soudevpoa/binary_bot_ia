// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/framework/node_def.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/framework/attr_value.pb.h"
#include "tensorflow/core/framework/full_type.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto;
namespace tensorflow {
class NodeDef;
struct NodeDefDefaultTypeInternal;
PROTOBUF_EXPORT extern NodeDefDefaultTypeInternal _NodeDef_default_instance_;
class NodeDef_AttrEntry_DoNotUse;
struct NodeDef_AttrEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern NodeDef_AttrEntry_DoNotUseDefaultTypeInternal _NodeDef_AttrEntry_DoNotUse_default_instance_;
class NodeDef_ExperimentalDebugInfo;
struct NodeDef_ExperimentalDebugInfoDefaultTypeInternal;
PROTOBUF_EXPORT extern NodeDef_ExperimentalDebugInfoDefaultTypeInternal _NodeDef_ExperimentalDebugInfo_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT NodeDef_ExperimentalDebugInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.NodeDef.ExperimentalDebugInfo) */ {
 public:
  inline NodeDef_ExperimentalDebugInfo() : NodeDef_ExperimentalDebugInfo(nullptr) {}
  ~NodeDef_ExperimentalDebugInfo() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeDef_ExperimentalDebugInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeDef_ExperimentalDebugInfo(const NodeDef_ExperimentalDebugInfo& from) : NodeDef_ExperimentalDebugInfo(nullptr, from) {}
  inline NodeDef_ExperimentalDebugInfo(NodeDef_ExperimentalDebugInfo&& from) noexcept
      : NodeDef_ExperimentalDebugInfo(nullptr, std::move(from)) {}
  inline NodeDef_ExperimentalDebugInfo& operator=(const NodeDef_ExperimentalDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeDef_ExperimentalDebugInfo& operator=(NodeDef_ExperimentalDebugInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeDef_ExperimentalDebugInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeDef_ExperimentalDebugInfo* internal_default_instance() {
    return reinterpret_cast<const NodeDef_ExperimentalDebugInfo*>(
        &_NodeDef_ExperimentalDebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NodeDef_ExperimentalDebugInfo& a, NodeDef_ExperimentalDebugInfo& b) { a.Swap(&b); }
  inline void Swap(NodeDef_ExperimentalDebugInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeDef_ExperimentalDebugInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeDef_ExperimentalDebugInfo* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<NodeDef_ExperimentalDebugInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeDef_ExperimentalDebugInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeDef_ExperimentalDebugInfo& from) { NodeDef_ExperimentalDebugInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NodeDef_ExperimentalDebugInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.NodeDef.ExperimentalDebugInfo"; }

 protected:
  explicit NodeDef_ExperimentalDebugInfo(::google::protobuf::Arena* arena);
  NodeDef_ExperimentalDebugInfo(::google::protobuf::Arena* arena, const NodeDef_ExperimentalDebugInfo& from);
  NodeDef_ExperimentalDebugInfo(::google::protobuf::Arena* arena, NodeDef_ExperimentalDebugInfo&& from) noexcept
      : NodeDef_ExperimentalDebugInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOriginalNodeNamesFieldNumber = 1,
    kOriginalFuncNamesFieldNumber = 2,
  };
  // repeated string original_node_names = 1;
  int original_node_names_size() const;
  private:
  int _internal_original_node_names_size() const;

  public:
  void clear_original_node_names() ;
  const std::string& original_node_names(int index) const;
  std::string* mutable_original_node_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_node_names(int index, Arg_&& value, Args_... args);
  std::string* add_original_node_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_original_node_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& original_node_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_original_node_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_original_node_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_original_node_names();

  public:
  // repeated string original_func_names = 2;
  int original_func_names_size() const;
  private:
  int _internal_original_func_names_size() const;

  public:
  void clear_original_func_names() ;
  const std::string& original_func_names(int index) const;
  std::string* mutable_original_func_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_func_names(int index, Arg_&& value, Args_... args);
  std::string* add_original_func_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_original_func_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& original_func_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_original_func_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_original_func_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_original_func_names();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.NodeDef.ExperimentalDebugInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      87, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NodeDef_ExperimentalDebugInfo& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> original_node_names_;
    ::google::protobuf::RepeatedPtrField<std::string> original_func_names_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto;
};
// -------------------------------------------------------------------

class NodeDef_AttrEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          NodeDef_AttrEntry_DoNotUse, std::string, ::tensorflow::AttrValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      NodeDef_AttrEntry_DoNotUse, std::string, ::tensorflow::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  NodeDef_AttrEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeDef_AttrEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NodeDef_AttrEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NodeDef_AttrEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NodeDef_AttrEntry_DoNotUse*>(
        &_NodeDef_AttrEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      40, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT NodeDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.NodeDef) */ {
 public:
  inline NodeDef() : NodeDef(nullptr) {}
  ~NodeDef() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeDef(const NodeDef& from) : NodeDef(nullptr, from) {}
  inline NodeDef(NodeDef&& from) noexcept
      : NodeDef(nullptr, std::move(from)) {}
  inline NodeDef& operator=(const NodeDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeDef& operator=(NodeDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeDef* internal_default_instance() {
    return reinterpret_cast<const NodeDef*>(
        &_NodeDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NodeDef& a, NodeDef& b) { a.Swap(&b); }
  inline void Swap(NodeDef* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeDef* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<NodeDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeDef& from) { NodeDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NodeDef* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.NodeDef"; }

 protected:
  explicit NodeDef(::google::protobuf::Arena* arena);
  NodeDef(::google::protobuf::Arena* arena, const NodeDef& from);
  NodeDef(::google::protobuf::Arena* arena, NodeDef&& from) noexcept
      : NodeDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ExperimentalDebugInfo = NodeDef_ExperimentalDebugInfo;

  // accessors -------------------------------------------------------
  enum : int {
    kInputFieldNumber = 3,
    kAttrFieldNumber = 5,
    kNameFieldNumber = 1,
    kOpFieldNumber = 2,
    kDeviceFieldNumber = 4,
    kExperimentalDebugInfoFieldNumber = 6,
    kExperimentalTypeFieldNumber = 7,
  };
  // repeated string input = 3;
  int input_size() const;
  private:
  int _internal_input_size() const;

  public:
  void clear_input() ;
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input(int index, Arg_&& value, Args_... args);
  std::string* add_input();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_input(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& input() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_input();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_input() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_input();

  public:
  // map<string, .tensorflow.AttrValue> attr = 5;
  int attr_size() const;
  private:
  int _internal_attr_size() const;

  public:
  void clear_attr() ;
  const ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>& attr() const;
  ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>* mutable_attr();

  private:
  const ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>& _internal_attr() const;
  ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>* _internal_mutable_attr();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string op = 2;
  void clear_op() ;
  const std::string& op() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_op(Arg_&& arg, Args_... args);
  std::string* mutable_op();
  PROTOBUF_NODISCARD std::string* release_op();
  void set_allocated_op(std::string* value);

  private:
  const std::string& _internal_op() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(
      const std::string& value);
  std::string* _internal_mutable_op();

  public:
  // string device = 4;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* value);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // .tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;
  bool has_experimental_debug_info() const;
  void clear_experimental_debug_info() ;
  const ::tensorflow::NodeDef_ExperimentalDebugInfo& experimental_debug_info() const;
  PROTOBUF_NODISCARD ::tensorflow::NodeDef_ExperimentalDebugInfo* release_experimental_debug_info();
  ::tensorflow::NodeDef_ExperimentalDebugInfo* mutable_experimental_debug_info();
  void set_allocated_experimental_debug_info(::tensorflow::NodeDef_ExperimentalDebugInfo* value);
  void unsafe_arena_set_allocated_experimental_debug_info(::tensorflow::NodeDef_ExperimentalDebugInfo* value);
  ::tensorflow::NodeDef_ExperimentalDebugInfo* unsafe_arena_release_experimental_debug_info();

  private:
  const ::tensorflow::NodeDef_ExperimentalDebugInfo& _internal_experimental_debug_info() const;
  ::tensorflow::NodeDef_ExperimentalDebugInfo* _internal_mutable_experimental_debug_info();

  public:
  // .tensorflow.FullTypeDef experimental_type = 7;
  bool has_experimental_type() const;
  void clear_experimental_type() ;
  const ::tensorflow::FullTypeDef& experimental_type() const;
  PROTOBUF_NODISCARD ::tensorflow::FullTypeDef* release_experimental_type();
  ::tensorflow::FullTypeDef* mutable_experimental_type();
  void set_allocated_experimental_type(::tensorflow::FullTypeDef* value);
  void unsafe_arena_set_allocated_experimental_type(::tensorflow::FullTypeDef* value);
  ::tensorflow::FullTypeDef* unsafe_arena_release_experimental_type();

  private:
  const ::tensorflow::FullTypeDef& _internal_experimental_type() const;
  ::tensorflow::FullTypeDef* _internal_mutable_experimental_type();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.NodeDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 4,
      48, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NodeDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> input_;
    ::google::protobuf::internal::MapField<NodeDef_AttrEntry_DoNotUse, std::string, ::tensorflow::AttrValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        attr_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr op_;
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::tensorflow::NodeDef_ExperimentalDebugInfo* experimental_debug_info_;
    ::tensorflow::FullTypeDef* experimental_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeDef_ExperimentalDebugInfo

// repeated string original_node_names = 1;
inline int NodeDef_ExperimentalDebugInfo::_internal_original_node_names_size() const {
  return _internal_original_node_names().size();
}
inline int NodeDef_ExperimentalDebugInfo::original_node_names_size() const {
  return _internal_original_node_names_size();
}
inline void NodeDef_ExperimentalDebugInfo::clear_original_node_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_node_names_.Clear();
}
inline std::string* NodeDef_ExperimentalDebugInfo::add_original_node_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_original_node_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return _s;
}
inline const std::string& NodeDef_ExperimentalDebugInfo::original_node_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return _internal_original_node_names().Get(index);
}
inline std::string* NodeDef_ExperimentalDebugInfo::mutable_original_node_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return _internal_mutable_original_node_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NodeDef_ExperimentalDebugInfo::set_original_node_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_original_node_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
}
template <typename Arg_, typename... Args_>
inline void NodeDef_ExperimentalDebugInfo::add_original_node_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_original_node_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NodeDef_ExperimentalDebugInfo::original_node_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return _internal_original_node_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NodeDef_ExperimentalDebugInfo::mutable_original_node_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_original_node_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NodeDef_ExperimentalDebugInfo::_internal_original_node_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.original_node_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NodeDef_ExperimentalDebugInfo::_internal_mutable_original_node_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.original_node_names_;
}

// repeated string original_func_names = 2;
inline int NodeDef_ExperimentalDebugInfo::_internal_original_func_names_size() const {
  return _internal_original_func_names().size();
}
inline int NodeDef_ExperimentalDebugInfo::original_func_names_size() const {
  return _internal_original_func_names_size();
}
inline void NodeDef_ExperimentalDebugInfo::clear_original_func_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_func_names_.Clear();
}
inline std::string* NodeDef_ExperimentalDebugInfo::add_original_func_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_original_func_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return _s;
}
inline const std::string& NodeDef_ExperimentalDebugInfo::original_func_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return _internal_original_func_names().Get(index);
}
inline std::string* NodeDef_ExperimentalDebugInfo::mutable_original_func_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return _internal_mutable_original_func_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NodeDef_ExperimentalDebugInfo::set_original_func_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_original_func_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
}
template <typename Arg_, typename... Args_>
inline void NodeDef_ExperimentalDebugInfo::add_original_func_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_original_func_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NodeDef_ExperimentalDebugInfo::original_func_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return _internal_original_func_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NodeDef_ExperimentalDebugInfo::mutable_original_func_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_original_func_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NodeDef_ExperimentalDebugInfo::_internal_original_func_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.original_func_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NodeDef_ExperimentalDebugInfo::_internal_mutable_original_func_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.original_func_names_;
}

// -------------------------------------------------------------------

// NodeDef

// string name = 1;
inline void NodeDef::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NodeDef::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NodeDef::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.name)
}
inline std::string* NodeDef::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.name)
  return _s;
}
inline const std::string& NodeDef::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NodeDef::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NodeDef::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NodeDef::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.name)
  return _impl_.name_.Release();
}
inline void NodeDef::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.name)
}

// string op = 2;
inline void NodeDef::clear_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_.ClearToEmpty();
}
inline const std::string& NodeDef::op() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.op)
  return _internal_op();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NodeDef::set_op(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.op)
}
inline std::string* NodeDef::mutable_op() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.op)
  return _s;
}
inline const std::string& NodeDef::_internal_op() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_.Get();
}
inline void NodeDef::_internal_set_op(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_.Set(value, GetArena());
}
inline std::string* NodeDef::_internal_mutable_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.op_.Mutable( GetArena());
}
inline std::string* NodeDef::release_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.op)
  return _impl_.op_.Release();
}
inline void NodeDef::set_allocated_op(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.op_.IsDefault()) {
          _impl_.op_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.op)
}

// repeated string input = 3;
inline int NodeDef::_internal_input_size() const {
  return _internal_input().size();
}
inline int NodeDef::input_size() const {
  return _internal_input_size();
}
inline void NodeDef::clear_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_.Clear();
}
inline std::string* NodeDef::add_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_input()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.NodeDef.input)
  return _s;
}
inline const std::string& NodeDef::input(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.input)
  return _internal_input().Get(index);
}
inline std::string* NodeDef::mutable_input(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.input)
  return _internal_mutable_input()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NodeDef::set_input(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_input()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.input)
}
template <typename Arg_, typename... Args_>
inline void NodeDef::add_input(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_input(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.NodeDef.input)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NodeDef::input() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.NodeDef.input)
  return _internal_input();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NodeDef::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeDef.input)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_input();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NodeDef::_internal_input() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NodeDef::_internal_mutable_input() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.input_;
}

// string device = 4;
inline void NodeDef::clear_device() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_.ClearToEmpty();
}
inline const std::string& NodeDef::device() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NodeDef::set_device(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.device)
}
inline std::string* NodeDef::mutable_device() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.device)
  return _s;
}
inline const std::string& NodeDef::_internal_device() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_.Get();
}
inline void NodeDef::_internal_set_device(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_.Set(value, GetArena());
}
inline std::string* NodeDef::_internal_mutable_device() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_.Mutable( GetArena());
}
inline std::string* NodeDef::release_device() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.device)
  return _impl_.device_.Release();
}
inline void NodeDef::set_allocated_device(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.device)
}

// map<string, .tensorflow.AttrValue> attr = 5;
inline int NodeDef::_internal_attr_size() const {
  return _internal_attr().size();
}
inline int NodeDef::attr_size() const {
  return _internal_attr_size();
}
inline const ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>& NodeDef::_internal_attr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attr_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>& NodeDef::attr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.NodeDef.attr)
  return _internal_attr();
}
inline ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>* NodeDef::_internal_mutable_attr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attr_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>* NodeDef::mutable_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.NodeDef.attr)
  return _internal_mutable_attr();
}

// .tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;
inline bool NodeDef::has_experimental_debug_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.experimental_debug_info_ != nullptr);
  return value;
}
inline void NodeDef::clear_experimental_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_debug_info_ != nullptr) _impl_.experimental_debug_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::NodeDef_ExperimentalDebugInfo& NodeDef::_internal_experimental_debug_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::NodeDef_ExperimentalDebugInfo* p = _impl_.experimental_debug_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::NodeDef_ExperimentalDebugInfo&>(::tensorflow::_NodeDef_ExperimentalDebugInfo_default_instance_);
}
inline const ::tensorflow::NodeDef_ExperimentalDebugInfo& NodeDef::experimental_debug_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.experimental_debug_info)
  return _internal_experimental_debug_info();
}
inline void NodeDef::unsafe_arena_set_allocated_experimental_debug_info(::tensorflow::NodeDef_ExperimentalDebugInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.experimental_debug_info_);
  }
  _impl_.experimental_debug_info_ = reinterpret_cast<::tensorflow::NodeDef_ExperimentalDebugInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeDef.experimental_debug_info)
}
inline ::tensorflow::NodeDef_ExperimentalDebugInfo* NodeDef::release_experimental_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::NodeDef_ExperimentalDebugInfo* released = _impl_.experimental_debug_info_;
  _impl_.experimental_debug_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::NodeDef_ExperimentalDebugInfo* NodeDef::unsafe_arena_release_experimental_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.experimental_debug_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::NodeDef_ExperimentalDebugInfo* temp = _impl_.experimental_debug_info_;
  _impl_.experimental_debug_info_ = nullptr;
  return temp;
}
inline ::tensorflow::NodeDef_ExperimentalDebugInfo* NodeDef::_internal_mutable_experimental_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_debug_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::NodeDef_ExperimentalDebugInfo>(GetArena());
    _impl_.experimental_debug_info_ = reinterpret_cast<::tensorflow::NodeDef_ExperimentalDebugInfo*>(p);
  }
  return _impl_.experimental_debug_info_;
}
inline ::tensorflow::NodeDef_ExperimentalDebugInfo* NodeDef::mutable_experimental_debug_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::NodeDef_ExperimentalDebugInfo* _msg = _internal_mutable_experimental_debug_info();
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.experimental_debug_info)
  return _msg;
}
inline void NodeDef::set_allocated_experimental_debug_info(::tensorflow::NodeDef_ExperimentalDebugInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.experimental_debug_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.experimental_debug_info_ = reinterpret_cast<::tensorflow::NodeDef_ExperimentalDebugInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.experimental_debug_info)
}

// .tensorflow.FullTypeDef experimental_type = 7;
inline bool NodeDef::has_experimental_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.experimental_type_ != nullptr);
  return value;
}
inline const ::tensorflow::FullTypeDef& NodeDef::_internal_experimental_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::FullTypeDef* p = _impl_.experimental_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::FullTypeDef&>(::tensorflow::_FullTypeDef_default_instance_);
}
inline const ::tensorflow::FullTypeDef& NodeDef::experimental_type() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.experimental_type)
  return _internal_experimental_type();
}
inline void NodeDef::unsafe_arena_set_allocated_experimental_type(::tensorflow::FullTypeDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.experimental_type_);
  }
  _impl_.experimental_type_ = reinterpret_cast<::tensorflow::FullTypeDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeDef.experimental_type)
}
inline ::tensorflow::FullTypeDef* NodeDef::release_experimental_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::FullTypeDef* released = _impl_.experimental_type_;
  _impl_.experimental_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::FullTypeDef* NodeDef::unsafe_arena_release_experimental_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.experimental_type)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::FullTypeDef* temp = _impl_.experimental_type_;
  _impl_.experimental_type_ = nullptr;
  return temp;
}
inline ::tensorflow::FullTypeDef* NodeDef::_internal_mutable_experimental_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_type_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::FullTypeDef>(GetArena());
    _impl_.experimental_type_ = reinterpret_cast<::tensorflow::FullTypeDef*>(p);
  }
  return _impl_.experimental_type_;
}
inline ::tensorflow::FullTypeDef* NodeDef::mutable_experimental_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::FullTypeDef* _msg = _internal_mutable_experimental_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.experimental_type)
  return _msg;
}
inline void NodeDef::set_allocated_experimental_type(::tensorflow::FullTypeDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.experimental_type_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.experimental_type_ = reinterpret_cast<::tensorflow::FullTypeDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.experimental_type)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto_2epb_2eh
