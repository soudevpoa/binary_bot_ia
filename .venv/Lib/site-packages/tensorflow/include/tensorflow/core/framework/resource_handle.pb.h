// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/framework/resource_handle.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fresource_5fhandle_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fresource_5fhandle_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fresource_5fhandle_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fframework_2fresource_5fhandle_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fframework_2fresource_5fhandle_2eproto;
namespace tensorflow {
class ResourceHandleProto;
struct ResourceHandleProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern ResourceHandleProtoDefaultTypeInternal _ResourceHandleProto_default_instance_;
class ResourceHandleProto_DtypeAndShape;
struct ResourceHandleProto_DtypeAndShapeDefaultTypeInternal;
PROTOBUF_EXPORT extern ResourceHandleProto_DtypeAndShapeDefaultTypeInternal _ResourceHandleProto_DtypeAndShape_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT ResourceHandleProto_DtypeAndShape final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.ResourceHandleProto.DtypeAndShape) */ {
 public:
  inline ResourceHandleProto_DtypeAndShape() : ResourceHandleProto_DtypeAndShape(nullptr) {}
  ~ResourceHandleProto_DtypeAndShape() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceHandleProto_DtypeAndShape(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceHandleProto_DtypeAndShape(const ResourceHandleProto_DtypeAndShape& from) : ResourceHandleProto_DtypeAndShape(nullptr, from) {}
  inline ResourceHandleProto_DtypeAndShape(ResourceHandleProto_DtypeAndShape&& from) noexcept
      : ResourceHandleProto_DtypeAndShape(nullptr, std::move(from)) {}
  inline ResourceHandleProto_DtypeAndShape& operator=(const ResourceHandleProto_DtypeAndShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceHandleProto_DtypeAndShape& operator=(ResourceHandleProto_DtypeAndShape&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceHandleProto_DtypeAndShape& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceHandleProto_DtypeAndShape* internal_default_instance() {
    return reinterpret_cast<const ResourceHandleProto_DtypeAndShape*>(
        &_ResourceHandleProto_DtypeAndShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ResourceHandleProto_DtypeAndShape& a, ResourceHandleProto_DtypeAndShape& b) { a.Swap(&b); }
  inline void Swap(ResourceHandleProto_DtypeAndShape* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceHandleProto_DtypeAndShape* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceHandleProto_DtypeAndShape* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ResourceHandleProto_DtypeAndShape>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceHandleProto_DtypeAndShape& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceHandleProto_DtypeAndShape& from) { ResourceHandleProto_DtypeAndShape::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResourceHandleProto_DtypeAndShape* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.ResourceHandleProto.DtypeAndShape"; }

 protected:
  explicit ResourceHandleProto_DtypeAndShape(::google::protobuf::Arena* arena);
  ResourceHandleProto_DtypeAndShape(::google::protobuf::Arena* arena, const ResourceHandleProto_DtypeAndShape& from);
  ResourceHandleProto_DtypeAndShape(::google::protobuf::Arena* arena, ResourceHandleProto_DtypeAndShape&& from) noexcept
      : ResourceHandleProto_DtypeAndShape(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kShapeFieldNumber = 2,
    kDtypeFieldNumber = 1,
  };
  // .tensorflow.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape() ;
  const ::tensorflow::TensorShapeProto& shape() const;
  PROTOBUF_NODISCARD ::tensorflow::TensorShapeProto* release_shape();
  ::tensorflow::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* value);
  void unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* value);
  ::tensorflow::TensorShapeProto* unsafe_arena_release_shape();

  private:
  const ::tensorflow::TensorShapeProto& _internal_shape() const;
  ::tensorflow::TensorShapeProto* _internal_mutable_shape();

  public:
  // .tensorflow.DataType dtype = 1;
  void clear_dtype() ;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  private:
  ::tensorflow::DataType _internal_dtype() const;
  void _internal_set_dtype(::tensorflow::DataType value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.ResourceHandleProto.DtypeAndShape)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResourceHandleProto_DtypeAndShape& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::TensorShapeProto* shape_;
    int dtype_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fresource_5fhandle_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ResourceHandleProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.ResourceHandleProto) */ {
 public:
  inline ResourceHandleProto() : ResourceHandleProto(nullptr) {}
  ~ResourceHandleProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceHandleProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceHandleProto(const ResourceHandleProto& from) : ResourceHandleProto(nullptr, from) {}
  inline ResourceHandleProto(ResourceHandleProto&& from) noexcept
      : ResourceHandleProto(nullptr, std::move(from)) {}
  inline ResourceHandleProto& operator=(const ResourceHandleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceHandleProto& operator=(ResourceHandleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceHandleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceHandleProto* internal_default_instance() {
    return reinterpret_cast<const ResourceHandleProto*>(
        &_ResourceHandleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResourceHandleProto& a, ResourceHandleProto& b) { a.Swap(&b); }
  inline void Swap(ResourceHandleProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceHandleProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceHandleProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ResourceHandleProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceHandleProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceHandleProto& from) { ResourceHandleProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResourceHandleProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.ResourceHandleProto"; }

 protected:
  explicit ResourceHandleProto(::google::protobuf::Arena* arena);
  ResourceHandleProto(::google::protobuf::Arena* arena, const ResourceHandleProto& from);
  ResourceHandleProto(::google::protobuf::Arena* arena, ResourceHandleProto&& from) noexcept
      : ResourceHandleProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using DtypeAndShape = ResourceHandleProto_DtypeAndShape;

  // accessors -------------------------------------------------------
  enum : int {
    kDtypesAndShapesFieldNumber = 6,
    kDeviceFieldNumber = 1,
    kContainerFieldNumber = 2,
    kNameFieldNumber = 3,
    kMaybeTypeNameFieldNumber = 5,
    kHashCodeFieldNumber = 4,
  };
  // repeated .tensorflow.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;
  int dtypes_and_shapes_size() const;
  private:
  int _internal_dtypes_and_shapes_size() const;

  public:
  void clear_dtypes_and_shapes() ;
  ::tensorflow::ResourceHandleProto_DtypeAndShape* mutable_dtypes_and_shapes(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::ResourceHandleProto_DtypeAndShape>* mutable_dtypes_and_shapes();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::ResourceHandleProto_DtypeAndShape>& _internal_dtypes_and_shapes() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::ResourceHandleProto_DtypeAndShape>* _internal_mutable_dtypes_and_shapes();
  public:
  const ::tensorflow::ResourceHandleProto_DtypeAndShape& dtypes_and_shapes(int index) const;
  ::tensorflow::ResourceHandleProto_DtypeAndShape* add_dtypes_and_shapes();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::ResourceHandleProto_DtypeAndShape>& dtypes_and_shapes() const;
  // string device = 1;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* value);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // string container = 2;
  void clear_container() ;
  const std::string& container() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_container(Arg_&& arg, Args_... args);
  std::string* mutable_container();
  PROTOBUF_NODISCARD std::string* release_container();
  void set_allocated_container(std::string* value);

  private:
  const std::string& _internal_container() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container(
      const std::string& value);
  std::string* _internal_mutable_container();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string maybe_type_name = 5;
  void clear_maybe_type_name() ;
  const std::string& maybe_type_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_maybe_type_name(Arg_&& arg, Args_... args);
  std::string* mutable_maybe_type_name();
  PROTOBUF_NODISCARD std::string* release_maybe_type_name();
  void set_allocated_maybe_type_name(std::string* value);

  private:
  const std::string& _internal_maybe_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maybe_type_name(
      const std::string& value);
  std::string* _internal_mutable_maybe_type_name();

  public:
  // uint64 hash_code = 4;
  void clear_hash_code() ;
  ::uint64_t hash_code() const;
  void set_hash_code(::uint64_t value);

  private:
  ::uint64_t _internal_hash_code() const;
  void _internal_set_hash_code(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.ResourceHandleProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      73, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResourceHandleProto& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::ResourceHandleProto_DtypeAndShape > dtypes_and_shapes_;
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr container_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr maybe_type_name_;
    ::uint64_t hash_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fresource_5fhandle_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ResourceHandleProto_DtypeAndShape

// .tensorflow.DataType dtype = 1;
inline void ResourceHandleProto_DtypeAndShape::clear_dtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dtype_ = 0;
}
inline ::tensorflow::DataType ResourceHandleProto_DtypeAndShape::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.ResourceHandleProto.DtypeAndShape.dtype)
  return _internal_dtype();
}
inline void ResourceHandleProto_DtypeAndShape::set_dtype(::tensorflow::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:tensorflow.ResourceHandleProto.DtypeAndShape.dtype)
}
inline ::tensorflow::DataType ResourceHandleProto_DtypeAndShape::_internal_dtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::DataType>(_impl_.dtype_);
}
inline void ResourceHandleProto_DtypeAndShape::_internal_set_dtype(::tensorflow::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dtype_ = value;
}

// .tensorflow.TensorShapeProto shape = 2;
inline bool ResourceHandleProto_DtypeAndShape::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorShapeProto& ResourceHandleProto_DtypeAndShape::_internal_shape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorShapeProto* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorShapeProto&>(::tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::tensorflow::TensorShapeProto& ResourceHandleProto_DtypeAndShape::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ResourceHandleProto.DtypeAndShape.shape)
  return _internal_shape();
}
inline void ResourceHandleProto_DtypeAndShape::unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ResourceHandleProto.DtypeAndShape.shape)
}
inline ::tensorflow::TensorShapeProto* ResourceHandleProto_DtypeAndShape::release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::TensorShapeProto* ResourceHandleProto_DtypeAndShape::unsafe_arena_release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ResourceHandleProto.DtypeAndShape.shape)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* ResourceHandleProto_DtypeAndShape::_internal_mutable_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorShapeProto>(GetArena());
    _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(p);
  }
  return _impl_.shape_;
}
inline ::tensorflow::TensorShapeProto* ResourceHandleProto_DtypeAndShape::mutable_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::TensorShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.ResourceHandleProto.DtypeAndShape.shape)
  return _msg;
}
inline void ResourceHandleProto_DtypeAndShape::set_allocated_shape(::tensorflow::TensorShapeProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ResourceHandleProto.DtypeAndShape.shape)
}

// -------------------------------------------------------------------

// ResourceHandleProto

// string device = 1;
inline void ResourceHandleProto::clear_device() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_.ClearToEmpty();
}
inline const std::string& ResourceHandleProto::device() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ResourceHandleProto.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceHandleProto::set_device(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.ResourceHandleProto.device)
}
inline std::string* ResourceHandleProto::mutable_device() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:tensorflow.ResourceHandleProto.device)
  return _s;
}
inline const std::string& ResourceHandleProto::_internal_device() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_.Get();
}
inline void ResourceHandleProto::_internal_set_device(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_.Set(value, GetArena());
}
inline std::string* ResourceHandleProto::_internal_mutable_device() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_.Mutable( GetArena());
}
inline std::string* ResourceHandleProto::release_device() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ResourceHandleProto.device)
  return _impl_.device_.Release();
}
inline void ResourceHandleProto::set_allocated_device(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ResourceHandleProto.device)
}

// string container = 2;
inline void ResourceHandleProto::clear_container() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.container_.ClearToEmpty();
}
inline const std::string& ResourceHandleProto::container() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ResourceHandleProto.container)
  return _internal_container();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceHandleProto::set_container(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.container_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.ResourceHandleProto.container)
}
inline std::string* ResourceHandleProto::mutable_container() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:tensorflow.ResourceHandleProto.container)
  return _s;
}
inline const std::string& ResourceHandleProto::_internal_container() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.container_.Get();
}
inline void ResourceHandleProto::_internal_set_container(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.container_.Set(value, GetArena());
}
inline std::string* ResourceHandleProto::_internal_mutable_container() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.container_.Mutable( GetArena());
}
inline std::string* ResourceHandleProto::release_container() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ResourceHandleProto.container)
  return _impl_.container_.Release();
}
inline void ResourceHandleProto::set_allocated_container(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.container_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.container_.IsDefault()) {
          _impl_.container_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ResourceHandleProto.container)
}

// string name = 3;
inline void ResourceHandleProto::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ResourceHandleProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ResourceHandleProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceHandleProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.ResourceHandleProto.name)
}
inline std::string* ResourceHandleProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.ResourceHandleProto.name)
  return _s;
}
inline const std::string& ResourceHandleProto::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ResourceHandleProto::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ResourceHandleProto::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ResourceHandleProto::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ResourceHandleProto.name)
  return _impl_.name_.Release();
}
inline void ResourceHandleProto::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ResourceHandleProto.name)
}

// uint64 hash_code = 4;
inline void ResourceHandleProto::clear_hash_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_code_ = ::uint64_t{0u};
}
inline ::uint64_t ResourceHandleProto::hash_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.ResourceHandleProto.hash_code)
  return _internal_hash_code();
}
inline void ResourceHandleProto::set_hash_code(::uint64_t value) {
  _internal_set_hash_code(value);
  // @@protoc_insertion_point(field_set:tensorflow.ResourceHandleProto.hash_code)
}
inline ::uint64_t ResourceHandleProto::_internal_hash_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_code_;
}
inline void ResourceHandleProto::_internal_set_hash_code(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_code_ = value;
}

// string maybe_type_name = 5;
inline void ResourceHandleProto::clear_maybe_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maybe_type_name_.ClearToEmpty();
}
inline const std::string& ResourceHandleProto::maybe_type_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ResourceHandleProto.maybe_type_name)
  return _internal_maybe_type_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceHandleProto::set_maybe_type_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maybe_type_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.ResourceHandleProto.maybe_type_name)
}
inline std::string* ResourceHandleProto::mutable_maybe_type_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_maybe_type_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.ResourceHandleProto.maybe_type_name)
  return _s;
}
inline const std::string& ResourceHandleProto::_internal_maybe_type_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maybe_type_name_.Get();
}
inline void ResourceHandleProto::_internal_set_maybe_type_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maybe_type_name_.Set(value, GetArena());
}
inline std::string* ResourceHandleProto::_internal_mutable_maybe_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.maybe_type_name_.Mutable( GetArena());
}
inline std::string* ResourceHandleProto::release_maybe_type_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ResourceHandleProto.maybe_type_name)
  return _impl_.maybe_type_name_.Release();
}
inline void ResourceHandleProto::set_allocated_maybe_type_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maybe_type_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.maybe_type_name_.IsDefault()) {
          _impl_.maybe_type_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ResourceHandleProto.maybe_type_name)
}

// repeated .tensorflow.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;
inline int ResourceHandleProto::_internal_dtypes_and_shapes_size() const {
  return _internal_dtypes_and_shapes().size();
}
inline int ResourceHandleProto::dtypes_and_shapes_size() const {
  return _internal_dtypes_and_shapes_size();
}
inline void ResourceHandleProto::clear_dtypes_and_shapes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dtypes_and_shapes_.Clear();
}
inline ::tensorflow::ResourceHandleProto_DtypeAndShape* ResourceHandleProto::mutable_dtypes_and_shapes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.ResourceHandleProto.dtypes_and_shapes)
  return _internal_mutable_dtypes_and_shapes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::ResourceHandleProto_DtypeAndShape>* ResourceHandleProto::mutable_dtypes_and_shapes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ResourceHandleProto.dtypes_and_shapes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dtypes_and_shapes();
}
inline const ::tensorflow::ResourceHandleProto_DtypeAndShape& ResourceHandleProto::dtypes_and_shapes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ResourceHandleProto.dtypes_and_shapes)
  return _internal_dtypes_and_shapes().Get(index);
}
inline ::tensorflow::ResourceHandleProto_DtypeAndShape* ResourceHandleProto::add_dtypes_and_shapes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::ResourceHandleProto_DtypeAndShape* _add = _internal_mutable_dtypes_and_shapes()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.ResourceHandleProto.dtypes_and_shapes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::ResourceHandleProto_DtypeAndShape>& ResourceHandleProto::dtypes_and_shapes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.ResourceHandleProto.dtypes_and_shapes)
  return _internal_dtypes_and_shapes();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::ResourceHandleProto_DtypeAndShape>&
ResourceHandleProto::_internal_dtypes_and_shapes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dtypes_and_shapes_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::ResourceHandleProto_DtypeAndShape>*
ResourceHandleProto::_internal_mutable_dtypes_and_shapes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dtypes_and_shapes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fresource_5fhandle_2eproto_2epb_2eh
