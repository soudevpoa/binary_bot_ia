// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/config.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "xla/tsl/protobuf/coordination_config.pb.h"
#include "tensorflow/core/framework/cost_graph.pb.h"
#include "tensorflow/core/framework/graph.pb.h"
#include "tensorflow/core/framework/step_stats.pb.h"
#include "tensorflow/core/protobuf/cluster.pb.h"
#include "tensorflow/core/protobuf/debug.pb.h"
#include "tensorflow/core/protobuf/rewriter_config.pb.h"
#include "tensorflow/core/protobuf/rpc_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
namespace tensorflow {
class BatchingOptions;
struct BatchingOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern BatchingOptionsDefaultTypeInternal _BatchingOptions_default_instance_;
class CallableOptions;
struct CallableOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern CallableOptionsDefaultTypeInternal _CallableOptions_default_instance_;
class CallableOptions_FeedDevicesEntry_DoNotUse;
struct CallableOptions_FeedDevicesEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern CallableOptions_FeedDevicesEntry_DoNotUseDefaultTypeInternal _CallableOptions_FeedDevicesEntry_DoNotUse_default_instance_;
class CallableOptions_FetchDevicesEntry_DoNotUse;
struct CallableOptions_FetchDevicesEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern CallableOptions_FetchDevicesEntry_DoNotUseDefaultTypeInternal _CallableOptions_FetchDevicesEntry_DoNotUse_default_instance_;
class ConfigProto;
struct ConfigProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern ConfigProtoDefaultTypeInternal _ConfigProto_default_instance_;
class ConfigProto_DeviceCountEntry_DoNotUse;
struct ConfigProto_DeviceCountEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern ConfigProto_DeviceCountEntry_DoNotUseDefaultTypeInternal _ConfigProto_DeviceCountEntry_DoNotUse_default_instance_;
class ConfigProto_Experimental;
struct ConfigProto_ExperimentalDefaultTypeInternal;
PROTOBUF_EXPORT extern ConfigProto_ExperimentalDefaultTypeInternal _ConfigProto_Experimental_default_instance_;
class GPUOptions;
struct GPUOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern GPUOptionsDefaultTypeInternal _GPUOptions_default_instance_;
class GPUOptions_Experimental;
struct GPUOptions_ExperimentalDefaultTypeInternal;
PROTOBUF_EXPORT extern GPUOptions_ExperimentalDefaultTypeInternal _GPUOptions_Experimental_default_instance_;
class GPUOptions_Experimental_StreamMergeOptions;
struct GPUOptions_Experimental_StreamMergeOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern GPUOptions_Experimental_StreamMergeOptionsDefaultTypeInternal _GPUOptions_Experimental_StreamMergeOptions_default_instance_;
class GPUOptions_Experimental_VirtualDevices;
struct GPUOptions_Experimental_VirtualDevicesDefaultTypeInternal;
PROTOBUF_EXPORT extern GPUOptions_Experimental_VirtualDevicesDefaultTypeInternal _GPUOptions_Experimental_VirtualDevices_default_instance_;
class GraphOptions;
struct GraphOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern GraphOptionsDefaultTypeInternal _GraphOptions_default_instance_;
class OptimizerOptions;
struct OptimizerOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern OptimizerOptionsDefaultTypeInternal _OptimizerOptions_default_instance_;
class RunMetadata;
struct RunMetadataDefaultTypeInternal;
PROTOBUF_EXPORT extern RunMetadataDefaultTypeInternal _RunMetadata_default_instance_;
class RunMetadata_FunctionGraphs;
struct RunMetadata_FunctionGraphsDefaultTypeInternal;
PROTOBUF_EXPORT extern RunMetadata_FunctionGraphsDefaultTypeInternal _RunMetadata_FunctionGraphs_default_instance_;
class RunOptions;
struct RunOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern RunOptionsDefaultTypeInternal _RunOptions_default_instance_;
class RunOptions_Experimental;
struct RunOptions_ExperimentalDefaultTypeInternal;
PROTOBUF_EXPORT extern RunOptions_ExperimentalDefaultTypeInternal _RunOptions_Experimental_default_instance_;
class RunOptions_Experimental_RunHandlerPoolOptions;
struct RunOptions_Experimental_RunHandlerPoolOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern RunOptions_Experimental_RunHandlerPoolOptionsDefaultTypeInternal _RunOptions_Experimental_RunHandlerPoolOptions_default_instance_;
class SessionMetadata;
struct SessionMetadataDefaultTypeInternal;
PROTOBUF_EXPORT extern SessionMetadataDefaultTypeInternal _SessionMetadata_default_instance_;
class TensorConnection;
struct TensorConnectionDefaultTypeInternal;
PROTOBUF_EXPORT extern TensorConnectionDefaultTypeInternal _TensorConnection_default_instance_;
class ThreadPoolOptionProto;
struct ThreadPoolOptionProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern ThreadPoolOptionProtoDefaultTypeInternal _ThreadPoolOptionProto_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
enum OptimizerOptions_Level : int {
  OptimizerOptions_Level_L1 = 0,
  OptimizerOptions_Level_L0 = -1,
  OptimizerOptions_Level_OptimizerOptions_Level_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OptimizerOptions_Level_OptimizerOptions_Level_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool OptimizerOptions_Level_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t OptimizerOptions_Level_internal_data_[];
constexpr OptimizerOptions_Level OptimizerOptions_Level_Level_MIN = static_cast<OptimizerOptions_Level>(-1);
constexpr OptimizerOptions_Level OptimizerOptions_Level_Level_MAX = static_cast<OptimizerOptions_Level>(0);
constexpr int OptimizerOptions_Level_Level_ARRAYSIZE = 0 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
OptimizerOptions_Level_descriptor();
template <typename T>
const std::string& OptimizerOptions_Level_Name(T value) {
  static_assert(std::is_same<T, OptimizerOptions_Level>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Level_Name().");
  return OptimizerOptions_Level_Name(static_cast<OptimizerOptions_Level>(value));
}
template <>
inline const std::string& OptimizerOptions_Level_Name(OptimizerOptions_Level value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OptimizerOptions_Level_descriptor,
                                                 -1, 0>(
      static_cast<int>(value));
}
inline bool OptimizerOptions_Level_Parse(absl::string_view name, OptimizerOptions_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptimizerOptions_Level>(
      OptimizerOptions_Level_descriptor(), name, value);
}
enum OptimizerOptions_GlobalJitLevel : int {
  OptimizerOptions_GlobalJitLevel_DEFAULT = 0,
  OptimizerOptions_GlobalJitLevel_OFF = -1,
  OptimizerOptions_GlobalJitLevel_ON_1 = 1,
  OptimizerOptions_GlobalJitLevel_ON_2 = 2,
  OptimizerOptions_GlobalJitLevel_OptimizerOptions_GlobalJitLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OptimizerOptions_GlobalJitLevel_OptimizerOptions_GlobalJitLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool OptimizerOptions_GlobalJitLevel_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t OptimizerOptions_GlobalJitLevel_internal_data_[];
constexpr OptimizerOptions_GlobalJitLevel OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MIN = static_cast<OptimizerOptions_GlobalJitLevel>(-1);
constexpr OptimizerOptions_GlobalJitLevel OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MAX = static_cast<OptimizerOptions_GlobalJitLevel>(2);
constexpr int OptimizerOptions_GlobalJitLevel_GlobalJitLevel_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
OptimizerOptions_GlobalJitLevel_descriptor();
template <typename T>
const std::string& OptimizerOptions_GlobalJitLevel_Name(T value) {
  static_assert(std::is_same<T, OptimizerOptions_GlobalJitLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GlobalJitLevel_Name().");
  return OptimizerOptions_GlobalJitLevel_Name(static_cast<OptimizerOptions_GlobalJitLevel>(value));
}
template <>
inline const std::string& OptimizerOptions_GlobalJitLevel_Name(OptimizerOptions_GlobalJitLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OptimizerOptions_GlobalJitLevel_descriptor,
                                                 -1, 2>(
      static_cast<int>(value));
}
inline bool OptimizerOptions_GlobalJitLevel_Parse(absl::string_view name, OptimizerOptions_GlobalJitLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptimizerOptions_GlobalJitLevel>(
      OptimizerOptions_GlobalJitLevel_descriptor(), name, value);
}
enum ConfigProto_Experimental_MlirBridgeRollout : int {
  ConfigProto_Experimental_MlirBridgeRollout_MLIR_BRIDGE_ROLLOUT_UNSPECIFIED = 0,
  ConfigProto_Experimental_MlirBridgeRollout_MLIR_BRIDGE_ROLLOUT_ENABLED = 1,
  ConfigProto_Experimental_MlirBridgeRollout_MLIR_BRIDGE_ROLLOUT_DISABLED = 2,
  ConfigProto_Experimental_MlirBridgeRollout_ConfigProto_Experimental_MlirBridgeRollout_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConfigProto_Experimental_MlirBridgeRollout_ConfigProto_Experimental_MlirBridgeRollout_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool ConfigProto_Experimental_MlirBridgeRollout_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t ConfigProto_Experimental_MlirBridgeRollout_internal_data_[];
constexpr ConfigProto_Experimental_MlirBridgeRollout ConfigProto_Experimental_MlirBridgeRollout_MlirBridgeRollout_MIN = static_cast<ConfigProto_Experimental_MlirBridgeRollout>(0);
constexpr ConfigProto_Experimental_MlirBridgeRollout ConfigProto_Experimental_MlirBridgeRollout_MlirBridgeRollout_MAX = static_cast<ConfigProto_Experimental_MlirBridgeRollout>(2);
constexpr int ConfigProto_Experimental_MlirBridgeRollout_MlirBridgeRollout_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
ConfigProto_Experimental_MlirBridgeRollout_descriptor();
template <typename T>
const std::string& ConfigProto_Experimental_MlirBridgeRollout_Name(T value) {
  static_assert(std::is_same<T, ConfigProto_Experimental_MlirBridgeRollout>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MlirBridgeRollout_Name().");
  return ConfigProto_Experimental_MlirBridgeRollout_Name(static_cast<ConfigProto_Experimental_MlirBridgeRollout>(value));
}
template <>
inline const std::string& ConfigProto_Experimental_MlirBridgeRollout_Name(ConfigProto_Experimental_MlirBridgeRollout value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConfigProto_Experimental_MlirBridgeRollout_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ConfigProto_Experimental_MlirBridgeRollout_Parse(absl::string_view name, ConfigProto_Experimental_MlirBridgeRollout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigProto_Experimental_MlirBridgeRollout>(
      ConfigProto_Experimental_MlirBridgeRollout_descriptor(), name, value);
}
enum RunOptions_TraceLevel : int {
  RunOptions_TraceLevel_NO_TRACE = 0,
  RunOptions_TraceLevel_SOFTWARE_TRACE = 1,
  RunOptions_TraceLevel_HARDWARE_TRACE = 2,
  RunOptions_TraceLevel_FULL_TRACE = 3,
  RunOptions_TraceLevel_RunOptions_TraceLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RunOptions_TraceLevel_RunOptions_TraceLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool RunOptions_TraceLevel_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t RunOptions_TraceLevel_internal_data_[];
constexpr RunOptions_TraceLevel RunOptions_TraceLevel_TraceLevel_MIN = static_cast<RunOptions_TraceLevel>(0);
constexpr RunOptions_TraceLevel RunOptions_TraceLevel_TraceLevel_MAX = static_cast<RunOptions_TraceLevel>(3);
constexpr int RunOptions_TraceLevel_TraceLevel_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
RunOptions_TraceLevel_descriptor();
template <typename T>
const std::string& RunOptions_TraceLevel_Name(T value) {
  static_assert(std::is_same<T, RunOptions_TraceLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TraceLevel_Name().");
  return RunOptions_TraceLevel_Name(static_cast<RunOptions_TraceLevel>(value));
}
template <>
inline const std::string& RunOptions_TraceLevel_Name(RunOptions_TraceLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RunOptions_TraceLevel_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RunOptions_TraceLevel_Parse(absl::string_view name, RunOptions_TraceLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RunOptions_TraceLevel>(
      RunOptions_TraceLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT ThreadPoolOptionProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.ThreadPoolOptionProto) */ {
 public:
  inline ThreadPoolOptionProto() : ThreadPoolOptionProto(nullptr) {}
  ~ThreadPoolOptionProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ThreadPoolOptionProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline ThreadPoolOptionProto(const ThreadPoolOptionProto& from) : ThreadPoolOptionProto(nullptr, from) {}
  inline ThreadPoolOptionProto(ThreadPoolOptionProto&& from) noexcept
      : ThreadPoolOptionProto(nullptr, std::move(from)) {}
  inline ThreadPoolOptionProto& operator=(const ThreadPoolOptionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadPoolOptionProto& operator=(ThreadPoolOptionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadPoolOptionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadPoolOptionProto* internal_default_instance() {
    return reinterpret_cast<const ThreadPoolOptionProto*>(
        &_ThreadPoolOptionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ThreadPoolOptionProto& a, ThreadPoolOptionProto& b) { a.Swap(&b); }
  inline void Swap(ThreadPoolOptionProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadPoolOptionProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadPoolOptionProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ThreadPoolOptionProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ThreadPoolOptionProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ThreadPoolOptionProto& from) { ThreadPoolOptionProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ThreadPoolOptionProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.ThreadPoolOptionProto"; }

 protected:
  explicit ThreadPoolOptionProto(::google::protobuf::Arena* arena);
  ThreadPoolOptionProto(::google::protobuf::Arena* arena, const ThreadPoolOptionProto& from);
  ThreadPoolOptionProto(::google::protobuf::Arena* arena, ThreadPoolOptionProto&& from) noexcept
      : ThreadPoolOptionProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGlobalNameFieldNumber = 2,
    kNumThreadsFieldNumber = 1,
  };
  // string global_name = 2;
  void clear_global_name() ;
  const std::string& global_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_global_name(Arg_&& arg, Args_... args);
  std::string* mutable_global_name();
  PROTOBUF_NODISCARD std::string* release_global_name();
  void set_allocated_global_name(std::string* value);

  private:
  const std::string& _internal_global_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_global_name(
      const std::string& value);
  std::string* _internal_mutable_global_name();

  public:
  // int32 num_threads = 1;
  void clear_num_threads() ;
  ::int32_t num_threads() const;
  void set_num_threads(::int32_t value);

  private:
  ::int32_t _internal_num_threads() const;
  void _internal_set_num_threads(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.ThreadPoolOptionProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ThreadPoolOptionProto& from_msg);
    ::google::protobuf::internal::ArenaStringPtr global_name_;
    ::int32_t num_threads_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT TensorConnection final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.TensorConnection) */ {
 public:
  inline TensorConnection() : TensorConnection(nullptr) {}
  ~TensorConnection() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TensorConnection(
      ::google::protobuf::internal::ConstantInitialized);

  inline TensorConnection(const TensorConnection& from) : TensorConnection(nullptr, from) {}
  inline TensorConnection(TensorConnection&& from) noexcept
      : TensorConnection(nullptr, std::move(from)) {}
  inline TensorConnection& operator=(const TensorConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorConnection& operator=(TensorConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorConnection* internal_default_instance() {
    return reinterpret_cast<const TensorConnection*>(
        &_TensorConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(TensorConnection& a, TensorConnection& b) { a.Swap(&b); }
  inline void Swap(TensorConnection* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorConnection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorConnection* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TensorConnection>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TensorConnection& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TensorConnection& from) { TensorConnection::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TensorConnection* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.TensorConnection"; }

 protected:
  explicit TensorConnection(::google::protobuf::Arena* arena);
  TensorConnection(::google::protobuf::Arena* arena, const TensorConnection& from);
  TensorConnection(::google::protobuf::Arena* arena, TensorConnection&& from) noexcept
      : TensorConnection(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFromTensorFieldNumber = 1,
    kToTensorFieldNumber = 2,
  };
  // string from_tensor = 1;
  void clear_from_tensor() ;
  const std::string& from_tensor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from_tensor(Arg_&& arg, Args_... args);
  std::string* mutable_from_tensor();
  PROTOBUF_NODISCARD std::string* release_from_tensor();
  void set_allocated_from_tensor(std::string* value);

  private:
  const std::string& _internal_from_tensor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_tensor(
      const std::string& value);
  std::string* _internal_mutable_from_tensor();

  public:
  // string to_tensor = 2;
  void clear_to_tensor() ;
  const std::string& to_tensor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_tensor(Arg_&& arg, Args_... args);
  std::string* mutable_to_tensor();
  PROTOBUF_NODISCARD std::string* release_to_tensor();
  void set_allocated_to_tensor(std::string* value);

  private:
  const std::string& _internal_to_tensor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_tensor(
      const std::string& value);
  std::string* _internal_mutable_to_tensor();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.TensorConnection)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TensorConnection& from_msg);
    ::google::protobuf::internal::ArenaStringPtr from_tensor_;
    ::google::protobuf::internal::ArenaStringPtr to_tensor_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT SessionMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.SessionMetadata) */ {
 public:
  inline SessionMetadata() : SessionMetadata(nullptr) {}
  ~SessionMetadata() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SessionMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline SessionMetadata(const SessionMetadata& from) : SessionMetadata(nullptr, from) {}
  inline SessionMetadata(SessionMetadata&& from) noexcept
      : SessionMetadata(nullptr, std::move(from)) {}
  inline SessionMetadata& operator=(const SessionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMetadata& operator=(SessionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionMetadata* internal_default_instance() {
    return reinterpret_cast<const SessionMetadata*>(
        &_SessionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SessionMetadata& a, SessionMetadata& b) { a.Swap(&b); }
  inline void Swap(SessionMetadata* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionMetadata* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SessionMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SessionMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SessionMetadata& from) { SessionMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SessionMetadata* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.SessionMetadata"; }

 protected:
  explicit SessionMetadata(::google::protobuf::Arena* arena);
  SessionMetadata(::google::protobuf::Arena* arena, const SessionMetadata& from);
  SessionMetadata(::google::protobuf::Arena* arena, SessionMetadata&& from) noexcept
      : SessionMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 version = 2;
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.SessionMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SessionMetadata& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RunOptions_Experimental_RunHandlerPoolOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions) */ {
 public:
  inline RunOptions_Experimental_RunHandlerPoolOptions() : RunOptions_Experimental_RunHandlerPoolOptions(nullptr) {}
  ~RunOptions_Experimental_RunHandlerPoolOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RunOptions_Experimental_RunHandlerPoolOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline RunOptions_Experimental_RunHandlerPoolOptions(const RunOptions_Experimental_RunHandlerPoolOptions& from) : RunOptions_Experimental_RunHandlerPoolOptions(nullptr, from) {}
  inline RunOptions_Experimental_RunHandlerPoolOptions(RunOptions_Experimental_RunHandlerPoolOptions&& from) noexcept
      : RunOptions_Experimental_RunHandlerPoolOptions(nullptr, std::move(from)) {}
  inline RunOptions_Experimental_RunHandlerPoolOptions& operator=(const RunOptions_Experimental_RunHandlerPoolOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunOptions_Experimental_RunHandlerPoolOptions& operator=(RunOptions_Experimental_RunHandlerPoolOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunOptions_Experimental_RunHandlerPoolOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunOptions_Experimental_RunHandlerPoolOptions* internal_default_instance() {
    return reinterpret_cast<const RunOptions_Experimental_RunHandlerPoolOptions*>(
        &_RunOptions_Experimental_RunHandlerPoolOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(RunOptions_Experimental_RunHandlerPoolOptions& a, RunOptions_Experimental_RunHandlerPoolOptions& b) { a.Swap(&b); }
  inline void Swap(RunOptions_Experimental_RunHandlerPoolOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunOptions_Experimental_RunHandlerPoolOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunOptions_Experimental_RunHandlerPoolOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RunOptions_Experimental_RunHandlerPoolOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RunOptions_Experimental_RunHandlerPoolOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RunOptions_Experimental_RunHandlerPoolOptions& from) { RunOptions_Experimental_RunHandlerPoolOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RunOptions_Experimental_RunHandlerPoolOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.RunOptions.Experimental.RunHandlerPoolOptions"; }

 protected:
  explicit RunOptions_Experimental_RunHandlerPoolOptions(::google::protobuf::Arena* arena);
  RunOptions_Experimental_RunHandlerPoolOptions(::google::protobuf::Arena* arena, const RunOptions_Experimental_RunHandlerPoolOptions& from);
  RunOptions_Experimental_RunHandlerPoolOptions(::google::protobuf::Arena* arena, RunOptions_Experimental_RunHandlerPoolOptions&& from) noexcept
      : RunOptions_Experimental_RunHandlerPoolOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPriorityFieldNumber = 1,
  };
  // int64 priority = 1;
  void clear_priority() ;
  ::int64_t priority() const;
  void set_priority(::int64_t value);

  private:
  ::int64_t _internal_priority() const;
  void _internal_set_priority(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RunOptions_Experimental_RunHandlerPoolOptions& from_msg);
    ::int64_t priority_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT OptimizerOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.OptimizerOptions) */ {
 public:
  inline OptimizerOptions() : OptimizerOptions(nullptr) {}
  ~OptimizerOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OptimizerOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline OptimizerOptions(const OptimizerOptions& from) : OptimizerOptions(nullptr, from) {}
  inline OptimizerOptions(OptimizerOptions&& from) noexcept
      : OptimizerOptions(nullptr, std::move(from)) {}
  inline OptimizerOptions& operator=(const OptimizerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizerOptions& operator=(OptimizerOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizerOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizerOptions* internal_default_instance() {
    return reinterpret_cast<const OptimizerOptions*>(
        &_OptimizerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(OptimizerOptions& a, OptimizerOptions& b) { a.Swap(&b); }
  inline void Swap(OptimizerOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizerOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptimizerOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<OptimizerOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptimizerOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OptimizerOptions& from) { OptimizerOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptimizerOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.OptimizerOptions"; }

 protected:
  explicit OptimizerOptions(::google::protobuf::Arena* arena);
  OptimizerOptions(::google::protobuf::Arena* arena, const OptimizerOptions& from);
  OptimizerOptions(::google::protobuf::Arena* arena, OptimizerOptions&& from) noexcept
      : OptimizerOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Level = OptimizerOptions_Level;
  static constexpr Level L1 = OptimizerOptions_Level_L1;
  static constexpr Level L0 = OptimizerOptions_Level_L0;
  static inline bool Level_IsValid(int value) {
    return OptimizerOptions_Level_IsValid(value);
  }
  static constexpr Level Level_MIN = OptimizerOptions_Level_Level_MIN;
  static constexpr Level Level_MAX = OptimizerOptions_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE = OptimizerOptions_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Level_descriptor() {
    return OptimizerOptions_Level_descriptor();
  }
  template <typename T>
  static inline const std::string& Level_Name(T value) {
    return OptimizerOptions_Level_Name(value);
  }
  static inline bool Level_Parse(absl::string_view name, Level* value) {
    return OptimizerOptions_Level_Parse(name, value);
  }
  using GlobalJitLevel = OptimizerOptions_GlobalJitLevel;
  static constexpr GlobalJitLevel DEFAULT = OptimizerOptions_GlobalJitLevel_DEFAULT;
  static constexpr GlobalJitLevel OFF = OptimizerOptions_GlobalJitLevel_OFF;
  static constexpr GlobalJitLevel ON_1 = OptimizerOptions_GlobalJitLevel_ON_1;
  static constexpr GlobalJitLevel ON_2 = OptimizerOptions_GlobalJitLevel_ON_2;
  static inline bool GlobalJitLevel_IsValid(int value) {
    return OptimizerOptions_GlobalJitLevel_IsValid(value);
  }
  static constexpr GlobalJitLevel GlobalJitLevel_MIN = OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MIN;
  static constexpr GlobalJitLevel GlobalJitLevel_MAX = OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MAX;
  static constexpr int GlobalJitLevel_ARRAYSIZE = OptimizerOptions_GlobalJitLevel_GlobalJitLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* GlobalJitLevel_descriptor() {
    return OptimizerOptions_GlobalJitLevel_descriptor();
  }
  template <typename T>
  static inline const std::string& GlobalJitLevel_Name(T value) {
    return OptimizerOptions_GlobalJitLevel_Name(value);
  }
  static inline bool GlobalJitLevel_Parse(absl::string_view name, GlobalJitLevel* value) {
    return OptimizerOptions_GlobalJitLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kOptLevelFieldNumber = 3,
    kDoCommonSubexpressionEliminationFieldNumber = 1,
    kDoConstantFoldingFieldNumber = 2,
    kDoFunctionInliningFieldNumber = 4,
    kCpuGlobalJitFieldNumber = 7,
    kMaxFoldedConstantInBytesFieldNumber = 6,
    kGlobalJitLevelFieldNumber = 5,
  };
  // .tensorflow.OptimizerOptions.Level opt_level = 3;
  void clear_opt_level() ;
  ::tensorflow::OptimizerOptions_Level opt_level() const;
  void set_opt_level(::tensorflow::OptimizerOptions_Level value);

  private:
  ::tensorflow::OptimizerOptions_Level _internal_opt_level() const;
  void _internal_set_opt_level(::tensorflow::OptimizerOptions_Level value);

  public:
  // bool do_common_subexpression_elimination = 1;
  void clear_do_common_subexpression_elimination() ;
  bool do_common_subexpression_elimination() const;
  void set_do_common_subexpression_elimination(bool value);

  private:
  bool _internal_do_common_subexpression_elimination() const;
  void _internal_set_do_common_subexpression_elimination(bool value);

  public:
  // bool do_constant_folding = 2;
  void clear_do_constant_folding() ;
  bool do_constant_folding() const;
  void set_do_constant_folding(bool value);

  private:
  bool _internal_do_constant_folding() const;
  void _internal_set_do_constant_folding(bool value);

  public:
  // bool do_function_inlining = 4;
  void clear_do_function_inlining() ;
  bool do_function_inlining() const;
  void set_do_function_inlining(bool value);

  private:
  bool _internal_do_function_inlining() const;
  void _internal_set_do_function_inlining(bool value);

  public:
  // bool cpu_global_jit = 7;
  void clear_cpu_global_jit() ;
  bool cpu_global_jit() const;
  void set_cpu_global_jit(bool value);

  private:
  bool _internal_cpu_global_jit() const;
  void _internal_set_cpu_global_jit(bool value);

  public:
  // int64 max_folded_constant_in_bytes = 6;
  void clear_max_folded_constant_in_bytes() ;
  ::int64_t max_folded_constant_in_bytes() const;
  void set_max_folded_constant_in_bytes(::int64_t value);

  private:
  ::int64_t _internal_max_folded_constant_in_bytes() const;
  void _internal_set_max_folded_constant_in_bytes(::int64_t value);

  public:
  // .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
  void clear_global_jit_level() ;
  ::tensorflow::OptimizerOptions_GlobalJitLevel global_jit_level() const;
  void set_global_jit_level(::tensorflow::OptimizerOptions_GlobalJitLevel value);

  private:
  ::tensorflow::OptimizerOptions_GlobalJitLevel _internal_global_jit_level() const;
  void _internal_set_global_jit_level(::tensorflow::OptimizerOptions_GlobalJitLevel value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.OptimizerOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OptimizerOptions& from_msg);
    int opt_level_;
    bool do_common_subexpression_elimination_;
    bool do_constant_folding_;
    bool do_function_inlining_;
    bool cpu_global_jit_;
    ::int64_t max_folded_constant_in_bytes_;
    int global_jit_level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GPUOptions_Experimental_VirtualDevices final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.GPUOptions.Experimental.VirtualDevices) */ {
 public:
  inline GPUOptions_Experimental_VirtualDevices() : GPUOptions_Experimental_VirtualDevices(nullptr) {}
  ~GPUOptions_Experimental_VirtualDevices() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GPUOptions_Experimental_VirtualDevices(
      ::google::protobuf::internal::ConstantInitialized);

  inline GPUOptions_Experimental_VirtualDevices(const GPUOptions_Experimental_VirtualDevices& from) : GPUOptions_Experimental_VirtualDevices(nullptr, from) {}
  inline GPUOptions_Experimental_VirtualDevices(GPUOptions_Experimental_VirtualDevices&& from) noexcept
      : GPUOptions_Experimental_VirtualDevices(nullptr, std::move(from)) {}
  inline GPUOptions_Experimental_VirtualDevices& operator=(const GPUOptions_Experimental_VirtualDevices& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUOptions_Experimental_VirtualDevices& operator=(GPUOptions_Experimental_VirtualDevices&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUOptions_Experimental_VirtualDevices& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUOptions_Experimental_VirtualDevices* internal_default_instance() {
    return reinterpret_cast<const GPUOptions_Experimental_VirtualDevices*>(
        &_GPUOptions_Experimental_VirtualDevices_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GPUOptions_Experimental_VirtualDevices& a, GPUOptions_Experimental_VirtualDevices& b) { a.Swap(&b); }
  inline void Swap(GPUOptions_Experimental_VirtualDevices* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUOptions_Experimental_VirtualDevices* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUOptions_Experimental_VirtualDevices* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GPUOptions_Experimental_VirtualDevices>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GPUOptions_Experimental_VirtualDevices& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GPUOptions_Experimental_VirtualDevices& from) { GPUOptions_Experimental_VirtualDevices::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GPUOptions_Experimental_VirtualDevices* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.GPUOptions.Experimental.VirtualDevices"; }

 protected:
  explicit GPUOptions_Experimental_VirtualDevices(::google::protobuf::Arena* arena);
  GPUOptions_Experimental_VirtualDevices(::google::protobuf::Arena* arena, const GPUOptions_Experimental_VirtualDevices& from);
  GPUOptions_Experimental_VirtualDevices(::google::protobuf::Arena* arena, GPUOptions_Experimental_VirtualDevices&& from) noexcept
      : GPUOptions_Experimental_VirtualDevices(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMemoryLimitMbFieldNumber = 1,
    kPriorityFieldNumber = 2,
    kDeviceOrdinalFieldNumber = 3,
  };
  // repeated float memory_limit_mb = 1;
  int memory_limit_mb_size() const;
  private:
  int _internal_memory_limit_mb_size() const;

  public:
  void clear_memory_limit_mb() ;
  float memory_limit_mb(int index) const;
  void set_memory_limit_mb(int index, float value);
  void add_memory_limit_mb(float value);
  const ::google::protobuf::RepeatedField<float>& memory_limit_mb() const;
  ::google::protobuf::RepeatedField<float>* mutable_memory_limit_mb();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_memory_limit_mb() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_memory_limit_mb();

  public:
  // repeated int32 priority = 2;
  int priority_size() const;
  private:
  int _internal_priority_size() const;

  public:
  void clear_priority() ;
  ::int32_t priority(int index) const;
  void set_priority(int index, ::int32_t value);
  void add_priority(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& priority() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_priority();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_priority() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_priority();

  public:
  // repeated int32 device_ordinal = 3;
  int device_ordinal_size() const;
  private:
  int _internal_device_ordinal_size() const;

  public:
  void clear_device_ordinal() ;
  ::int32_t device_ordinal(int index) const;
  void set_device_ordinal(int index, ::int32_t value);
  void add_device_ordinal(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& device_ordinal() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_device_ordinal();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_device_ordinal() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_device_ordinal();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.GPUOptions.Experimental.VirtualDevices)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GPUOptions_Experimental_VirtualDevices& from_msg);
    ::google::protobuf::RepeatedField<float> memory_limit_mb_;
    ::google::protobuf::RepeatedField<::int32_t> priority_;
    mutable ::google::protobuf::internal::CachedSize _priority_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> device_ordinal_;
    mutable ::google::protobuf::internal::CachedSize _device_ordinal_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GPUOptions_Experimental_StreamMergeOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.GPUOptions.Experimental.StreamMergeOptions) */ {
 public:
  inline GPUOptions_Experimental_StreamMergeOptions() : GPUOptions_Experimental_StreamMergeOptions(nullptr) {}
  ~GPUOptions_Experimental_StreamMergeOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GPUOptions_Experimental_StreamMergeOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline GPUOptions_Experimental_StreamMergeOptions(const GPUOptions_Experimental_StreamMergeOptions& from) : GPUOptions_Experimental_StreamMergeOptions(nullptr, from) {}
  inline GPUOptions_Experimental_StreamMergeOptions(GPUOptions_Experimental_StreamMergeOptions&& from) noexcept
      : GPUOptions_Experimental_StreamMergeOptions(nullptr, std::move(from)) {}
  inline GPUOptions_Experimental_StreamMergeOptions& operator=(const GPUOptions_Experimental_StreamMergeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUOptions_Experimental_StreamMergeOptions& operator=(GPUOptions_Experimental_StreamMergeOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUOptions_Experimental_StreamMergeOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUOptions_Experimental_StreamMergeOptions* internal_default_instance() {
    return reinterpret_cast<const GPUOptions_Experimental_StreamMergeOptions*>(
        &_GPUOptions_Experimental_StreamMergeOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GPUOptions_Experimental_StreamMergeOptions& a, GPUOptions_Experimental_StreamMergeOptions& b) { a.Swap(&b); }
  inline void Swap(GPUOptions_Experimental_StreamMergeOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUOptions_Experimental_StreamMergeOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUOptions_Experimental_StreamMergeOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GPUOptions_Experimental_StreamMergeOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GPUOptions_Experimental_StreamMergeOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GPUOptions_Experimental_StreamMergeOptions& from) { GPUOptions_Experimental_StreamMergeOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GPUOptions_Experimental_StreamMergeOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.GPUOptions.Experimental.StreamMergeOptions"; }

 protected:
  explicit GPUOptions_Experimental_StreamMergeOptions(::google::protobuf::Arena* arena);
  GPUOptions_Experimental_StreamMergeOptions(::google::protobuf::Arena* arena, const GPUOptions_Experimental_StreamMergeOptions& from);
  GPUOptions_Experimental_StreamMergeOptions(::google::protobuf::Arena* arena, GPUOptions_Experimental_StreamMergeOptions&& from) noexcept
      : GPUOptions_Experimental_StreamMergeOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMergeHostToDeviceStreamFieldNumber = 1,
    kMergeDeviceToHostStreamFieldNumber = 2,
    kMergeDeviceToDeviceStreamFieldNumber = 3,
  };
  // bool merge_host_to_device_stream = 1;
  void clear_merge_host_to_device_stream() ;
  bool merge_host_to_device_stream() const;
  void set_merge_host_to_device_stream(bool value);

  private:
  bool _internal_merge_host_to_device_stream() const;
  void _internal_set_merge_host_to_device_stream(bool value);

  public:
  // bool merge_device_to_host_stream = 2;
  void clear_merge_device_to_host_stream() ;
  bool merge_device_to_host_stream() const;
  void set_merge_device_to_host_stream(bool value);

  private:
  bool _internal_merge_device_to_host_stream() const;
  void _internal_set_merge_device_to_host_stream(bool value);

  public:
  // bool merge_device_to_device_stream = 3;
  void clear_merge_device_to_device_stream() ;
  bool merge_device_to_device_stream() const;
  void set_merge_device_to_device_stream(bool value);

  private:
  bool _internal_merge_device_to_device_stream() const;
  void _internal_set_merge_device_to_device_stream(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.GPUOptions.Experimental.StreamMergeOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GPUOptions_Experimental_StreamMergeOptions& from_msg);
    bool merge_host_to_device_stream_;
    bool merge_device_to_host_stream_;
    bool merge_device_to_device_stream_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConfigProto_DeviceCountEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ConfigProto_DeviceCountEntry_DoNotUse, std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ConfigProto_DeviceCountEntry_DoNotUse, std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  ConfigProto_DeviceCountEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigProto_DeviceCountEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ConfigProto_DeviceCountEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ConfigProto_DeviceCountEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ConfigProto_DeviceCountEntry_DoNotUse*>(
        &_ConfigProto_DeviceCountEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class CallableOptions_FetchDevicesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          CallableOptions_FetchDevicesEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      CallableOptions_FetchDevicesEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CallableOptions_FetchDevicesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CallableOptions_FetchDevicesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CallableOptions_FetchDevicesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CallableOptions_FetchDevicesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CallableOptions_FetchDevicesEntry_DoNotUse*>(
        &_CallableOptions_FetchDevicesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class CallableOptions_FeedDevicesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          CallableOptions_FeedDevicesEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      CallableOptions_FeedDevicesEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CallableOptions_FeedDevicesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CallableOptions_FeedDevicesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CallableOptions_FeedDevicesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CallableOptions_FeedDevicesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CallableOptions_FeedDevicesEntry_DoNotUse*>(
        &_CallableOptions_FeedDevicesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT BatchingOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.BatchingOptions) */ {
 public:
  inline BatchingOptions() : BatchingOptions(nullptr) {}
  ~BatchingOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BatchingOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline BatchingOptions(const BatchingOptions& from) : BatchingOptions(nullptr, from) {}
  inline BatchingOptions(BatchingOptions&& from) noexcept
      : BatchingOptions(nullptr, std::move(from)) {}
  inline BatchingOptions& operator=(const BatchingOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchingOptions& operator=(BatchingOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchingOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchingOptions* internal_default_instance() {
    return reinterpret_cast<const BatchingOptions*>(
        &_BatchingOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(BatchingOptions& a, BatchingOptions& b) { a.Swap(&b); }
  inline void Swap(BatchingOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchingOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchingOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<BatchingOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BatchingOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BatchingOptions& from) { BatchingOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BatchingOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.BatchingOptions"; }

 protected:
  explicit BatchingOptions(::google::protobuf::Arena* arena);
  BatchingOptions(::google::protobuf::Arena* arena, const BatchingOptions& from);
  BatchingOptions(::google::protobuf::Arena* arena, BatchingOptions&& from) noexcept
      : BatchingOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllowedBatchSizesFieldNumber = 4,
    kNumBatchThreadsFieldNumber = 1,
    kMaxBatchSizeFieldNumber = 2,
    kBatchTimeoutMicrosFieldNumber = 3,
    kMaxEnqueuedBatchesFieldNumber = 5,
  };
  // repeated int32 allowed_batch_sizes = 4;
  int allowed_batch_sizes_size() const;
  private:
  int _internal_allowed_batch_sizes_size() const;

  public:
  void clear_allowed_batch_sizes() ;
  ::int32_t allowed_batch_sizes(int index) const;
  void set_allowed_batch_sizes(int index, ::int32_t value);
  void add_allowed_batch_sizes(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& allowed_batch_sizes() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_allowed_batch_sizes();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_allowed_batch_sizes() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_allowed_batch_sizes();

  public:
  // int32 num_batch_threads = 1;
  void clear_num_batch_threads() ;
  ::int32_t num_batch_threads() const;
  void set_num_batch_threads(::int32_t value);

  private:
  ::int32_t _internal_num_batch_threads() const;
  void _internal_set_num_batch_threads(::int32_t value);

  public:
  // int32 max_batch_size = 2;
  void clear_max_batch_size() ;
  ::int32_t max_batch_size() const;
  void set_max_batch_size(::int32_t value);

  private:
  ::int32_t _internal_max_batch_size() const;
  void _internal_set_max_batch_size(::int32_t value);

  public:
  // int32 batch_timeout_micros = 3;
  void clear_batch_timeout_micros() ;
  ::int32_t batch_timeout_micros() const;
  void set_batch_timeout_micros(::int32_t value);

  private:
  ::int32_t _internal_batch_timeout_micros() const;
  void _internal_set_batch_timeout_micros(::int32_t value);

  public:
  // int32 max_enqueued_batches = 5;
  void clear_max_enqueued_batches() ;
  ::int32_t max_enqueued_batches() const;
  void set_max_enqueued_batches(::int32_t value);

  private:
  ::int32_t _internal_max_enqueued_batches() const;
  void _internal_set_max_enqueued_batches(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.BatchingOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BatchingOptions& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> allowed_batch_sizes_;
    mutable ::google::protobuf::internal::CachedSize _allowed_batch_sizes_cached_byte_size_;
    ::int32_t num_batch_threads_;
    ::int32_t max_batch_size_;
    ::int32_t batch_timeout_micros_;
    ::int32_t max_enqueued_batches_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RunOptions_Experimental final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.RunOptions.Experimental) */ {
 public:
  inline RunOptions_Experimental() : RunOptions_Experimental(nullptr) {}
  ~RunOptions_Experimental() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RunOptions_Experimental(
      ::google::protobuf::internal::ConstantInitialized);

  inline RunOptions_Experimental(const RunOptions_Experimental& from) : RunOptions_Experimental(nullptr, from) {}
  inline RunOptions_Experimental(RunOptions_Experimental&& from) noexcept
      : RunOptions_Experimental(nullptr, std::move(from)) {}
  inline RunOptions_Experimental& operator=(const RunOptions_Experimental& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunOptions_Experimental& operator=(RunOptions_Experimental&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunOptions_Experimental& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunOptions_Experimental* internal_default_instance() {
    return reinterpret_cast<const RunOptions_Experimental*>(
        &_RunOptions_Experimental_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(RunOptions_Experimental& a, RunOptions_Experimental& b) { a.Swap(&b); }
  inline void Swap(RunOptions_Experimental* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunOptions_Experimental* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunOptions_Experimental* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RunOptions_Experimental>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RunOptions_Experimental& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RunOptions_Experimental& from) { RunOptions_Experimental::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RunOptions_Experimental* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.RunOptions.Experimental"; }

 protected:
  explicit RunOptions_Experimental(::google::protobuf::Arena* arena);
  RunOptions_Experimental(::google::protobuf::Arena* arena, const RunOptions_Experimental& from);
  RunOptions_Experimental(::google::protobuf::Arena* arena, RunOptions_Experimental&& from) noexcept
      : RunOptions_Experimental(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using RunHandlerPoolOptions = RunOptions_Experimental_RunHandlerPoolOptions;

  // accessors -------------------------------------------------------
  enum : int {
    kRunHandlerPoolOptionsFieldNumber = 3,
    kCollectiveGraphKeyFieldNumber = 1,
    kUseRunHandlerPoolFieldNumber = 2,
  };
  // .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
  bool has_run_handler_pool_options() const;
  void clear_run_handler_pool_options() ;
  const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions& run_handler_pool_options() const;
  PROTOBUF_NODISCARD ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* release_run_handler_pool_options();
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* mutable_run_handler_pool_options();
  void set_allocated_run_handler_pool_options(::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* value);
  void unsafe_arena_set_allocated_run_handler_pool_options(::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* value);
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* unsafe_arena_release_run_handler_pool_options();

  private:
  const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions& _internal_run_handler_pool_options() const;
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* _internal_mutable_run_handler_pool_options();

  public:
  // int64 collective_graph_key = 1;
  void clear_collective_graph_key() ;
  ::int64_t collective_graph_key() const;
  void set_collective_graph_key(::int64_t value);

  private:
  ::int64_t _internal_collective_graph_key() const;
  void _internal_set_collective_graph_key(::int64_t value);

  public:
  // bool use_run_handler_pool = 2;
  void clear_use_run_handler_pool() ;
  bool use_run_handler_pool() const;
  void set_use_run_handler_pool(bool value);

  private:
  bool _internal_use_run_handler_pool() const;
  void _internal_set_use_run_handler_pool(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.RunOptions.Experimental)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RunOptions_Experimental& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* run_handler_pool_options_;
    ::int64_t collective_graph_key_;
    bool use_run_handler_pool_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GPUOptions_Experimental final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.GPUOptions.Experimental) */ {
 public:
  inline GPUOptions_Experimental() : GPUOptions_Experimental(nullptr) {}
  ~GPUOptions_Experimental() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GPUOptions_Experimental(
      ::google::protobuf::internal::ConstantInitialized);

  inline GPUOptions_Experimental(const GPUOptions_Experimental& from) : GPUOptions_Experimental(nullptr, from) {}
  inline GPUOptions_Experimental(GPUOptions_Experimental&& from) noexcept
      : GPUOptions_Experimental(nullptr, std::move(from)) {}
  inline GPUOptions_Experimental& operator=(const GPUOptions_Experimental& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUOptions_Experimental& operator=(GPUOptions_Experimental&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUOptions_Experimental& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUOptions_Experimental* internal_default_instance() {
    return reinterpret_cast<const GPUOptions_Experimental*>(
        &_GPUOptions_Experimental_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GPUOptions_Experimental& a, GPUOptions_Experimental& b) { a.Swap(&b); }
  inline void Swap(GPUOptions_Experimental* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUOptions_Experimental* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUOptions_Experimental* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GPUOptions_Experimental>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GPUOptions_Experimental& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GPUOptions_Experimental& from) { GPUOptions_Experimental::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GPUOptions_Experimental* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.GPUOptions.Experimental"; }

 protected:
  explicit GPUOptions_Experimental(::google::protobuf::Arena* arena);
  GPUOptions_Experimental(::google::protobuf::Arena* arena, const GPUOptions_Experimental& from);
  GPUOptions_Experimental(::google::protobuf::Arena* arena, GPUOptions_Experimental&& from) noexcept
      : GPUOptions_Experimental(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using VirtualDevices = GPUOptions_Experimental_VirtualDevices;
  using StreamMergeOptions = GPUOptions_Experimental_StreamMergeOptions;

  // accessors -------------------------------------------------------
  enum : int {
    kVirtualDevicesFieldNumber = 1,
    kCollectiveRingOrderFieldNumber = 4,
    kStreamMergeOptionsFieldNumber = 19,
    kNumDevToDevCopyStreamsFieldNumber = 3,
    kKernelTrackerMaxIntervalFieldNumber = 7,
    kUseUnifiedMemoryFieldNumber = 2,
    kTimestampedAllocatorFieldNumber = 5,
    kUseCudaMallocAsyncFieldNumber = 11,
    kDisallowRetryOnAllocationFailureFieldNumber = 12,
    kKernelTrackerMaxBytesFieldNumber = 8,
    kInternalFragmentationFractionFieldNumber = 10,
    kKernelTrackerMaxPendingFieldNumber = 9,
    kGpuHostMemLimitInMbFieldNumber = 13,
    kNumVirtualDevicesPerGpuFieldNumber = 15,
    kGpuHostMemDisallowGrowthFieldNumber = 14,
    kPopulatePjrtGpuClientCreationInfoFieldNumber = 17,
    kGpuSystemMemorySizeInMbFieldNumber = 16,
    kNodeIdFieldNumber = 18,
  };
  // repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
  int virtual_devices_size() const;
  private:
  int _internal_virtual_devices_size() const;

  public:
  void clear_virtual_devices() ;
  ::tensorflow::GPUOptions_Experimental_VirtualDevices* mutable_virtual_devices(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::GPUOptions_Experimental_VirtualDevices>* mutable_virtual_devices();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::GPUOptions_Experimental_VirtualDevices>& _internal_virtual_devices() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::GPUOptions_Experimental_VirtualDevices>* _internal_mutable_virtual_devices();
  public:
  const ::tensorflow::GPUOptions_Experimental_VirtualDevices& virtual_devices(int index) const;
  ::tensorflow::GPUOptions_Experimental_VirtualDevices* add_virtual_devices();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::GPUOptions_Experimental_VirtualDevices>& virtual_devices() const;
  // string collective_ring_order = 4;
  void clear_collective_ring_order() ;
  const std::string& collective_ring_order() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_collective_ring_order(Arg_&& arg, Args_... args);
  std::string* mutable_collective_ring_order();
  PROTOBUF_NODISCARD std::string* release_collective_ring_order();
  void set_allocated_collective_ring_order(std::string* value);

  private:
  const std::string& _internal_collective_ring_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collective_ring_order(
      const std::string& value);
  std::string* _internal_mutable_collective_ring_order();

  public:
  // .tensorflow.GPUOptions.Experimental.StreamMergeOptions stream_merge_options = 19;
  bool has_stream_merge_options() const;
  void clear_stream_merge_options() ;
  const ::tensorflow::GPUOptions_Experimental_StreamMergeOptions& stream_merge_options() const;
  PROTOBUF_NODISCARD ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* release_stream_merge_options();
  ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* mutable_stream_merge_options();
  void set_allocated_stream_merge_options(::tensorflow::GPUOptions_Experimental_StreamMergeOptions* value);
  void unsafe_arena_set_allocated_stream_merge_options(::tensorflow::GPUOptions_Experimental_StreamMergeOptions* value);
  ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* unsafe_arena_release_stream_merge_options();

  private:
  const ::tensorflow::GPUOptions_Experimental_StreamMergeOptions& _internal_stream_merge_options() const;
  ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* _internal_mutable_stream_merge_options();

  public:
  // int32 num_dev_to_dev_copy_streams = 3;
  void clear_num_dev_to_dev_copy_streams() ;
  ::int32_t num_dev_to_dev_copy_streams() const;
  void set_num_dev_to_dev_copy_streams(::int32_t value);

  private:
  ::int32_t _internal_num_dev_to_dev_copy_streams() const;
  void _internal_set_num_dev_to_dev_copy_streams(::int32_t value);

  public:
  // int32 kernel_tracker_max_interval = 7;
  void clear_kernel_tracker_max_interval() ;
  ::int32_t kernel_tracker_max_interval() const;
  void set_kernel_tracker_max_interval(::int32_t value);

  private:
  ::int32_t _internal_kernel_tracker_max_interval() const;
  void _internal_set_kernel_tracker_max_interval(::int32_t value);

  public:
  // bool use_unified_memory = 2;
  void clear_use_unified_memory() ;
  bool use_unified_memory() const;
  void set_use_unified_memory(bool value);

  private:
  bool _internal_use_unified_memory() const;
  void _internal_set_use_unified_memory(bool value);

  public:
  // bool timestamped_allocator = 5;
  void clear_timestamped_allocator() ;
  bool timestamped_allocator() const;
  void set_timestamped_allocator(bool value);

  private:
  bool _internal_timestamped_allocator() const;
  void _internal_set_timestamped_allocator(bool value);

  public:
  // bool use_cuda_malloc_async = 11;
  void clear_use_cuda_malloc_async() ;
  bool use_cuda_malloc_async() const;
  void set_use_cuda_malloc_async(bool value);

  private:
  bool _internal_use_cuda_malloc_async() const;
  void _internal_set_use_cuda_malloc_async(bool value);

  public:
  // bool disallow_retry_on_allocation_failure = 12;
  void clear_disallow_retry_on_allocation_failure() ;
  bool disallow_retry_on_allocation_failure() const;
  void set_disallow_retry_on_allocation_failure(bool value);

  private:
  bool _internal_disallow_retry_on_allocation_failure() const;
  void _internal_set_disallow_retry_on_allocation_failure(bool value);

  public:
  // int32 kernel_tracker_max_bytes = 8;
  void clear_kernel_tracker_max_bytes() ;
  ::int32_t kernel_tracker_max_bytes() const;
  void set_kernel_tracker_max_bytes(::int32_t value);

  private:
  ::int32_t _internal_kernel_tracker_max_bytes() const;
  void _internal_set_kernel_tracker_max_bytes(::int32_t value);

  public:
  // double internal_fragmentation_fraction = 10;
  void clear_internal_fragmentation_fraction() ;
  double internal_fragmentation_fraction() const;
  void set_internal_fragmentation_fraction(double value);

  private:
  double _internal_internal_fragmentation_fraction() const;
  void _internal_set_internal_fragmentation_fraction(double value);

  public:
  // int32 kernel_tracker_max_pending = 9;
  void clear_kernel_tracker_max_pending() ;
  ::int32_t kernel_tracker_max_pending() const;
  void set_kernel_tracker_max_pending(::int32_t value);

  private:
  ::int32_t _internal_kernel_tracker_max_pending() const;
  void _internal_set_kernel_tracker_max_pending(::int32_t value);

  public:
  // float gpu_host_mem_limit_in_mb = 13;
  void clear_gpu_host_mem_limit_in_mb() ;
  float gpu_host_mem_limit_in_mb() const;
  void set_gpu_host_mem_limit_in_mb(float value);

  private:
  float _internal_gpu_host_mem_limit_in_mb() const;
  void _internal_set_gpu_host_mem_limit_in_mb(float value);

  public:
  // int32 num_virtual_devices_per_gpu = 15;
  void clear_num_virtual_devices_per_gpu() ;
  ::int32_t num_virtual_devices_per_gpu() const;
  void set_num_virtual_devices_per_gpu(::int32_t value);

  private:
  ::int32_t _internal_num_virtual_devices_per_gpu() const;
  void _internal_set_num_virtual_devices_per_gpu(::int32_t value);

  public:
  // bool gpu_host_mem_disallow_growth = 14;
  void clear_gpu_host_mem_disallow_growth() ;
  bool gpu_host_mem_disallow_growth() const;
  void set_gpu_host_mem_disallow_growth(bool value);

  private:
  bool _internal_gpu_host_mem_disallow_growth() const;
  void _internal_set_gpu_host_mem_disallow_growth(bool value);

  public:
  // bool populate_pjrt_gpu_client_creation_info = 17;
  void clear_populate_pjrt_gpu_client_creation_info() ;
  bool populate_pjrt_gpu_client_creation_info() const;
  void set_populate_pjrt_gpu_client_creation_info(bool value);

  private:
  bool _internal_populate_pjrt_gpu_client_creation_info() const;
  void _internal_set_populate_pjrt_gpu_client_creation_info(bool value);

  public:
  // int32 gpu_system_memory_size_in_mb = 16;
  void clear_gpu_system_memory_size_in_mb() ;
  ::int32_t gpu_system_memory_size_in_mb() const;
  void set_gpu_system_memory_size_in_mb(::int32_t value);

  private:
  ::int32_t _internal_gpu_system_memory_size_in_mb() const;
  void _internal_set_gpu_system_memory_size_in_mb(::int32_t value);

  public:
  // int32 node_id = 18;
  void clear_node_id() ;
  ::int32_t node_id() const;
  void set_node_id(::int32_t value);

  private:
  ::int32_t _internal_node_id() const;
  void _internal_set_node_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.GPUOptions.Experimental)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 2,
      80, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GPUOptions_Experimental& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::GPUOptions_Experimental_VirtualDevices > virtual_devices_;
    ::google::protobuf::internal::ArenaStringPtr collective_ring_order_;
    ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* stream_merge_options_;
    ::int32_t num_dev_to_dev_copy_streams_;
    ::int32_t kernel_tracker_max_interval_;
    bool use_unified_memory_;
    bool timestamped_allocator_;
    bool use_cuda_malloc_async_;
    bool disallow_retry_on_allocation_failure_;
    ::int32_t kernel_tracker_max_bytes_;
    double internal_fragmentation_fraction_;
    ::int32_t kernel_tracker_max_pending_;
    float gpu_host_mem_limit_in_mb_;
    ::int32_t num_virtual_devices_per_gpu_;
    bool gpu_host_mem_disallow_growth_;
    bool populate_pjrt_gpu_client_creation_info_;
    ::int32_t gpu_system_memory_size_in_mb_;
    ::int32_t node_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RunOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.RunOptions) */ {
 public:
  inline RunOptions() : RunOptions(nullptr) {}
  ~RunOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RunOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline RunOptions(const RunOptions& from) : RunOptions(nullptr, from) {}
  inline RunOptions(RunOptions&& from) noexcept
      : RunOptions(nullptr, std::move(from)) {}
  inline RunOptions& operator=(const RunOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunOptions& operator=(RunOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunOptions* internal_default_instance() {
    return reinterpret_cast<const RunOptions*>(
        &_RunOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(RunOptions& a, RunOptions& b) { a.Swap(&b); }
  inline void Swap(RunOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RunOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RunOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RunOptions& from) { RunOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RunOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.RunOptions"; }

 protected:
  explicit RunOptions(::google::protobuf::Arena* arena);
  RunOptions(::google::protobuf::Arena* arena, const RunOptions& from);
  RunOptions(::google::protobuf::Arena* arena, RunOptions&& from) noexcept
      : RunOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Experimental = RunOptions_Experimental;
  using TraceLevel = RunOptions_TraceLevel;
  static constexpr TraceLevel NO_TRACE = RunOptions_TraceLevel_NO_TRACE;
  static constexpr TraceLevel SOFTWARE_TRACE = RunOptions_TraceLevel_SOFTWARE_TRACE;
  static constexpr TraceLevel HARDWARE_TRACE = RunOptions_TraceLevel_HARDWARE_TRACE;
  static constexpr TraceLevel FULL_TRACE = RunOptions_TraceLevel_FULL_TRACE;
  static inline bool TraceLevel_IsValid(int value) {
    return RunOptions_TraceLevel_IsValid(value);
  }
  static constexpr TraceLevel TraceLevel_MIN = RunOptions_TraceLevel_TraceLevel_MIN;
  static constexpr TraceLevel TraceLevel_MAX = RunOptions_TraceLevel_TraceLevel_MAX;
  static constexpr int TraceLevel_ARRAYSIZE = RunOptions_TraceLevel_TraceLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TraceLevel_descriptor() {
    return RunOptions_TraceLevel_descriptor();
  }
  template <typename T>
  static inline const std::string& TraceLevel_Name(T value) {
    return RunOptions_TraceLevel_Name(value);
  }
  static inline bool TraceLevel_Parse(absl::string_view name, TraceLevel* value) {
    return RunOptions_TraceLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kDebugOptionsFieldNumber = 6,
    kExperimentalFieldNumber = 8,
    kTimeoutInMsFieldNumber = 2,
    kTraceLevelFieldNumber = 1,
    kInterOpThreadPoolFieldNumber = 3,
    kOutputPartitionGraphsFieldNumber = 5,
    kReportTensorAllocationsUponOomFieldNumber = 7,
  };
  // .tensorflow.DebugOptions debug_options = 6;
  bool has_debug_options() const;
  void clear_debug_options() ;
  const ::tensorflow::DebugOptions& debug_options() const;
  PROTOBUF_NODISCARD ::tensorflow::DebugOptions* release_debug_options();
  ::tensorflow::DebugOptions* mutable_debug_options();
  void set_allocated_debug_options(::tensorflow::DebugOptions* value);
  void unsafe_arena_set_allocated_debug_options(::tensorflow::DebugOptions* value);
  ::tensorflow::DebugOptions* unsafe_arena_release_debug_options();

  private:
  const ::tensorflow::DebugOptions& _internal_debug_options() const;
  ::tensorflow::DebugOptions* _internal_mutable_debug_options();

  public:
  // .tensorflow.RunOptions.Experimental experimental = 8;
  bool has_experimental() const;
  void clear_experimental() ;
  const ::tensorflow::RunOptions_Experimental& experimental() const;
  PROTOBUF_NODISCARD ::tensorflow::RunOptions_Experimental* release_experimental();
  ::tensorflow::RunOptions_Experimental* mutable_experimental();
  void set_allocated_experimental(::tensorflow::RunOptions_Experimental* value);
  void unsafe_arena_set_allocated_experimental(::tensorflow::RunOptions_Experimental* value);
  ::tensorflow::RunOptions_Experimental* unsafe_arena_release_experimental();

  private:
  const ::tensorflow::RunOptions_Experimental& _internal_experimental() const;
  ::tensorflow::RunOptions_Experimental* _internal_mutable_experimental();

  public:
  // int64 timeout_in_ms = 2;
  void clear_timeout_in_ms() ;
  ::int64_t timeout_in_ms() const;
  void set_timeout_in_ms(::int64_t value);

  private:
  ::int64_t _internal_timeout_in_ms() const;
  void _internal_set_timeout_in_ms(::int64_t value);

  public:
  // .tensorflow.RunOptions.TraceLevel trace_level = 1;
  void clear_trace_level() ;
  ::tensorflow::RunOptions_TraceLevel trace_level() const;
  void set_trace_level(::tensorflow::RunOptions_TraceLevel value);

  private:
  ::tensorflow::RunOptions_TraceLevel _internal_trace_level() const;
  void _internal_set_trace_level(::tensorflow::RunOptions_TraceLevel value);

  public:
  // int32 inter_op_thread_pool = 3;
  void clear_inter_op_thread_pool() ;
  ::int32_t inter_op_thread_pool() const;
  void set_inter_op_thread_pool(::int32_t value);

  private:
  ::int32_t _internal_inter_op_thread_pool() const;
  void _internal_set_inter_op_thread_pool(::int32_t value);

  public:
  // bool output_partition_graphs = 5;
  void clear_output_partition_graphs() ;
  bool output_partition_graphs() const;
  void set_output_partition_graphs(bool value);

  private:
  bool _internal_output_partition_graphs() const;
  void _internal_set_output_partition_graphs(bool value);

  public:
  // bool report_tensor_allocations_upon_oom = 7;
  void clear_report_tensor_allocations_upon_oom() ;
  bool report_tensor_allocations_upon_oom() const;
  void set_report_tensor_allocations_upon_oom(bool value);

  private:
  bool _internal_report_tensor_allocations_upon_oom() const;
  void _internal_set_report_tensor_allocations_upon_oom(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.RunOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RunOptions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::DebugOptions* debug_options_;
    ::tensorflow::RunOptions_Experimental* experimental_;
    ::int64_t timeout_in_ms_;
    int trace_level_;
    ::int32_t inter_op_thread_pool_;
    bool output_partition_graphs_;
    bool report_tensor_allocations_upon_oom_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GPUOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.GPUOptions) */ {
 public:
  inline GPUOptions() : GPUOptions(nullptr) {}
  ~GPUOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GPUOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline GPUOptions(const GPUOptions& from) : GPUOptions(nullptr, from) {}
  inline GPUOptions(GPUOptions&& from) noexcept
      : GPUOptions(nullptr, std::move(from)) {}
  inline GPUOptions& operator=(const GPUOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUOptions& operator=(GPUOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUOptions* internal_default_instance() {
    return reinterpret_cast<const GPUOptions*>(
        &_GPUOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GPUOptions& a, GPUOptions& b) { a.Swap(&b); }
  inline void Swap(GPUOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GPUOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GPUOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GPUOptions& from) { GPUOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GPUOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.GPUOptions"; }

 protected:
  explicit GPUOptions(::google::protobuf::Arena* arena);
  GPUOptions(::google::protobuf::Arena* arena, const GPUOptions& from);
  GPUOptions(::google::protobuf::Arena* arena, GPUOptions&& from) noexcept
      : GPUOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Experimental = GPUOptions_Experimental;

  // accessors -------------------------------------------------------
  enum : int {
    kAllocatorTypeFieldNumber = 2,
    kVisibleDeviceListFieldNumber = 5,
    kExperimentalFieldNumber = 9,
    kPerProcessGpuMemoryFractionFieldNumber = 1,
    kDeferredDeletionBytesFieldNumber = 3,
    kPollingActiveDelayUsecsFieldNumber = 6,
    kAllowGrowthFieldNumber = 4,
    kForceGpuCompatibleFieldNumber = 8,
    kPollingInactiveDelayMsecsFieldNumber = 7,
  };
  // string allocator_type = 2;
  void clear_allocator_type() ;
  const std::string& allocator_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_allocator_type(Arg_&& arg, Args_... args);
  std::string* mutable_allocator_type();
  PROTOBUF_NODISCARD std::string* release_allocator_type();
  void set_allocated_allocator_type(std::string* value);

  private:
  const std::string& _internal_allocator_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allocator_type(
      const std::string& value);
  std::string* _internal_mutable_allocator_type();

  public:
  // string visible_device_list = 5;
  void clear_visible_device_list() ;
  const std::string& visible_device_list() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_visible_device_list(Arg_&& arg, Args_... args);
  std::string* mutable_visible_device_list();
  PROTOBUF_NODISCARD std::string* release_visible_device_list();
  void set_allocated_visible_device_list(std::string* value);

  private:
  const std::string& _internal_visible_device_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_visible_device_list(
      const std::string& value);
  std::string* _internal_mutable_visible_device_list();

  public:
  // .tensorflow.GPUOptions.Experimental experimental = 9;
  bool has_experimental() const;
  void clear_experimental() ;
  const ::tensorflow::GPUOptions_Experimental& experimental() const;
  PROTOBUF_NODISCARD ::tensorflow::GPUOptions_Experimental* release_experimental();
  ::tensorflow::GPUOptions_Experimental* mutable_experimental();
  void set_allocated_experimental(::tensorflow::GPUOptions_Experimental* value);
  void unsafe_arena_set_allocated_experimental(::tensorflow::GPUOptions_Experimental* value);
  ::tensorflow::GPUOptions_Experimental* unsafe_arena_release_experimental();

  private:
  const ::tensorflow::GPUOptions_Experimental& _internal_experimental() const;
  ::tensorflow::GPUOptions_Experimental* _internal_mutable_experimental();

  public:
  // double per_process_gpu_memory_fraction = 1;
  void clear_per_process_gpu_memory_fraction() ;
  double per_process_gpu_memory_fraction() const;
  void set_per_process_gpu_memory_fraction(double value);

  private:
  double _internal_per_process_gpu_memory_fraction() const;
  void _internal_set_per_process_gpu_memory_fraction(double value);

  public:
  // int64 deferred_deletion_bytes = 3;
  void clear_deferred_deletion_bytes() ;
  ::int64_t deferred_deletion_bytes() const;
  void set_deferred_deletion_bytes(::int64_t value);

  private:
  ::int64_t _internal_deferred_deletion_bytes() const;
  void _internal_set_deferred_deletion_bytes(::int64_t value);

  public:
  // int32 polling_active_delay_usecs = 6;
  void clear_polling_active_delay_usecs() ;
  ::int32_t polling_active_delay_usecs() const;
  void set_polling_active_delay_usecs(::int32_t value);

  private:
  ::int32_t _internal_polling_active_delay_usecs() const;
  void _internal_set_polling_active_delay_usecs(::int32_t value);

  public:
  // bool allow_growth = 4;
  void clear_allow_growth() ;
  bool allow_growth() const;
  void set_allow_growth(bool value);

  private:
  bool _internal_allow_growth() const;
  void _internal_set_allow_growth(bool value);

  public:
  // bool force_gpu_compatible = 8;
  void clear_force_gpu_compatible() ;
  bool force_gpu_compatible() const;
  void set_force_gpu_compatible(bool value);

  private:
  bool _internal_force_gpu_compatible() const;
  void _internal_set_force_gpu_compatible(bool value);

  public:
  // int32 polling_inactive_delay_msecs = 7;
  void clear_polling_inactive_delay_msecs() ;
  ::int32_t polling_inactive_delay_msecs() const;
  void set_polling_inactive_delay_msecs(::int32_t value);

  private:
  ::int32_t _internal_polling_inactive_delay_msecs() const;
  void _internal_set_polling_inactive_delay_msecs(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.GPUOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      71, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GPUOptions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr allocator_type_;
    ::google::protobuf::internal::ArenaStringPtr visible_device_list_;
    ::tensorflow::GPUOptions_Experimental* experimental_;
    double per_process_gpu_memory_fraction_;
    ::int64_t deferred_deletion_bytes_;
    ::int32_t polling_active_delay_usecs_;
    bool allow_growth_;
    bool force_gpu_compatible_;
    ::int32_t polling_inactive_delay_msecs_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ConfigProto_Experimental final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.ConfigProto.Experimental) */ {
 public:
  inline ConfigProto_Experimental() : ConfigProto_Experimental(nullptr) {}
  ~ConfigProto_Experimental() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigProto_Experimental(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConfigProto_Experimental(const ConfigProto_Experimental& from) : ConfigProto_Experimental(nullptr, from) {}
  inline ConfigProto_Experimental(ConfigProto_Experimental&& from) noexcept
      : ConfigProto_Experimental(nullptr, std::move(from)) {}
  inline ConfigProto_Experimental& operator=(const ConfigProto_Experimental& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigProto_Experimental& operator=(ConfigProto_Experimental&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigProto_Experimental& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigProto_Experimental* internal_default_instance() {
    return reinterpret_cast<const ConfigProto_Experimental*>(
        &_ConfigProto_Experimental_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ConfigProto_Experimental& a, ConfigProto_Experimental& b) { a.Swap(&b); }
  inline void Swap(ConfigProto_Experimental* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigProto_Experimental* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigProto_Experimental* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ConfigProto_Experimental>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigProto_Experimental& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigProto_Experimental& from) { ConfigProto_Experimental::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConfigProto_Experimental* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.ConfigProto.Experimental"; }

 protected:
  explicit ConfigProto_Experimental(::google::protobuf::Arena* arena);
  ConfigProto_Experimental(::google::protobuf::Arena* arena, const ConfigProto_Experimental& from);
  ConfigProto_Experimental(::google::protobuf::Arena* arena, ConfigProto_Experimental&& from) noexcept
      : ConfigProto_Experimental(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using MlirBridgeRollout = ConfigProto_Experimental_MlirBridgeRollout;
  static constexpr MlirBridgeRollout MLIR_BRIDGE_ROLLOUT_UNSPECIFIED = ConfigProto_Experimental_MlirBridgeRollout_MLIR_BRIDGE_ROLLOUT_UNSPECIFIED;
  static constexpr MlirBridgeRollout MLIR_BRIDGE_ROLLOUT_ENABLED = ConfigProto_Experimental_MlirBridgeRollout_MLIR_BRIDGE_ROLLOUT_ENABLED;
  static constexpr MlirBridgeRollout MLIR_BRIDGE_ROLLOUT_DISABLED = ConfigProto_Experimental_MlirBridgeRollout_MLIR_BRIDGE_ROLLOUT_DISABLED;
  static inline bool MlirBridgeRollout_IsValid(int value) {
    return ConfigProto_Experimental_MlirBridgeRollout_IsValid(value);
  }
  static constexpr MlirBridgeRollout MlirBridgeRollout_MIN = ConfigProto_Experimental_MlirBridgeRollout_MlirBridgeRollout_MIN;
  static constexpr MlirBridgeRollout MlirBridgeRollout_MAX = ConfigProto_Experimental_MlirBridgeRollout_MlirBridgeRollout_MAX;
  static constexpr int MlirBridgeRollout_ARRAYSIZE = ConfigProto_Experimental_MlirBridgeRollout_MlirBridgeRollout_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MlirBridgeRollout_descriptor() {
    return ConfigProto_Experimental_MlirBridgeRollout_descriptor();
  }
  template <typename T>
  static inline const std::string& MlirBridgeRollout_Name(T value) {
    return ConfigProto_Experimental_MlirBridgeRollout_Name(value);
  }
  static inline bool MlirBridgeRollout_Parse(absl::string_view name, MlirBridgeRollout* value) {
    return ConfigProto_Experimental_MlirBridgeRollout_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kCollectiveGroupLeaderFieldNumber = 1,
    kExecutorTypeFieldNumber = 3,
    kSessionMetadataFieldNumber = 11,
    kCoordinationConfigFieldNumber = 23,
    kRecvBufMaxChunkFieldNumber = 4,
    kUseNumaAffinityFieldNumber = 5,
    kCollectiveDeterministicSequentialExecutionFieldNumber = 6,
    kCollectiveNcclFieldNumber = 7,
    kShareSessionStateInClusterspecPropagationFieldNumber = 8,
    kDisableThreadSpinningFieldNumber = 9,
    kShareClusterDevicesInSessionFieldNumber = 10,
    kOptimizeForStaticGraphFieldNumber = 12,
    kEnableMlirBridgeFieldNumber = 13,
    kMlirBridgeRolloutFieldNumber = 17,
    kXlaFusionAutotunerThreshFieldNumber = 15,
    kEnableMlirGraphOptimizationFieldNumber = 16,
    kDisableOutputPartitionGraphsFieldNumber = 14,
    kUseTfrtFieldNumber = 18,
    kEnableMultiHostFieldNumber = 27,
    kXlaPreferSingleGraphClusterFieldNumber = 22,
    kDisableOptimizeForStaticGraphFieldNumber = 24,
    kDisableEagerExecutorStreamingEnqueueFieldNumber = 26,
    kFinalizeFunctionLibraryRuntimeFieldNumber = 33,
    kBackendServerPortFieldNumber = 28,
    kTfrtUseIfrtFieldNumber = 32,
    kTargetTpuFieldNumber = 29,
    kTargetGpuFieldNumber = 30,
    kDisableFunctionalOpsLoweringFieldNumber = 21,
    kStreamMergeThresholdFieldNumber = 31,
    kFinalizeResourceManagerFieldNumber = 34,
  };
  // string collective_group_leader = 1;
  void clear_collective_group_leader() ;
  const std::string& collective_group_leader() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_collective_group_leader(Arg_&& arg, Args_... args);
  std::string* mutable_collective_group_leader();
  PROTOBUF_NODISCARD std::string* release_collective_group_leader();
  void set_allocated_collective_group_leader(std::string* value);

  private:
  const std::string& _internal_collective_group_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collective_group_leader(
      const std::string& value);
  std::string* _internal_mutable_collective_group_leader();

  public:
  // string executor_type = 3;
  void clear_executor_type() ;
  const std::string& executor_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executor_type(Arg_&& arg, Args_... args);
  std::string* mutable_executor_type();
  PROTOBUF_NODISCARD std::string* release_executor_type();
  void set_allocated_executor_type(std::string* value);

  private:
  const std::string& _internal_executor_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executor_type(
      const std::string& value);
  std::string* _internal_mutable_executor_type();

  public:
  // .tensorflow.SessionMetadata session_metadata = 11;
  bool has_session_metadata() const;
  void clear_session_metadata() ;
  const ::tensorflow::SessionMetadata& session_metadata() const;
  PROTOBUF_NODISCARD ::tensorflow::SessionMetadata* release_session_metadata();
  ::tensorflow::SessionMetadata* mutable_session_metadata();
  void set_allocated_session_metadata(::tensorflow::SessionMetadata* value);
  void unsafe_arena_set_allocated_session_metadata(::tensorflow::SessionMetadata* value);
  ::tensorflow::SessionMetadata* unsafe_arena_release_session_metadata();

  private:
  const ::tensorflow::SessionMetadata& _internal_session_metadata() const;
  ::tensorflow::SessionMetadata* _internal_mutable_session_metadata();

  public:
  // .tensorflow.CoordinationServiceConfig coordination_config = 23;
  bool has_coordination_config() const;
  void clear_coordination_config() ;
  const ::tensorflow::CoordinationServiceConfig& coordination_config() const;
  PROTOBUF_NODISCARD ::tensorflow::CoordinationServiceConfig* release_coordination_config();
  ::tensorflow::CoordinationServiceConfig* mutable_coordination_config();
  void set_allocated_coordination_config(::tensorflow::CoordinationServiceConfig* value);
  void unsafe_arena_set_allocated_coordination_config(::tensorflow::CoordinationServiceConfig* value);
  ::tensorflow::CoordinationServiceConfig* unsafe_arena_release_coordination_config();

  private:
  const ::tensorflow::CoordinationServiceConfig& _internal_coordination_config() const;
  ::tensorflow::CoordinationServiceConfig* _internal_mutable_coordination_config();

  public:
  // int32 recv_buf_max_chunk = 4;
  void clear_recv_buf_max_chunk() ;
  ::int32_t recv_buf_max_chunk() const;
  void set_recv_buf_max_chunk(::int32_t value);

  private:
  ::int32_t _internal_recv_buf_max_chunk() const;
  void _internal_set_recv_buf_max_chunk(::int32_t value);

  public:
  // bool use_numa_affinity = 5;
  void clear_use_numa_affinity() ;
  bool use_numa_affinity() const;
  void set_use_numa_affinity(bool value);

  private:
  bool _internal_use_numa_affinity() const;
  void _internal_set_use_numa_affinity(bool value);

  public:
  // bool collective_deterministic_sequential_execution = 6;
  void clear_collective_deterministic_sequential_execution() ;
  bool collective_deterministic_sequential_execution() const;
  void set_collective_deterministic_sequential_execution(bool value);

  private:
  bool _internal_collective_deterministic_sequential_execution() const;
  void _internal_set_collective_deterministic_sequential_execution(bool value);

  public:
  // bool collective_nccl = 7;
  void clear_collective_nccl() ;
  bool collective_nccl() const;
  void set_collective_nccl(bool value);

  private:
  bool _internal_collective_nccl() const;
  void _internal_set_collective_nccl(bool value);

  public:
  // bool share_session_state_in_clusterspec_propagation = 8;
  void clear_share_session_state_in_clusterspec_propagation() ;
  bool share_session_state_in_clusterspec_propagation() const;
  void set_share_session_state_in_clusterspec_propagation(bool value);

  private:
  bool _internal_share_session_state_in_clusterspec_propagation() const;
  void _internal_set_share_session_state_in_clusterspec_propagation(bool value);

  public:
  // bool disable_thread_spinning = 9;
  void clear_disable_thread_spinning() ;
  bool disable_thread_spinning() const;
  void set_disable_thread_spinning(bool value);

  private:
  bool _internal_disable_thread_spinning() const;
  void _internal_set_disable_thread_spinning(bool value);

  public:
  // bool share_cluster_devices_in_session = 10;
  void clear_share_cluster_devices_in_session() ;
  bool share_cluster_devices_in_session() const;
  void set_share_cluster_devices_in_session(bool value);

  private:
  bool _internal_share_cluster_devices_in_session() const;
  void _internal_set_share_cluster_devices_in_session(bool value);

  public:
  // bool optimize_for_static_graph = 12;
  void clear_optimize_for_static_graph() ;
  bool optimize_for_static_graph() const;
  void set_optimize_for_static_graph(bool value);

  private:
  bool _internal_optimize_for_static_graph() const;
  void _internal_set_optimize_for_static_graph(bool value);

  public:
  // bool enable_mlir_bridge = 13;
  void clear_enable_mlir_bridge() ;
  bool enable_mlir_bridge() const;
  void set_enable_mlir_bridge(bool value);

  private:
  bool _internal_enable_mlir_bridge() const;
  void _internal_set_enable_mlir_bridge(bool value);

  public:
  // .tensorflow.ConfigProto.Experimental.MlirBridgeRollout mlir_bridge_rollout = 17;
  void clear_mlir_bridge_rollout() ;
  ::tensorflow::ConfigProto_Experimental_MlirBridgeRollout mlir_bridge_rollout() const;
  void set_mlir_bridge_rollout(::tensorflow::ConfigProto_Experimental_MlirBridgeRollout value);

  private:
  ::tensorflow::ConfigProto_Experimental_MlirBridgeRollout _internal_mlir_bridge_rollout() const;
  void _internal_set_mlir_bridge_rollout(::tensorflow::ConfigProto_Experimental_MlirBridgeRollout value);

  public:
  // int64 xla_fusion_autotuner_thresh = 15;
  void clear_xla_fusion_autotuner_thresh() ;
  ::int64_t xla_fusion_autotuner_thresh() const;
  void set_xla_fusion_autotuner_thresh(::int64_t value);

  private:
  ::int64_t _internal_xla_fusion_autotuner_thresh() const;
  void _internal_set_xla_fusion_autotuner_thresh(::int64_t value);

  public:
  // bool enable_mlir_graph_optimization = 16;
  void clear_enable_mlir_graph_optimization() ;
  bool enable_mlir_graph_optimization() const;
  void set_enable_mlir_graph_optimization(bool value);

  private:
  bool _internal_enable_mlir_graph_optimization() const;
  void _internal_set_enable_mlir_graph_optimization(bool value);

  public:
  // bool disable_output_partition_graphs = 14;
  void clear_disable_output_partition_graphs() ;
  bool disable_output_partition_graphs() const;
  void set_disable_output_partition_graphs(bool value);

  private:
  bool _internal_disable_output_partition_graphs() const;
  void _internal_set_disable_output_partition_graphs(bool value);

  public:
  // bool use_tfrt = 18;
  void clear_use_tfrt() ;
  bool use_tfrt() const;
  void set_use_tfrt(bool value);

  private:
  bool _internal_use_tfrt() const;
  void _internal_set_use_tfrt(bool value);

  public:
  // bool enable_multi_host = 27;
  void clear_enable_multi_host() ;
  bool enable_multi_host() const;
  void set_enable_multi_host(bool value);

  private:
  bool _internal_enable_multi_host() const;
  void _internal_set_enable_multi_host(bool value);

  public:
  // bool xla_prefer_single_graph_cluster = 22;
  void clear_xla_prefer_single_graph_cluster() ;
  bool xla_prefer_single_graph_cluster() const;
  void set_xla_prefer_single_graph_cluster(bool value);

  private:
  bool _internal_xla_prefer_single_graph_cluster() const;
  void _internal_set_xla_prefer_single_graph_cluster(bool value);

  public:
  // bool disable_optimize_for_static_graph = 24;
  void clear_disable_optimize_for_static_graph() ;
  bool disable_optimize_for_static_graph() const;
  void set_disable_optimize_for_static_graph(bool value);

  private:
  bool _internal_disable_optimize_for_static_graph() const;
  void _internal_set_disable_optimize_for_static_graph(bool value);

  public:
  // bool disable_eager_executor_streaming_enqueue = 26;
  void clear_disable_eager_executor_streaming_enqueue() ;
  bool disable_eager_executor_streaming_enqueue() const;
  void set_disable_eager_executor_streaming_enqueue(bool value);

  private:
  bool _internal_disable_eager_executor_streaming_enqueue() const;
  void _internal_set_disable_eager_executor_streaming_enqueue(bool value);

  public:
  // bool finalize_function_library_runtime = 33;
  void clear_finalize_function_library_runtime() ;
  bool finalize_function_library_runtime() const;
  void set_finalize_function_library_runtime(bool value);

  private:
  bool _internal_finalize_function_library_runtime() const;
  void _internal_set_finalize_function_library_runtime(bool value);

  public:
  // int32 backend_server_port = 28;
  void clear_backend_server_port() ;
  ::int32_t backend_server_port() const;
  void set_backend_server_port(::int32_t value);

  private:
  ::int32_t _internal_backend_server_port() const;
  void _internal_set_backend_server_port(::int32_t value);

  public:
  // bool tfrt_use_ifrt = 32;
  void clear_tfrt_use_ifrt() ;
  bool tfrt_use_ifrt() const;
  void set_tfrt_use_ifrt(bool value);

  private:
  bool _internal_tfrt_use_ifrt() const;
  void _internal_set_tfrt_use_ifrt(bool value);

  public:
  // bool target_tpu = 29;
  void clear_target_tpu() ;
  bool target_tpu() const;
  void set_target_tpu(bool value);

  private:
  bool _internal_target_tpu() const;
  void _internal_set_target_tpu(bool value);

  public:
  // bool target_gpu = 30;
  void clear_target_gpu() ;
  bool target_gpu() const;
  void set_target_gpu(bool value);

  private:
  bool _internal_target_gpu() const;
  void _internal_set_target_gpu(bool value);

  public:
  // bool disable_functional_ops_lowering = 21;
  void clear_disable_functional_ops_lowering() ;
  bool disable_functional_ops_lowering() const;
  void set_disable_functional_ops_lowering(bool value);

  private:
  bool _internal_disable_functional_ops_lowering() const;
  void _internal_set_disable_functional_ops_lowering(bool value);

  public:
  // int32 stream_merge_threshold = 31;
  void clear_stream_merge_threshold() ;
  ::int32_t stream_merge_threshold() const;
  void set_stream_merge_threshold(::int32_t value);

  private:
  ::int32_t _internal_stream_merge_threshold() const;
  void _internal_set_stream_merge_threshold(::int32_t value);

  public:
  // bool finalize_resource_manager = 34;
  void clear_finalize_resource_manager() ;
  bool finalize_resource_manager() const;
  void set_finalize_resource_manager(bool value);

  private:
  bool _internal_finalize_resource_manager() const;
  void _internal_set_finalize_resource_manager(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.ConfigProto.Experimental)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 30, 2,
      104, 7>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConfigProto_Experimental& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr collective_group_leader_;
    ::google::protobuf::internal::ArenaStringPtr executor_type_;
    ::tensorflow::SessionMetadata* session_metadata_;
    ::tensorflow::CoordinationServiceConfig* coordination_config_;
    ::int32_t recv_buf_max_chunk_;
    bool use_numa_affinity_;
    bool collective_deterministic_sequential_execution_;
    bool collective_nccl_;
    bool share_session_state_in_clusterspec_propagation_;
    bool disable_thread_spinning_;
    bool share_cluster_devices_in_session_;
    bool optimize_for_static_graph_;
    bool enable_mlir_bridge_;
    int mlir_bridge_rollout_;
    ::int64_t xla_fusion_autotuner_thresh_;
    bool enable_mlir_graph_optimization_;
    bool disable_output_partition_graphs_;
    bool use_tfrt_;
    bool enable_multi_host_;
    bool xla_prefer_single_graph_cluster_;
    bool disable_optimize_for_static_graph_;
    bool disable_eager_executor_streaming_enqueue_;
    bool finalize_function_library_runtime_;
    ::int32_t backend_server_port_;
    bool tfrt_use_ifrt_;
    bool target_tpu_;
    bool target_gpu_;
    bool disable_functional_ops_lowering_;
    ::int32_t stream_merge_threshold_;
    bool finalize_resource_manager_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CallableOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.CallableOptions) */ {
 public:
  inline CallableOptions() : CallableOptions(nullptr) {}
  ~CallableOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CallableOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline CallableOptions(const CallableOptions& from) : CallableOptions(nullptr, from) {}
  inline CallableOptions(CallableOptions&& from) noexcept
      : CallableOptions(nullptr, std::move(from)) {}
  inline CallableOptions& operator=(const CallableOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallableOptions& operator=(CallableOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallableOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallableOptions* internal_default_instance() {
    return reinterpret_cast<const CallableOptions*>(
        &_CallableOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(CallableOptions& a, CallableOptions& b) { a.Swap(&b); }
  inline void Swap(CallableOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallableOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallableOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CallableOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CallableOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CallableOptions& from) { CallableOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CallableOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.CallableOptions"; }

 protected:
  explicit CallableOptions(::google::protobuf::Arena* arena);
  CallableOptions(::google::protobuf::Arena* arena, const CallableOptions& from);
  CallableOptions(::google::protobuf::Arena* arena, CallableOptions&& from) noexcept
      : CallableOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFeedFieldNumber = 1,
    kFetchFieldNumber = 2,
    kTargetFieldNumber = 3,
    kTensorConnectionFieldNumber = 5,
    kFeedDevicesFieldNumber = 6,
    kFetchDevicesFieldNumber = 7,
    kRunOptionsFieldNumber = 4,
    kFetchSkipSyncFieldNumber = 8,
  };
  // repeated string feed = 1;
  int feed_size() const;
  private:
  int _internal_feed_size() const;

  public:
  void clear_feed() ;
  const std::string& feed(int index) const;
  std::string* mutable_feed(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed(int index, Arg_&& value, Args_... args);
  std::string* add_feed();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_feed(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& feed() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_feed();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_feed() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_feed();

  public:
  // repeated string fetch = 2;
  int fetch_size() const;
  private:
  int _internal_fetch_size() const;

  public:
  void clear_fetch() ;
  const std::string& fetch(int index) const;
  std::string* mutable_fetch(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fetch(int index, Arg_&& value, Args_... args);
  std::string* add_fetch();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_fetch(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& fetch() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_fetch();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_fetch() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_fetch();

  public:
  // repeated string target = 3;
  int target_size() const;
  private:
  int _internal_target_size() const;

  public:
  void clear_target() ;
  const std::string& target(int index) const;
  std::string* mutable_target(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target(int index, Arg_&& value, Args_... args);
  std::string* add_target();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_target(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& target() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_target();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_target() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_target();

  public:
  // repeated .tensorflow.TensorConnection tensor_connection = 5;
  int tensor_connection_size() const;
  private:
  int _internal_tensor_connection_size() const;

  public:
  void clear_tensor_connection() ;
  ::tensorflow::TensorConnection* mutable_tensor_connection(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::TensorConnection>* mutable_tensor_connection();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::TensorConnection>& _internal_tensor_connection() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::TensorConnection>* _internal_mutable_tensor_connection();
  public:
  const ::tensorflow::TensorConnection& tensor_connection(int index) const;
  ::tensorflow::TensorConnection* add_tensor_connection();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::TensorConnection>& tensor_connection() const;
  // map<string, string> feed_devices = 6;
  int feed_devices_size() const;
  private:
  int _internal_feed_devices_size() const;

  public:
  void clear_feed_devices() ;
  const ::google::protobuf::Map<std::string, std::string>& feed_devices() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_feed_devices();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_feed_devices() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_feed_devices();

  public:
  // map<string, string> fetch_devices = 7;
  int fetch_devices_size() const;
  private:
  int _internal_fetch_devices_size() const;

  public:
  void clear_fetch_devices() ;
  const ::google::protobuf::Map<std::string, std::string>& fetch_devices() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_fetch_devices();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_fetch_devices() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_fetch_devices();

  public:
  // .tensorflow.RunOptions run_options = 4;
  bool has_run_options() const;
  void clear_run_options() ;
  const ::tensorflow::RunOptions& run_options() const;
  PROTOBUF_NODISCARD ::tensorflow::RunOptions* release_run_options();
  ::tensorflow::RunOptions* mutable_run_options();
  void set_allocated_run_options(::tensorflow::RunOptions* value);
  void unsafe_arena_set_allocated_run_options(::tensorflow::RunOptions* value);
  ::tensorflow::RunOptions* unsafe_arena_release_run_options();

  private:
  const ::tensorflow::RunOptions& _internal_run_options() const;
  ::tensorflow::RunOptions* _internal_mutable_run_options();

  public:
  // bool fetch_skip_sync = 8;
  void clear_fetch_skip_sync() ;
  bool fetch_skip_sync() const;
  void set_fetch_skip_sync(bool value);

  private:
  bool _internal_fetch_skip_sync() const;
  void _internal_set_fetch_skip_sync(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.CallableOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 4,
      83, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CallableOptions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> feed_;
    ::google::protobuf::RepeatedPtrField<std::string> fetch_;
    ::google::protobuf::RepeatedPtrField<std::string> target_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorConnection > tensor_connection_;
    ::google::protobuf::internal::MapField<CallableOptions_FeedDevicesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        feed_devices_;
    ::google::protobuf::internal::MapField<CallableOptions_FetchDevicesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        fetch_devices_;
    ::tensorflow::RunOptions* run_options_;
    bool fetch_skip_sync_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GraphOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.GraphOptions) */ {
 public:
  inline GraphOptions() : GraphOptions(nullptr) {}
  ~GraphOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GraphOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline GraphOptions(const GraphOptions& from) : GraphOptions(nullptr, from) {}
  inline GraphOptions(GraphOptions&& from) noexcept
      : GraphOptions(nullptr, std::move(from)) {}
  inline GraphOptions& operator=(const GraphOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphOptions& operator=(GraphOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphOptions* internal_default_instance() {
    return reinterpret_cast<const GraphOptions*>(
        &_GraphOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GraphOptions& a, GraphOptions& b) { a.Swap(&b); }
  inline void Swap(GraphOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GraphOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GraphOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GraphOptions& from) { GraphOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GraphOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.GraphOptions"; }

 protected:
  explicit GraphOptions(::google::protobuf::Arena* arena);
  GraphOptions(::google::protobuf::Arena* arena, const GraphOptions& from);
  GraphOptions(::google::protobuf::Arena* arena, GraphOptions&& from) noexcept
      : GraphOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOptimizerOptionsFieldNumber = 3,
    kRewriteOptionsFieldNumber = 10,
    kBuildCostModelFieldNumber = 4,
    kEnableRecvSchedulingFieldNumber = 2,
    kInferShapesFieldNumber = 5,
    kPlacePrunedGraphFieldNumber = 6,
    kEnableBfloat16SendrecvFieldNumber = 7,
    kTimelineStepFieldNumber = 8,
    kBuildCostModelAfterFieldNumber = 9,
  };
  // .tensorflow.OptimizerOptions optimizer_options = 3;
  bool has_optimizer_options() const;
  void clear_optimizer_options() ;
  const ::tensorflow::OptimizerOptions& optimizer_options() const;
  PROTOBUF_NODISCARD ::tensorflow::OptimizerOptions* release_optimizer_options();
  ::tensorflow::OptimizerOptions* mutable_optimizer_options();
  void set_allocated_optimizer_options(::tensorflow::OptimizerOptions* value);
  void unsafe_arena_set_allocated_optimizer_options(::tensorflow::OptimizerOptions* value);
  ::tensorflow::OptimizerOptions* unsafe_arena_release_optimizer_options();

  private:
  const ::tensorflow::OptimizerOptions& _internal_optimizer_options() const;
  ::tensorflow::OptimizerOptions* _internal_mutable_optimizer_options();

  public:
  // .tensorflow.RewriterConfig rewrite_options = 10;
  bool has_rewrite_options() const;
  void clear_rewrite_options() ;
  const ::tensorflow::RewriterConfig& rewrite_options() const;
  PROTOBUF_NODISCARD ::tensorflow::RewriterConfig* release_rewrite_options();
  ::tensorflow::RewriterConfig* mutable_rewrite_options();
  void set_allocated_rewrite_options(::tensorflow::RewriterConfig* value);
  void unsafe_arena_set_allocated_rewrite_options(::tensorflow::RewriterConfig* value);
  ::tensorflow::RewriterConfig* unsafe_arena_release_rewrite_options();

  private:
  const ::tensorflow::RewriterConfig& _internal_rewrite_options() const;
  ::tensorflow::RewriterConfig* _internal_mutable_rewrite_options();

  public:
  // int64 build_cost_model = 4;
  void clear_build_cost_model() ;
  ::int64_t build_cost_model() const;
  void set_build_cost_model(::int64_t value);

  private:
  ::int64_t _internal_build_cost_model() const;
  void _internal_set_build_cost_model(::int64_t value);

  public:
  // bool enable_recv_scheduling = 2;
  void clear_enable_recv_scheduling() ;
  bool enable_recv_scheduling() const;
  void set_enable_recv_scheduling(bool value);

  private:
  bool _internal_enable_recv_scheduling() const;
  void _internal_set_enable_recv_scheduling(bool value);

  public:
  // bool infer_shapes = 5;
  void clear_infer_shapes() ;
  bool infer_shapes() const;
  void set_infer_shapes(bool value);

  private:
  bool _internal_infer_shapes() const;
  void _internal_set_infer_shapes(bool value);

  public:
  // bool place_pruned_graph = 6;
  void clear_place_pruned_graph() ;
  bool place_pruned_graph() const;
  void set_place_pruned_graph(bool value);

  private:
  bool _internal_place_pruned_graph() const;
  void _internal_set_place_pruned_graph(bool value);

  public:
  // bool enable_bfloat16_sendrecv = 7;
  void clear_enable_bfloat16_sendrecv() ;
  bool enable_bfloat16_sendrecv() const;
  void set_enable_bfloat16_sendrecv(bool value);

  private:
  bool _internal_enable_bfloat16_sendrecv() const;
  void _internal_set_enable_bfloat16_sendrecv(bool value);

  public:
  // int32 timeline_step = 8;
  void clear_timeline_step() ;
  ::int32_t timeline_step() const;
  void set_timeline_step(::int32_t value);

  private:
  ::int32_t _internal_timeline_step() const;
  void _internal_set_timeline_step(::int32_t value);

  public:
  // int64 build_cost_model_after = 9;
  void clear_build_cost_model_after() ;
  ::int64_t build_cost_model_after() const;
  void set_build_cost_model_after(::int64_t value);

  private:
  ::int64_t _internal_build_cost_model_after() const;
  void _internal_set_build_cost_model_after(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.GraphOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GraphOptions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::OptimizerOptions* optimizer_options_;
    ::tensorflow::RewriterConfig* rewrite_options_;
    ::int64_t build_cost_model_;
    bool enable_recv_scheduling_;
    bool infer_shapes_;
    bool place_pruned_graph_;
    bool enable_bfloat16_sendrecv_;
    ::int32_t timeline_step_;
    ::int64_t build_cost_model_after_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ConfigProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.ConfigProto) */ {
 public:
  inline ConfigProto() : ConfigProto(nullptr) {}
  ~ConfigProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConfigProto(const ConfigProto& from) : ConfigProto(nullptr, from) {}
  inline ConfigProto(ConfigProto&& from) noexcept
      : ConfigProto(nullptr, std::move(from)) {}
  inline ConfigProto& operator=(const ConfigProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigProto& operator=(ConfigProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigProto* internal_default_instance() {
    return reinterpret_cast<const ConfigProto*>(
        &_ConfigProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ConfigProto& a, ConfigProto& b) { a.Swap(&b); }
  inline void Swap(ConfigProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ConfigProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigProto& from) { ConfigProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConfigProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.ConfigProto"; }

 protected:
  explicit ConfigProto(::google::protobuf::Arena* arena);
  ConfigProto(::google::protobuf::Arena* arena, const ConfigProto& from);
  ConfigProto(::google::protobuf::Arena* arena, ConfigProto&& from) noexcept
      : ConfigProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Experimental = ConfigProto_Experimental;

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceCountFieldNumber = 1,
    kDeviceFiltersFieldNumber = 4,
    kSessionInterOpThreadPoolFieldNumber = 12,
    kGpuOptionsFieldNumber = 6,
    kGraphOptionsFieldNumber = 10,
    kRpcOptionsFieldNumber = 13,
    kClusterDefFieldNumber = 14,
    kExperimentalFieldNumber = 16,
    kPluggableDeviceOptionsFieldNumber = 18,
    kIntraOpParallelismThreadsFieldNumber = 2,
    kPlacementPeriodFieldNumber = 3,
    kInterOpParallelismThreadsFieldNumber = 5,
    kUsePerSessionThreadsFieldNumber = 9,
    kAllowSoftPlacementFieldNumber = 7,
    kLogDevicePlacementFieldNumber = 8,
    kIsolateSessionStateFieldNumber = 15,
    kOperationTimeoutInMsFieldNumber = 11,
    kShareClusterDevicesInSessionFieldNumber = 17,
  };
  // map<string, int32> device_count = 1;
  int device_count_size() const;
  private:
  int _internal_device_count_size() const;

  public:
  void clear_device_count() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& device_count() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_device_count();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_device_count() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_device_count();

  public:
  // repeated string device_filters = 4;
  int device_filters_size() const;
  private:
  int _internal_device_filters_size() const;

  public:
  void clear_device_filters() ;
  const std::string& device_filters(int index) const;
  std::string* mutable_device_filters(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_filters(int index, Arg_&& value, Args_... args);
  std::string* add_device_filters();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_device_filters(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& device_filters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_device_filters();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_device_filters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_device_filters();

  public:
  // repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
  int session_inter_op_thread_pool_size() const;
  private:
  int _internal_session_inter_op_thread_pool_size() const;

  public:
  void clear_session_inter_op_thread_pool() ;
  ::tensorflow::ThreadPoolOptionProto* mutable_session_inter_op_thread_pool(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::ThreadPoolOptionProto>* mutable_session_inter_op_thread_pool();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::ThreadPoolOptionProto>& _internal_session_inter_op_thread_pool() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::ThreadPoolOptionProto>* _internal_mutable_session_inter_op_thread_pool();
  public:
  const ::tensorflow::ThreadPoolOptionProto& session_inter_op_thread_pool(int index) const;
  ::tensorflow::ThreadPoolOptionProto* add_session_inter_op_thread_pool();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::ThreadPoolOptionProto>& session_inter_op_thread_pool() const;
  // .tensorflow.GPUOptions gpu_options = 6;
  bool has_gpu_options() const;
  void clear_gpu_options() ;
  const ::tensorflow::GPUOptions& gpu_options() const;
  PROTOBUF_NODISCARD ::tensorflow::GPUOptions* release_gpu_options();
  ::tensorflow::GPUOptions* mutable_gpu_options();
  void set_allocated_gpu_options(::tensorflow::GPUOptions* value);
  void unsafe_arena_set_allocated_gpu_options(::tensorflow::GPUOptions* value);
  ::tensorflow::GPUOptions* unsafe_arena_release_gpu_options();

  private:
  const ::tensorflow::GPUOptions& _internal_gpu_options() const;
  ::tensorflow::GPUOptions* _internal_mutable_gpu_options();

  public:
  // .tensorflow.GraphOptions graph_options = 10;
  bool has_graph_options() const;
  void clear_graph_options() ;
  const ::tensorflow::GraphOptions& graph_options() const;
  PROTOBUF_NODISCARD ::tensorflow::GraphOptions* release_graph_options();
  ::tensorflow::GraphOptions* mutable_graph_options();
  void set_allocated_graph_options(::tensorflow::GraphOptions* value);
  void unsafe_arena_set_allocated_graph_options(::tensorflow::GraphOptions* value);
  ::tensorflow::GraphOptions* unsafe_arena_release_graph_options();

  private:
  const ::tensorflow::GraphOptions& _internal_graph_options() const;
  ::tensorflow::GraphOptions* _internal_mutable_graph_options();

  public:
  // .tensorflow.RPCOptions rpc_options = 13;
  bool has_rpc_options() const;
  void clear_rpc_options() ;
  const ::tensorflow::RPCOptions& rpc_options() const;
  PROTOBUF_NODISCARD ::tensorflow::RPCOptions* release_rpc_options();
  ::tensorflow::RPCOptions* mutable_rpc_options();
  void set_allocated_rpc_options(::tensorflow::RPCOptions* value);
  void unsafe_arena_set_allocated_rpc_options(::tensorflow::RPCOptions* value);
  ::tensorflow::RPCOptions* unsafe_arena_release_rpc_options();

  private:
  const ::tensorflow::RPCOptions& _internal_rpc_options() const;
  ::tensorflow::RPCOptions* _internal_mutable_rpc_options();

  public:
  // .tensorflow.ClusterDef cluster_def = 14;
  bool has_cluster_def() const;
  void clear_cluster_def() ;
  const ::tensorflow::ClusterDef& cluster_def() const;
  PROTOBUF_NODISCARD ::tensorflow::ClusterDef* release_cluster_def();
  ::tensorflow::ClusterDef* mutable_cluster_def();
  void set_allocated_cluster_def(::tensorflow::ClusterDef* value);
  void unsafe_arena_set_allocated_cluster_def(::tensorflow::ClusterDef* value);
  ::tensorflow::ClusterDef* unsafe_arena_release_cluster_def();

  private:
  const ::tensorflow::ClusterDef& _internal_cluster_def() const;
  ::tensorflow::ClusterDef* _internal_mutable_cluster_def();

  public:
  // .tensorflow.ConfigProto.Experimental experimental = 16;
  bool has_experimental() const;
  void clear_experimental() ;
  const ::tensorflow::ConfigProto_Experimental& experimental() const;
  PROTOBUF_NODISCARD ::tensorflow::ConfigProto_Experimental* release_experimental();
  ::tensorflow::ConfigProto_Experimental* mutable_experimental();
  void set_allocated_experimental(::tensorflow::ConfigProto_Experimental* value);
  void unsafe_arena_set_allocated_experimental(::tensorflow::ConfigProto_Experimental* value);
  ::tensorflow::ConfigProto_Experimental* unsafe_arena_release_experimental();

  private:
  const ::tensorflow::ConfigProto_Experimental& _internal_experimental() const;
  ::tensorflow::ConfigProto_Experimental* _internal_mutable_experimental();

  public:
  // .tensorflow.GPUOptions pluggable_device_options = 18;
  bool has_pluggable_device_options() const;
  void clear_pluggable_device_options() ;
  const ::tensorflow::GPUOptions& pluggable_device_options() const;
  PROTOBUF_NODISCARD ::tensorflow::GPUOptions* release_pluggable_device_options();
  ::tensorflow::GPUOptions* mutable_pluggable_device_options();
  void set_allocated_pluggable_device_options(::tensorflow::GPUOptions* value);
  void unsafe_arena_set_allocated_pluggable_device_options(::tensorflow::GPUOptions* value);
  ::tensorflow::GPUOptions* unsafe_arena_release_pluggable_device_options();

  private:
  const ::tensorflow::GPUOptions& _internal_pluggable_device_options() const;
  ::tensorflow::GPUOptions* _internal_mutable_pluggable_device_options();

  public:
  // int32 intra_op_parallelism_threads = 2;
  void clear_intra_op_parallelism_threads() ;
  ::int32_t intra_op_parallelism_threads() const;
  void set_intra_op_parallelism_threads(::int32_t value);

  private:
  ::int32_t _internal_intra_op_parallelism_threads() const;
  void _internal_set_intra_op_parallelism_threads(::int32_t value);

  public:
  // int32 placement_period = 3;
  void clear_placement_period() ;
  ::int32_t placement_period() const;
  void set_placement_period(::int32_t value);

  private:
  ::int32_t _internal_placement_period() const;
  void _internal_set_placement_period(::int32_t value);

  public:
  // int32 inter_op_parallelism_threads = 5;
  void clear_inter_op_parallelism_threads() ;
  ::int32_t inter_op_parallelism_threads() const;
  void set_inter_op_parallelism_threads(::int32_t value);

  private:
  ::int32_t _internal_inter_op_parallelism_threads() const;
  void _internal_set_inter_op_parallelism_threads(::int32_t value);

  public:
  // bool use_per_session_threads = 9;
  void clear_use_per_session_threads() ;
  bool use_per_session_threads() const;
  void set_use_per_session_threads(bool value);

  private:
  bool _internal_use_per_session_threads() const;
  void _internal_set_use_per_session_threads(bool value);

  public:
  // bool allow_soft_placement = 7;
  void clear_allow_soft_placement() ;
  bool allow_soft_placement() const;
  void set_allow_soft_placement(bool value);

  private:
  bool _internal_allow_soft_placement() const;
  void _internal_set_allow_soft_placement(bool value);

  public:
  // bool log_device_placement = 8;
  void clear_log_device_placement() ;
  bool log_device_placement() const;
  void set_log_device_placement(bool value);

  private:
  bool _internal_log_device_placement() const;
  void _internal_set_log_device_placement(bool value);

  public:
  // bool isolate_session_state = 15;
  void clear_isolate_session_state() ;
  bool isolate_session_state() const;
  void set_isolate_session_state(bool value);

  private:
  bool _internal_isolate_session_state() const;
  void _internal_set_isolate_session_state(bool value);

  public:
  // int64 operation_timeout_in_ms = 11;
  void clear_operation_timeout_in_ms() ;
  ::int64_t operation_timeout_in_ms() const;
  void set_operation_timeout_in_ms(::int64_t value);

  private:
  ::int64_t _internal_operation_timeout_in_ms() const;
  void _internal_set_operation_timeout_in_ms(::int64_t value);

  public:
  // bool share_cluster_devices_in_session = 17;
  void clear_share_cluster_devices_in_session() ;
  bool share_cluster_devices_in_session() const;
  void set_share_cluster_devices_in_session(bool value);

  private:
  bool _internal_share_cluster_devices_in_session() const;
  void _internal_set_share_cluster_devices_in_session(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.ConfigProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 8,
      73, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConfigProto& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<ConfigProto_DeviceCountEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        device_count_;
    ::google::protobuf::RepeatedPtrField<std::string> device_filters_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::ThreadPoolOptionProto > session_inter_op_thread_pool_;
    ::tensorflow::GPUOptions* gpu_options_;
    ::tensorflow::GraphOptions* graph_options_;
    ::tensorflow::RPCOptions* rpc_options_;
    ::tensorflow::ClusterDef* cluster_def_;
    ::tensorflow::ConfigProto_Experimental* experimental_;
    ::tensorflow::GPUOptions* pluggable_device_options_;
    ::int32_t intra_op_parallelism_threads_;
    ::int32_t placement_period_;
    ::int32_t inter_op_parallelism_threads_;
    bool use_per_session_threads_;
    bool allow_soft_placement_;
    bool log_device_placement_;
    bool isolate_session_state_;
    ::int64_t operation_timeout_in_ms_;
    bool share_cluster_devices_in_session_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RunMetadata_FunctionGraphs final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.RunMetadata.FunctionGraphs) */ {
 public:
  inline RunMetadata_FunctionGraphs() : RunMetadata_FunctionGraphs(nullptr) {}
  ~RunMetadata_FunctionGraphs() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RunMetadata_FunctionGraphs(
      ::google::protobuf::internal::ConstantInitialized);

  inline RunMetadata_FunctionGraphs(const RunMetadata_FunctionGraphs& from) : RunMetadata_FunctionGraphs(nullptr, from) {}
  inline RunMetadata_FunctionGraphs(RunMetadata_FunctionGraphs&& from) noexcept
      : RunMetadata_FunctionGraphs(nullptr, std::move(from)) {}
  inline RunMetadata_FunctionGraphs& operator=(const RunMetadata_FunctionGraphs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunMetadata_FunctionGraphs& operator=(RunMetadata_FunctionGraphs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunMetadata_FunctionGraphs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunMetadata_FunctionGraphs* internal_default_instance() {
    return reinterpret_cast<const RunMetadata_FunctionGraphs*>(
        &_RunMetadata_FunctionGraphs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(RunMetadata_FunctionGraphs& a, RunMetadata_FunctionGraphs& b) { a.Swap(&b); }
  inline void Swap(RunMetadata_FunctionGraphs* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunMetadata_FunctionGraphs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunMetadata_FunctionGraphs* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RunMetadata_FunctionGraphs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RunMetadata_FunctionGraphs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RunMetadata_FunctionGraphs& from) { RunMetadata_FunctionGraphs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RunMetadata_FunctionGraphs* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.RunMetadata.FunctionGraphs"; }

 protected:
  explicit RunMetadata_FunctionGraphs(::google::protobuf::Arena* arena);
  RunMetadata_FunctionGraphs(::google::protobuf::Arena* arena, const RunMetadata_FunctionGraphs& from);
  RunMetadata_FunctionGraphs(::google::protobuf::Arena* arena, RunMetadata_FunctionGraphs&& from) noexcept
      : RunMetadata_FunctionGraphs(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPartitionGraphsFieldNumber = 1,
    kPreOptimizationGraphFieldNumber = 2,
    kPostOptimizationGraphFieldNumber = 3,
  };
  // repeated .tensorflow.GraphDef partition_graphs = 1;
  int partition_graphs_size() const;
  private:
  int _internal_partition_graphs_size() const;

  public:
  void clear_partition_graphs() ;
  ::tensorflow::GraphDef* mutable_partition_graphs(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>* mutable_partition_graphs();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>& _internal_partition_graphs() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>* _internal_mutable_partition_graphs();
  public:
  const ::tensorflow::GraphDef& partition_graphs(int index) const;
  ::tensorflow::GraphDef* add_partition_graphs();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>& partition_graphs() const;
  // .tensorflow.GraphDef pre_optimization_graph = 2;
  bool has_pre_optimization_graph() const;
  void clear_pre_optimization_graph() ;
  const ::tensorflow::GraphDef& pre_optimization_graph() const;
  PROTOBUF_NODISCARD ::tensorflow::GraphDef* release_pre_optimization_graph();
  ::tensorflow::GraphDef* mutable_pre_optimization_graph();
  void set_allocated_pre_optimization_graph(::tensorflow::GraphDef* value);
  void unsafe_arena_set_allocated_pre_optimization_graph(::tensorflow::GraphDef* value);
  ::tensorflow::GraphDef* unsafe_arena_release_pre_optimization_graph();

  private:
  const ::tensorflow::GraphDef& _internal_pre_optimization_graph() const;
  ::tensorflow::GraphDef* _internal_mutable_pre_optimization_graph();

  public:
  // .tensorflow.GraphDef post_optimization_graph = 3;
  bool has_post_optimization_graph() const;
  void clear_post_optimization_graph() ;
  const ::tensorflow::GraphDef& post_optimization_graph() const;
  PROTOBUF_NODISCARD ::tensorflow::GraphDef* release_post_optimization_graph();
  ::tensorflow::GraphDef* mutable_post_optimization_graph();
  void set_allocated_post_optimization_graph(::tensorflow::GraphDef* value);
  void unsafe_arena_set_allocated_post_optimization_graph(::tensorflow::GraphDef* value);
  ::tensorflow::GraphDef* unsafe_arena_release_post_optimization_graph();

  private:
  const ::tensorflow::GraphDef& _internal_post_optimization_graph() const;
  ::tensorflow::GraphDef* _internal_mutable_post_optimization_graph();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.RunMetadata.FunctionGraphs)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RunMetadata_FunctionGraphs& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef > partition_graphs_;
    ::tensorflow::GraphDef* pre_optimization_graph_;
    ::tensorflow::GraphDef* post_optimization_graph_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RunMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.RunMetadata) */ {
 public:
  inline RunMetadata() : RunMetadata(nullptr) {}
  ~RunMetadata() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RunMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline RunMetadata(const RunMetadata& from) : RunMetadata(nullptr, from) {}
  inline RunMetadata(RunMetadata&& from) noexcept
      : RunMetadata(nullptr, std::move(from)) {}
  inline RunMetadata& operator=(const RunMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunMetadata& operator=(RunMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunMetadata* internal_default_instance() {
    return reinterpret_cast<const RunMetadata*>(
        &_RunMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(RunMetadata& a, RunMetadata& b) { a.Swap(&b); }
  inline void Swap(RunMetadata* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunMetadata* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RunMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RunMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RunMetadata& from) { RunMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RunMetadata* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.RunMetadata"; }

 protected:
  explicit RunMetadata(::google::protobuf::Arena* arena);
  RunMetadata(::google::protobuf::Arena* arena, const RunMetadata& from);
  RunMetadata(::google::protobuf::Arena* arena, RunMetadata&& from) noexcept
      : RunMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using FunctionGraphs = RunMetadata_FunctionGraphs;

  // accessors -------------------------------------------------------
  enum : int {
    kPartitionGraphsFieldNumber = 3,
    kFunctionGraphsFieldNumber = 4,
    kStepStatsFieldNumber = 1,
    kCostGraphFieldNumber = 2,
    kSessionMetadataFieldNumber = 5,
  };
  // repeated .tensorflow.GraphDef partition_graphs = 3;
  int partition_graphs_size() const;
  private:
  int _internal_partition_graphs_size() const;

  public:
  void clear_partition_graphs() ;
  ::tensorflow::GraphDef* mutable_partition_graphs(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>* mutable_partition_graphs();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>& _internal_partition_graphs() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>* _internal_mutable_partition_graphs();
  public:
  const ::tensorflow::GraphDef& partition_graphs(int index) const;
  ::tensorflow::GraphDef* add_partition_graphs();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>& partition_graphs() const;
  // repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
  int function_graphs_size() const;
  private:
  int _internal_function_graphs_size() const;

  public:
  void clear_function_graphs() ;
  ::tensorflow::RunMetadata_FunctionGraphs* mutable_function_graphs(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::RunMetadata_FunctionGraphs>* mutable_function_graphs();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::RunMetadata_FunctionGraphs>& _internal_function_graphs() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::RunMetadata_FunctionGraphs>* _internal_mutable_function_graphs();
  public:
  const ::tensorflow::RunMetadata_FunctionGraphs& function_graphs(int index) const;
  ::tensorflow::RunMetadata_FunctionGraphs* add_function_graphs();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::RunMetadata_FunctionGraphs>& function_graphs() const;
  // .tensorflow.StepStats step_stats = 1;
  bool has_step_stats() const;
  void clear_step_stats() ;
  const ::tensorflow::StepStats& step_stats() const;
  PROTOBUF_NODISCARD ::tensorflow::StepStats* release_step_stats();
  ::tensorflow::StepStats* mutable_step_stats();
  void set_allocated_step_stats(::tensorflow::StepStats* value);
  void unsafe_arena_set_allocated_step_stats(::tensorflow::StepStats* value);
  ::tensorflow::StepStats* unsafe_arena_release_step_stats();

  private:
  const ::tensorflow::StepStats& _internal_step_stats() const;
  ::tensorflow::StepStats* _internal_mutable_step_stats();

  public:
  // .tensorflow.CostGraphDef cost_graph = 2;
  bool has_cost_graph() const;
  void clear_cost_graph() ;
  const ::tensorflow::CostGraphDef& cost_graph() const;
  PROTOBUF_NODISCARD ::tensorflow::CostGraphDef* release_cost_graph();
  ::tensorflow::CostGraphDef* mutable_cost_graph();
  void set_allocated_cost_graph(::tensorflow::CostGraphDef* value);
  void unsafe_arena_set_allocated_cost_graph(::tensorflow::CostGraphDef* value);
  ::tensorflow::CostGraphDef* unsafe_arena_release_cost_graph();

  private:
  const ::tensorflow::CostGraphDef& _internal_cost_graph() const;
  ::tensorflow::CostGraphDef* _internal_mutable_cost_graph();

  public:
  // .tensorflow.SessionMetadata session_metadata = 5;
  bool has_session_metadata() const;
  void clear_session_metadata() ;
  const ::tensorflow::SessionMetadata& session_metadata() const;
  PROTOBUF_NODISCARD ::tensorflow::SessionMetadata* release_session_metadata();
  ::tensorflow::SessionMetadata* mutable_session_metadata();
  void set_allocated_session_metadata(::tensorflow::SessionMetadata* value);
  void unsafe_arena_set_allocated_session_metadata(::tensorflow::SessionMetadata* value);
  ::tensorflow::SessionMetadata* unsafe_arena_release_session_metadata();

  private:
  const ::tensorflow::SessionMetadata& _internal_session_metadata() const;
  ::tensorflow::SessionMetadata* _internal_mutable_session_metadata();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.RunMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 5,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RunMetadata& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef > partition_graphs_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::RunMetadata_FunctionGraphs > function_graphs_;
    ::tensorflow::StepStats* step_stats_;
    ::tensorflow::CostGraphDef* cost_graph_;
    ::tensorflow::SessionMetadata* session_metadata_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GPUOptions_Experimental_VirtualDevices

// repeated float memory_limit_mb = 1;
inline int GPUOptions_Experimental_VirtualDevices::_internal_memory_limit_mb_size() const {
  return _internal_memory_limit_mb().size();
}
inline int GPUOptions_Experimental_VirtualDevices::memory_limit_mb_size() const {
  return _internal_memory_limit_mb_size();
}
inline void GPUOptions_Experimental_VirtualDevices::clear_memory_limit_mb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_limit_mb_.Clear();
}
inline float GPUOptions_Experimental_VirtualDevices::memory_limit_mb(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  return _internal_memory_limit_mb().Get(index);
}
inline void GPUOptions_Experimental_VirtualDevices::set_memory_limit_mb(int index, float value) {
  _internal_mutable_memory_limit_mb()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
}
inline void GPUOptions_Experimental_VirtualDevices::add_memory_limit_mb(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_memory_limit_mb()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
}
inline const ::google::protobuf::RepeatedField<float>& GPUOptions_Experimental_VirtualDevices::memory_limit_mb() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  return _internal_memory_limit_mb();
}
inline ::google::protobuf::RepeatedField<float>* GPUOptions_Experimental_VirtualDevices::mutable_memory_limit_mb()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_memory_limit_mb();
}
inline const ::google::protobuf::RepeatedField<float>&
GPUOptions_Experimental_VirtualDevices::_internal_memory_limit_mb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_limit_mb_;
}
inline ::google::protobuf::RepeatedField<float>* GPUOptions_Experimental_VirtualDevices::_internal_mutable_memory_limit_mb() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.memory_limit_mb_;
}

// repeated int32 priority = 2;
inline int GPUOptions_Experimental_VirtualDevices::_internal_priority_size() const {
  return _internal_priority().size();
}
inline int GPUOptions_Experimental_VirtualDevices::priority_size() const {
  return _internal_priority_size();
}
inline void GPUOptions_Experimental_VirtualDevices::clear_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_.Clear();
}
inline ::int32_t GPUOptions_Experimental_VirtualDevices::priority(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  return _internal_priority().Get(index);
}
inline void GPUOptions_Experimental_VirtualDevices::set_priority(int index, ::int32_t value) {
  _internal_mutable_priority()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
}
inline void GPUOptions_Experimental_VirtualDevices::add_priority(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_priority()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& GPUOptions_Experimental_VirtualDevices::priority() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  return _internal_priority();
}
inline ::google::protobuf::RepeatedField<::int32_t>* GPUOptions_Experimental_VirtualDevices::mutable_priority()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_priority();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
GPUOptions_Experimental_VirtualDevices::_internal_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.priority_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* GPUOptions_Experimental_VirtualDevices::_internal_mutable_priority() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.priority_;
}

// repeated int32 device_ordinal = 3;
inline int GPUOptions_Experimental_VirtualDevices::_internal_device_ordinal_size() const {
  return _internal_device_ordinal().size();
}
inline int GPUOptions_Experimental_VirtualDevices::device_ordinal_size() const {
  return _internal_device_ordinal_size();
}
inline void GPUOptions_Experimental_VirtualDevices::clear_device_ordinal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_ordinal_.Clear();
}
inline ::int32_t GPUOptions_Experimental_VirtualDevices::device_ordinal(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.VirtualDevices.device_ordinal)
  return _internal_device_ordinal().Get(index);
}
inline void GPUOptions_Experimental_VirtualDevices::set_device_ordinal(int index, ::int32_t value) {
  _internal_mutable_device_ordinal()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.VirtualDevices.device_ordinal)
}
inline void GPUOptions_Experimental_VirtualDevices::add_device_ordinal(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_device_ordinal()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.VirtualDevices.device_ordinal)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& GPUOptions_Experimental_VirtualDevices::device_ordinal() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.VirtualDevices.device_ordinal)
  return _internal_device_ordinal();
}
inline ::google::protobuf::RepeatedField<::int32_t>* GPUOptions_Experimental_VirtualDevices::mutable_device_ordinal()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.VirtualDevices.device_ordinal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_device_ordinal();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
GPUOptions_Experimental_VirtualDevices::_internal_device_ordinal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_ordinal_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* GPUOptions_Experimental_VirtualDevices::_internal_mutable_device_ordinal() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.device_ordinal_;
}

// -------------------------------------------------------------------

// GPUOptions_Experimental_StreamMergeOptions

// bool merge_host_to_device_stream = 1;
inline void GPUOptions_Experimental_StreamMergeOptions::clear_merge_host_to_device_stream() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_host_to_device_stream_ = false;
}
inline bool GPUOptions_Experimental_StreamMergeOptions::merge_host_to_device_stream() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.StreamMergeOptions.merge_host_to_device_stream)
  return _internal_merge_host_to_device_stream();
}
inline void GPUOptions_Experimental_StreamMergeOptions::set_merge_host_to_device_stream(bool value) {
  _internal_set_merge_host_to_device_stream(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.StreamMergeOptions.merge_host_to_device_stream)
}
inline bool GPUOptions_Experimental_StreamMergeOptions::_internal_merge_host_to_device_stream() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merge_host_to_device_stream_;
}
inline void GPUOptions_Experimental_StreamMergeOptions::_internal_set_merge_host_to_device_stream(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_host_to_device_stream_ = value;
}

// bool merge_device_to_host_stream = 2;
inline void GPUOptions_Experimental_StreamMergeOptions::clear_merge_device_to_host_stream() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_device_to_host_stream_ = false;
}
inline bool GPUOptions_Experimental_StreamMergeOptions::merge_device_to_host_stream() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.StreamMergeOptions.merge_device_to_host_stream)
  return _internal_merge_device_to_host_stream();
}
inline void GPUOptions_Experimental_StreamMergeOptions::set_merge_device_to_host_stream(bool value) {
  _internal_set_merge_device_to_host_stream(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.StreamMergeOptions.merge_device_to_host_stream)
}
inline bool GPUOptions_Experimental_StreamMergeOptions::_internal_merge_device_to_host_stream() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merge_device_to_host_stream_;
}
inline void GPUOptions_Experimental_StreamMergeOptions::_internal_set_merge_device_to_host_stream(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_device_to_host_stream_ = value;
}

// bool merge_device_to_device_stream = 3;
inline void GPUOptions_Experimental_StreamMergeOptions::clear_merge_device_to_device_stream() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_device_to_device_stream_ = false;
}
inline bool GPUOptions_Experimental_StreamMergeOptions::merge_device_to_device_stream() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.StreamMergeOptions.merge_device_to_device_stream)
  return _internal_merge_device_to_device_stream();
}
inline void GPUOptions_Experimental_StreamMergeOptions::set_merge_device_to_device_stream(bool value) {
  _internal_set_merge_device_to_device_stream(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.StreamMergeOptions.merge_device_to_device_stream)
}
inline bool GPUOptions_Experimental_StreamMergeOptions::_internal_merge_device_to_device_stream() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merge_device_to_device_stream_;
}
inline void GPUOptions_Experimental_StreamMergeOptions::_internal_set_merge_device_to_device_stream(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_device_to_device_stream_ = value;
}

// -------------------------------------------------------------------

// GPUOptions_Experimental

// repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
inline int GPUOptions_Experimental::_internal_virtual_devices_size() const {
  return _internal_virtual_devices().size();
}
inline int GPUOptions_Experimental::virtual_devices_size() const {
  return _internal_virtual_devices_size();
}
inline void GPUOptions_Experimental::clear_virtual_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.virtual_devices_.Clear();
}
inline ::tensorflow::GPUOptions_Experimental_VirtualDevices* GPUOptions_Experimental::mutable_virtual_devices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.Experimental.virtual_devices)
  return _internal_mutable_virtual_devices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::GPUOptions_Experimental_VirtualDevices>* GPUOptions_Experimental::mutable_virtual_devices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.virtual_devices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_virtual_devices();
}
inline const ::tensorflow::GPUOptions_Experimental_VirtualDevices& GPUOptions_Experimental::virtual_devices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.virtual_devices)
  return _internal_virtual_devices().Get(index);
}
inline ::tensorflow::GPUOptions_Experimental_VirtualDevices* GPUOptions_Experimental::add_virtual_devices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::GPUOptions_Experimental_VirtualDevices* _add = _internal_mutable_virtual_devices()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.virtual_devices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::GPUOptions_Experimental_VirtualDevices>& GPUOptions_Experimental::virtual_devices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.virtual_devices)
  return _internal_virtual_devices();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::GPUOptions_Experimental_VirtualDevices>&
GPUOptions_Experimental::_internal_virtual_devices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.virtual_devices_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::GPUOptions_Experimental_VirtualDevices>*
GPUOptions_Experimental::_internal_mutable_virtual_devices() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.virtual_devices_;
}

// int32 num_virtual_devices_per_gpu = 15;
inline void GPUOptions_Experimental::clear_num_virtual_devices_per_gpu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_virtual_devices_per_gpu_ = 0;
}
inline ::int32_t GPUOptions_Experimental::num_virtual_devices_per_gpu() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.num_virtual_devices_per_gpu)
  return _internal_num_virtual_devices_per_gpu();
}
inline void GPUOptions_Experimental::set_num_virtual_devices_per_gpu(::int32_t value) {
  _internal_set_num_virtual_devices_per_gpu(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.num_virtual_devices_per_gpu)
}
inline ::int32_t GPUOptions_Experimental::_internal_num_virtual_devices_per_gpu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_virtual_devices_per_gpu_;
}
inline void GPUOptions_Experimental::_internal_set_num_virtual_devices_per_gpu(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_virtual_devices_per_gpu_ = value;
}

// bool use_unified_memory = 2;
inline void GPUOptions_Experimental::clear_use_unified_memory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_unified_memory_ = false;
}
inline bool GPUOptions_Experimental::use_unified_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.use_unified_memory)
  return _internal_use_unified_memory();
}
inline void GPUOptions_Experimental::set_use_unified_memory(bool value) {
  _internal_set_use_unified_memory(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.use_unified_memory)
}
inline bool GPUOptions_Experimental::_internal_use_unified_memory() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_unified_memory_;
}
inline void GPUOptions_Experimental::_internal_set_use_unified_memory(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_unified_memory_ = value;
}

// int32 num_dev_to_dev_copy_streams = 3;
inline void GPUOptions_Experimental::clear_num_dev_to_dev_copy_streams() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_dev_to_dev_copy_streams_ = 0;
}
inline ::int32_t GPUOptions_Experimental::num_dev_to_dev_copy_streams() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.num_dev_to_dev_copy_streams)
  return _internal_num_dev_to_dev_copy_streams();
}
inline void GPUOptions_Experimental::set_num_dev_to_dev_copy_streams(::int32_t value) {
  _internal_set_num_dev_to_dev_copy_streams(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.num_dev_to_dev_copy_streams)
}
inline ::int32_t GPUOptions_Experimental::_internal_num_dev_to_dev_copy_streams() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_dev_to_dev_copy_streams_;
}
inline void GPUOptions_Experimental::_internal_set_num_dev_to_dev_copy_streams(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_dev_to_dev_copy_streams_ = value;
}

// string collective_ring_order = 4;
inline void GPUOptions_Experimental::clear_collective_ring_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_ring_order_.ClearToEmpty();
}
inline const std::string& GPUOptions_Experimental::collective_ring_order() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.collective_ring_order)
  return _internal_collective_ring_order();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GPUOptions_Experimental::set_collective_ring_order(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_ring_order_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
inline std::string* GPUOptions_Experimental::mutable_collective_ring_order() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_collective_ring_order();
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.Experimental.collective_ring_order)
  return _s;
}
inline const std::string& GPUOptions_Experimental::_internal_collective_ring_order() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collective_ring_order_.Get();
}
inline void GPUOptions_Experimental::_internal_set_collective_ring_order(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_ring_order_.Set(value, GetArena());
}
inline std::string* GPUOptions_Experimental::_internal_mutable_collective_ring_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.collective_ring_order_.Mutable( GetArena());
}
inline std::string* GPUOptions_Experimental::release_collective_ring_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.Experimental.collective_ring_order)
  return _impl_.collective_ring_order_.Release();
}
inline void GPUOptions_Experimental::set_allocated_collective_ring_order(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_ring_order_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.collective_ring_order_.IsDefault()) {
          _impl_.collective_ring_order_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.Experimental.collective_ring_order)
}

// bool timestamped_allocator = 5;
inline void GPUOptions_Experimental::clear_timestamped_allocator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamped_allocator_ = false;
}
inline bool GPUOptions_Experimental::timestamped_allocator() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.timestamped_allocator)
  return _internal_timestamped_allocator();
}
inline void GPUOptions_Experimental::set_timestamped_allocator(bool value) {
  _internal_set_timestamped_allocator(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.timestamped_allocator)
}
inline bool GPUOptions_Experimental::_internal_timestamped_allocator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamped_allocator_;
}
inline void GPUOptions_Experimental::_internal_set_timestamped_allocator(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamped_allocator_ = value;
}

// int32 kernel_tracker_max_interval = 7;
inline void GPUOptions_Experimental::clear_kernel_tracker_max_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kernel_tracker_max_interval_ = 0;
}
inline ::int32_t GPUOptions_Experimental::kernel_tracker_max_interval() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_interval)
  return _internal_kernel_tracker_max_interval();
}
inline void GPUOptions_Experimental::set_kernel_tracker_max_interval(::int32_t value) {
  _internal_set_kernel_tracker_max_interval(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_interval)
}
inline ::int32_t GPUOptions_Experimental::_internal_kernel_tracker_max_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kernel_tracker_max_interval_;
}
inline void GPUOptions_Experimental::_internal_set_kernel_tracker_max_interval(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kernel_tracker_max_interval_ = value;
}

// int32 kernel_tracker_max_bytes = 8;
inline void GPUOptions_Experimental::clear_kernel_tracker_max_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kernel_tracker_max_bytes_ = 0;
}
inline ::int32_t GPUOptions_Experimental::kernel_tracker_max_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_bytes)
  return _internal_kernel_tracker_max_bytes();
}
inline void GPUOptions_Experimental::set_kernel_tracker_max_bytes(::int32_t value) {
  _internal_set_kernel_tracker_max_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_bytes)
}
inline ::int32_t GPUOptions_Experimental::_internal_kernel_tracker_max_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kernel_tracker_max_bytes_;
}
inline void GPUOptions_Experimental::_internal_set_kernel_tracker_max_bytes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kernel_tracker_max_bytes_ = value;
}

// int32 kernel_tracker_max_pending = 9;
inline void GPUOptions_Experimental::clear_kernel_tracker_max_pending() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kernel_tracker_max_pending_ = 0;
}
inline ::int32_t GPUOptions_Experimental::kernel_tracker_max_pending() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_pending)
  return _internal_kernel_tracker_max_pending();
}
inline void GPUOptions_Experimental::set_kernel_tracker_max_pending(::int32_t value) {
  _internal_set_kernel_tracker_max_pending(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_pending)
}
inline ::int32_t GPUOptions_Experimental::_internal_kernel_tracker_max_pending() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kernel_tracker_max_pending_;
}
inline void GPUOptions_Experimental::_internal_set_kernel_tracker_max_pending(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kernel_tracker_max_pending_ = value;
}

// double internal_fragmentation_fraction = 10;
inline void GPUOptions_Experimental::clear_internal_fragmentation_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.internal_fragmentation_fraction_ = 0;
}
inline double GPUOptions_Experimental::internal_fragmentation_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.internal_fragmentation_fraction)
  return _internal_internal_fragmentation_fraction();
}
inline void GPUOptions_Experimental::set_internal_fragmentation_fraction(double value) {
  _internal_set_internal_fragmentation_fraction(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.internal_fragmentation_fraction)
}
inline double GPUOptions_Experimental::_internal_internal_fragmentation_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.internal_fragmentation_fraction_;
}
inline void GPUOptions_Experimental::_internal_set_internal_fragmentation_fraction(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.internal_fragmentation_fraction_ = value;
}

// bool use_cuda_malloc_async = 11;
inline void GPUOptions_Experimental::clear_use_cuda_malloc_async() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_cuda_malloc_async_ = false;
}
inline bool GPUOptions_Experimental::use_cuda_malloc_async() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.use_cuda_malloc_async)
  return _internal_use_cuda_malloc_async();
}
inline void GPUOptions_Experimental::set_use_cuda_malloc_async(bool value) {
  _internal_set_use_cuda_malloc_async(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.use_cuda_malloc_async)
}
inline bool GPUOptions_Experimental::_internal_use_cuda_malloc_async() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_cuda_malloc_async_;
}
inline void GPUOptions_Experimental::_internal_set_use_cuda_malloc_async(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_cuda_malloc_async_ = value;
}

// bool disallow_retry_on_allocation_failure = 12;
inline void GPUOptions_Experimental::clear_disallow_retry_on_allocation_failure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disallow_retry_on_allocation_failure_ = false;
}
inline bool GPUOptions_Experimental::disallow_retry_on_allocation_failure() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.disallow_retry_on_allocation_failure)
  return _internal_disallow_retry_on_allocation_failure();
}
inline void GPUOptions_Experimental::set_disallow_retry_on_allocation_failure(bool value) {
  _internal_set_disallow_retry_on_allocation_failure(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.disallow_retry_on_allocation_failure)
}
inline bool GPUOptions_Experimental::_internal_disallow_retry_on_allocation_failure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disallow_retry_on_allocation_failure_;
}
inline void GPUOptions_Experimental::_internal_set_disallow_retry_on_allocation_failure(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disallow_retry_on_allocation_failure_ = value;
}

// float gpu_host_mem_limit_in_mb = 13;
inline void GPUOptions_Experimental::clear_gpu_host_mem_limit_in_mb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_host_mem_limit_in_mb_ = 0;
}
inline float GPUOptions_Experimental::gpu_host_mem_limit_in_mb() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.gpu_host_mem_limit_in_mb)
  return _internal_gpu_host_mem_limit_in_mb();
}
inline void GPUOptions_Experimental::set_gpu_host_mem_limit_in_mb(float value) {
  _internal_set_gpu_host_mem_limit_in_mb(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.gpu_host_mem_limit_in_mb)
}
inline float GPUOptions_Experimental::_internal_gpu_host_mem_limit_in_mb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gpu_host_mem_limit_in_mb_;
}
inline void GPUOptions_Experimental::_internal_set_gpu_host_mem_limit_in_mb(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_host_mem_limit_in_mb_ = value;
}

// bool gpu_host_mem_disallow_growth = 14;
inline void GPUOptions_Experimental::clear_gpu_host_mem_disallow_growth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_host_mem_disallow_growth_ = false;
}
inline bool GPUOptions_Experimental::gpu_host_mem_disallow_growth() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.gpu_host_mem_disallow_growth)
  return _internal_gpu_host_mem_disallow_growth();
}
inline void GPUOptions_Experimental::set_gpu_host_mem_disallow_growth(bool value) {
  _internal_set_gpu_host_mem_disallow_growth(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.gpu_host_mem_disallow_growth)
}
inline bool GPUOptions_Experimental::_internal_gpu_host_mem_disallow_growth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gpu_host_mem_disallow_growth_;
}
inline void GPUOptions_Experimental::_internal_set_gpu_host_mem_disallow_growth(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_host_mem_disallow_growth_ = value;
}

// int32 gpu_system_memory_size_in_mb = 16;
inline void GPUOptions_Experimental::clear_gpu_system_memory_size_in_mb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_system_memory_size_in_mb_ = 0;
}
inline ::int32_t GPUOptions_Experimental::gpu_system_memory_size_in_mb() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.gpu_system_memory_size_in_mb)
  return _internal_gpu_system_memory_size_in_mb();
}
inline void GPUOptions_Experimental::set_gpu_system_memory_size_in_mb(::int32_t value) {
  _internal_set_gpu_system_memory_size_in_mb(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.gpu_system_memory_size_in_mb)
}
inline ::int32_t GPUOptions_Experimental::_internal_gpu_system_memory_size_in_mb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gpu_system_memory_size_in_mb_;
}
inline void GPUOptions_Experimental::_internal_set_gpu_system_memory_size_in_mb(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_system_memory_size_in_mb_ = value;
}

// bool populate_pjrt_gpu_client_creation_info = 17;
inline void GPUOptions_Experimental::clear_populate_pjrt_gpu_client_creation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.populate_pjrt_gpu_client_creation_info_ = false;
}
inline bool GPUOptions_Experimental::populate_pjrt_gpu_client_creation_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.populate_pjrt_gpu_client_creation_info)
  return _internal_populate_pjrt_gpu_client_creation_info();
}
inline void GPUOptions_Experimental::set_populate_pjrt_gpu_client_creation_info(bool value) {
  _internal_set_populate_pjrt_gpu_client_creation_info(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.populate_pjrt_gpu_client_creation_info)
}
inline bool GPUOptions_Experimental::_internal_populate_pjrt_gpu_client_creation_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.populate_pjrt_gpu_client_creation_info_;
}
inline void GPUOptions_Experimental::_internal_set_populate_pjrt_gpu_client_creation_info(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.populate_pjrt_gpu_client_creation_info_ = value;
}

// int32 node_id = 18;
inline void GPUOptions_Experimental::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = 0;
}
inline ::int32_t GPUOptions_Experimental::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.node_id)
  return _internal_node_id();
}
inline void GPUOptions_Experimental::set_node_id(::int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.node_id)
}
inline ::int32_t GPUOptions_Experimental::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_;
}
inline void GPUOptions_Experimental::_internal_set_node_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = value;
}

// .tensorflow.GPUOptions.Experimental.StreamMergeOptions stream_merge_options = 19;
inline bool GPUOptions_Experimental::has_stream_merge_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_merge_options_ != nullptr);
  return value;
}
inline void GPUOptions_Experimental::clear_stream_merge_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stream_merge_options_ != nullptr) _impl_.stream_merge_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::GPUOptions_Experimental_StreamMergeOptions& GPUOptions_Experimental::_internal_stream_merge_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* p = _impl_.stream_merge_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::GPUOptions_Experimental_StreamMergeOptions&>(::tensorflow::_GPUOptions_Experimental_StreamMergeOptions_default_instance_);
}
inline const ::tensorflow::GPUOptions_Experimental_StreamMergeOptions& GPUOptions_Experimental::stream_merge_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.stream_merge_options)
  return _internal_stream_merge_options();
}
inline void GPUOptions_Experimental::unsafe_arena_set_allocated_stream_merge_options(::tensorflow::GPUOptions_Experimental_StreamMergeOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stream_merge_options_);
  }
  _impl_.stream_merge_options_ = reinterpret_cast<::tensorflow::GPUOptions_Experimental_StreamMergeOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.Experimental.stream_merge_options)
}
inline ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* GPUOptions_Experimental::release_stream_merge_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* released = _impl_.stream_merge_options_;
  _impl_.stream_merge_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* GPUOptions_Experimental::unsafe_arena_release_stream_merge_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.Experimental.stream_merge_options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* temp = _impl_.stream_merge_options_;
  _impl_.stream_merge_options_ = nullptr;
  return temp;
}
inline ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* GPUOptions_Experimental::_internal_mutable_stream_merge_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stream_merge_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::GPUOptions_Experimental_StreamMergeOptions>(GetArena());
    _impl_.stream_merge_options_ = reinterpret_cast<::tensorflow::GPUOptions_Experimental_StreamMergeOptions*>(p);
  }
  return _impl_.stream_merge_options_;
}
inline ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* GPUOptions_Experimental::mutable_stream_merge_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::GPUOptions_Experimental_StreamMergeOptions* _msg = _internal_mutable_stream_merge_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.Experimental.stream_merge_options)
  return _msg;
}
inline void GPUOptions_Experimental::set_allocated_stream_merge_options(::tensorflow::GPUOptions_Experimental_StreamMergeOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.stream_merge_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stream_merge_options_ = reinterpret_cast<::tensorflow::GPUOptions_Experimental_StreamMergeOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.Experimental.stream_merge_options)
}

// -------------------------------------------------------------------

// GPUOptions

// double per_process_gpu_memory_fraction = 1;
inline void GPUOptions::clear_per_process_gpu_memory_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.per_process_gpu_memory_fraction_ = 0;
}
inline double GPUOptions::per_process_gpu_memory_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.per_process_gpu_memory_fraction)
  return _internal_per_process_gpu_memory_fraction();
}
inline void GPUOptions::set_per_process_gpu_memory_fraction(double value) {
  _internal_set_per_process_gpu_memory_fraction(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.per_process_gpu_memory_fraction)
}
inline double GPUOptions::_internal_per_process_gpu_memory_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.per_process_gpu_memory_fraction_;
}
inline void GPUOptions::_internal_set_per_process_gpu_memory_fraction(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.per_process_gpu_memory_fraction_ = value;
}

// bool allow_growth = 4;
inline void GPUOptions::clear_allow_growth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_growth_ = false;
}
inline bool GPUOptions::allow_growth() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.allow_growth)
  return _internal_allow_growth();
}
inline void GPUOptions::set_allow_growth(bool value) {
  _internal_set_allow_growth(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.allow_growth)
}
inline bool GPUOptions::_internal_allow_growth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_growth_;
}
inline void GPUOptions::_internal_set_allow_growth(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_growth_ = value;
}

// string allocator_type = 2;
inline void GPUOptions::clear_allocator_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_type_.ClearToEmpty();
}
inline const std::string& GPUOptions::allocator_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.allocator_type)
  return _internal_allocator_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GPUOptions::set_allocator_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.allocator_type)
}
inline std::string* GPUOptions::mutable_allocator_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_allocator_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.allocator_type)
  return _s;
}
inline const std::string& GPUOptions::_internal_allocator_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocator_type_.Get();
}
inline void GPUOptions::_internal_set_allocator_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_type_.Set(value, GetArena());
}
inline std::string* GPUOptions::_internal_mutable_allocator_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.allocator_type_.Mutable( GetArena());
}
inline std::string* GPUOptions::release_allocator_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.allocator_type)
  return _impl_.allocator_type_.Release();
}
inline void GPUOptions::set_allocated_allocator_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.allocator_type_.IsDefault()) {
          _impl_.allocator_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.allocator_type)
}

// int64 deferred_deletion_bytes = 3;
inline void GPUOptions::clear_deferred_deletion_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deferred_deletion_bytes_ = ::int64_t{0};
}
inline ::int64_t GPUOptions::deferred_deletion_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.deferred_deletion_bytes)
  return _internal_deferred_deletion_bytes();
}
inline void GPUOptions::set_deferred_deletion_bytes(::int64_t value) {
  _internal_set_deferred_deletion_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.deferred_deletion_bytes)
}
inline ::int64_t GPUOptions::_internal_deferred_deletion_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deferred_deletion_bytes_;
}
inline void GPUOptions::_internal_set_deferred_deletion_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deferred_deletion_bytes_ = value;
}

// string visible_device_list = 5;
inline void GPUOptions::clear_visible_device_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.visible_device_list_.ClearToEmpty();
}
inline const std::string& GPUOptions::visible_device_list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.visible_device_list)
  return _internal_visible_device_list();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GPUOptions::set_visible_device_list(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.visible_device_list_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.visible_device_list)
}
inline std::string* GPUOptions::mutable_visible_device_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_visible_device_list();
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.visible_device_list)
  return _s;
}
inline const std::string& GPUOptions::_internal_visible_device_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.visible_device_list_.Get();
}
inline void GPUOptions::_internal_set_visible_device_list(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.visible_device_list_.Set(value, GetArena());
}
inline std::string* GPUOptions::_internal_mutable_visible_device_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.visible_device_list_.Mutable( GetArena());
}
inline std::string* GPUOptions::release_visible_device_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.visible_device_list)
  return _impl_.visible_device_list_.Release();
}
inline void GPUOptions::set_allocated_visible_device_list(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.visible_device_list_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.visible_device_list_.IsDefault()) {
          _impl_.visible_device_list_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.visible_device_list)
}

// int32 polling_active_delay_usecs = 6;
inline void GPUOptions::clear_polling_active_delay_usecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.polling_active_delay_usecs_ = 0;
}
inline ::int32_t GPUOptions::polling_active_delay_usecs() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.polling_active_delay_usecs)
  return _internal_polling_active_delay_usecs();
}
inline void GPUOptions::set_polling_active_delay_usecs(::int32_t value) {
  _internal_set_polling_active_delay_usecs(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.polling_active_delay_usecs)
}
inline ::int32_t GPUOptions::_internal_polling_active_delay_usecs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.polling_active_delay_usecs_;
}
inline void GPUOptions::_internal_set_polling_active_delay_usecs(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.polling_active_delay_usecs_ = value;
}

// int32 polling_inactive_delay_msecs = 7;
inline void GPUOptions::clear_polling_inactive_delay_msecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.polling_inactive_delay_msecs_ = 0;
}
inline ::int32_t GPUOptions::polling_inactive_delay_msecs() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.polling_inactive_delay_msecs)
  return _internal_polling_inactive_delay_msecs();
}
inline void GPUOptions::set_polling_inactive_delay_msecs(::int32_t value) {
  _internal_set_polling_inactive_delay_msecs(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.polling_inactive_delay_msecs)
}
inline ::int32_t GPUOptions::_internal_polling_inactive_delay_msecs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.polling_inactive_delay_msecs_;
}
inline void GPUOptions::_internal_set_polling_inactive_delay_msecs(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.polling_inactive_delay_msecs_ = value;
}

// bool force_gpu_compatible = 8;
inline void GPUOptions::clear_force_gpu_compatible() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_gpu_compatible_ = false;
}
inline bool GPUOptions::force_gpu_compatible() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.force_gpu_compatible)
  return _internal_force_gpu_compatible();
}
inline void GPUOptions::set_force_gpu_compatible(bool value) {
  _internal_set_force_gpu_compatible(value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.force_gpu_compatible)
}
inline bool GPUOptions::_internal_force_gpu_compatible() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.force_gpu_compatible_;
}
inline void GPUOptions::_internal_set_force_gpu_compatible(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_gpu_compatible_ = value;
}

// .tensorflow.GPUOptions.Experimental experimental = 9;
inline bool GPUOptions::has_experimental() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.experimental_ != nullptr);
  return value;
}
inline void GPUOptions::clear_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_ != nullptr) _impl_.experimental_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::GPUOptions_Experimental& GPUOptions::_internal_experimental() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::GPUOptions_Experimental* p = _impl_.experimental_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::GPUOptions_Experimental&>(::tensorflow::_GPUOptions_Experimental_default_instance_);
}
inline const ::tensorflow::GPUOptions_Experimental& GPUOptions::experimental() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.experimental)
  return _internal_experimental();
}
inline void GPUOptions::unsafe_arena_set_allocated_experimental(::tensorflow::GPUOptions_Experimental* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.experimental_);
  }
  _impl_.experimental_ = reinterpret_cast<::tensorflow::GPUOptions_Experimental*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.experimental)
}
inline ::tensorflow::GPUOptions_Experimental* GPUOptions::release_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::GPUOptions_Experimental* released = _impl_.experimental_;
  _impl_.experimental_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::GPUOptions_Experimental* GPUOptions::unsafe_arena_release_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.experimental)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::GPUOptions_Experimental* temp = _impl_.experimental_;
  _impl_.experimental_ = nullptr;
  return temp;
}
inline ::tensorflow::GPUOptions_Experimental* GPUOptions::_internal_mutable_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::GPUOptions_Experimental>(GetArena());
    _impl_.experimental_ = reinterpret_cast<::tensorflow::GPUOptions_Experimental*>(p);
  }
  return _impl_.experimental_;
}
inline ::tensorflow::GPUOptions_Experimental* GPUOptions::mutable_experimental() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::GPUOptions_Experimental* _msg = _internal_mutable_experimental();
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.experimental)
  return _msg;
}
inline void GPUOptions::set_allocated_experimental(::tensorflow::GPUOptions_Experimental* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.experimental_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.experimental_ = reinterpret_cast<::tensorflow::GPUOptions_Experimental*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.experimental)
}

// -------------------------------------------------------------------

// OptimizerOptions

// bool do_common_subexpression_elimination = 1;
inline void OptimizerOptions::clear_do_common_subexpression_elimination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_common_subexpression_elimination_ = false;
}
inline bool OptimizerOptions::do_common_subexpression_elimination() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_common_subexpression_elimination)
  return _internal_do_common_subexpression_elimination();
}
inline void OptimizerOptions::set_do_common_subexpression_elimination(bool value) {
  _internal_set_do_common_subexpression_elimination(value);
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_common_subexpression_elimination)
}
inline bool OptimizerOptions::_internal_do_common_subexpression_elimination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.do_common_subexpression_elimination_;
}
inline void OptimizerOptions::_internal_set_do_common_subexpression_elimination(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_common_subexpression_elimination_ = value;
}

// bool do_constant_folding = 2;
inline void OptimizerOptions::clear_do_constant_folding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_constant_folding_ = false;
}
inline bool OptimizerOptions::do_constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_constant_folding)
  return _internal_do_constant_folding();
}
inline void OptimizerOptions::set_do_constant_folding(bool value) {
  _internal_set_do_constant_folding(value);
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_constant_folding)
}
inline bool OptimizerOptions::_internal_do_constant_folding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.do_constant_folding_;
}
inline void OptimizerOptions::_internal_set_do_constant_folding(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_constant_folding_ = value;
}

// int64 max_folded_constant_in_bytes = 6;
inline void OptimizerOptions::clear_max_folded_constant_in_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_folded_constant_in_bytes_ = ::int64_t{0};
}
inline ::int64_t OptimizerOptions::max_folded_constant_in_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.max_folded_constant_in_bytes)
  return _internal_max_folded_constant_in_bytes();
}
inline void OptimizerOptions::set_max_folded_constant_in_bytes(::int64_t value) {
  _internal_set_max_folded_constant_in_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.max_folded_constant_in_bytes)
}
inline ::int64_t OptimizerOptions::_internal_max_folded_constant_in_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_folded_constant_in_bytes_;
}
inline void OptimizerOptions::_internal_set_max_folded_constant_in_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_folded_constant_in_bytes_ = value;
}

// bool do_function_inlining = 4;
inline void OptimizerOptions::clear_do_function_inlining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_function_inlining_ = false;
}
inline bool OptimizerOptions::do_function_inlining() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_function_inlining)
  return _internal_do_function_inlining();
}
inline void OptimizerOptions::set_do_function_inlining(bool value) {
  _internal_set_do_function_inlining(value);
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_function_inlining)
}
inline bool OptimizerOptions::_internal_do_function_inlining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.do_function_inlining_;
}
inline void OptimizerOptions::_internal_set_do_function_inlining(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_function_inlining_ = value;
}

// .tensorflow.OptimizerOptions.Level opt_level = 3;
inline void OptimizerOptions::clear_opt_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.opt_level_ = 0;
}
inline ::tensorflow::OptimizerOptions_Level OptimizerOptions::opt_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.opt_level)
  return _internal_opt_level();
}
inline void OptimizerOptions::set_opt_level(::tensorflow::OptimizerOptions_Level value) {
  _internal_set_opt_level(value);
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.opt_level)
}
inline ::tensorflow::OptimizerOptions_Level OptimizerOptions::_internal_opt_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::OptimizerOptions_Level>(_impl_.opt_level_);
}
inline void OptimizerOptions::_internal_set_opt_level(::tensorflow::OptimizerOptions_Level value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.opt_level_ = value;
}

// .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
inline void OptimizerOptions::clear_global_jit_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_jit_level_ = 0;
}
inline ::tensorflow::OptimizerOptions_GlobalJitLevel OptimizerOptions::global_jit_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.global_jit_level)
  return _internal_global_jit_level();
}
inline void OptimizerOptions::set_global_jit_level(::tensorflow::OptimizerOptions_GlobalJitLevel value) {
  _internal_set_global_jit_level(value);
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.global_jit_level)
}
inline ::tensorflow::OptimizerOptions_GlobalJitLevel OptimizerOptions::_internal_global_jit_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::OptimizerOptions_GlobalJitLevel>(_impl_.global_jit_level_);
}
inline void OptimizerOptions::_internal_set_global_jit_level(::tensorflow::OptimizerOptions_GlobalJitLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_jit_level_ = value;
}

// bool cpu_global_jit = 7;
inline void OptimizerOptions::clear_cpu_global_jit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_global_jit_ = false;
}
inline bool OptimizerOptions::cpu_global_jit() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.cpu_global_jit)
  return _internal_cpu_global_jit();
}
inline void OptimizerOptions::set_cpu_global_jit(bool value) {
  _internal_set_cpu_global_jit(value);
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.cpu_global_jit)
}
inline bool OptimizerOptions::_internal_cpu_global_jit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cpu_global_jit_;
}
inline void OptimizerOptions::_internal_set_cpu_global_jit(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_global_jit_ = value;
}

// -------------------------------------------------------------------

// GraphOptions

// bool enable_recv_scheduling = 2;
inline void GraphOptions::clear_enable_recv_scheduling() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_recv_scheduling_ = false;
}
inline bool GraphOptions::enable_recv_scheduling() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.enable_recv_scheduling)
  return _internal_enable_recv_scheduling();
}
inline void GraphOptions::set_enable_recv_scheduling(bool value) {
  _internal_set_enable_recv_scheduling(value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.enable_recv_scheduling)
}
inline bool GraphOptions::_internal_enable_recv_scheduling() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_recv_scheduling_;
}
inline void GraphOptions::_internal_set_enable_recv_scheduling(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_recv_scheduling_ = value;
}

// .tensorflow.OptimizerOptions optimizer_options = 3;
inline bool GraphOptions::has_optimizer_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.optimizer_options_ != nullptr);
  return value;
}
inline void GraphOptions::clear_optimizer_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optimizer_options_ != nullptr) _impl_.optimizer_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::OptimizerOptions& GraphOptions::_internal_optimizer_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::OptimizerOptions* p = _impl_.optimizer_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::OptimizerOptions&>(::tensorflow::_OptimizerOptions_default_instance_);
}
inline const ::tensorflow::OptimizerOptions& GraphOptions::optimizer_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.optimizer_options)
  return _internal_optimizer_options();
}
inline void GraphOptions::unsafe_arena_set_allocated_optimizer_options(::tensorflow::OptimizerOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.optimizer_options_);
  }
  _impl_.optimizer_options_ = reinterpret_cast<::tensorflow::OptimizerOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOptions.optimizer_options)
}
inline ::tensorflow::OptimizerOptions* GraphOptions::release_optimizer_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::OptimizerOptions* released = _impl_.optimizer_options_;
  _impl_.optimizer_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::OptimizerOptions* GraphOptions::unsafe_arena_release_optimizer_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.GraphOptions.optimizer_options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::OptimizerOptions* temp = _impl_.optimizer_options_;
  _impl_.optimizer_options_ = nullptr;
  return temp;
}
inline ::tensorflow::OptimizerOptions* GraphOptions::_internal_mutable_optimizer_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optimizer_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::OptimizerOptions>(GetArena());
    _impl_.optimizer_options_ = reinterpret_cast<::tensorflow::OptimizerOptions*>(p);
  }
  return _impl_.optimizer_options_;
}
inline ::tensorflow::OptimizerOptions* GraphOptions::mutable_optimizer_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::OptimizerOptions* _msg = _internal_mutable_optimizer_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOptions.optimizer_options)
  return _msg;
}
inline void GraphOptions::set_allocated_optimizer_options(::tensorflow::OptimizerOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.optimizer_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.optimizer_options_ = reinterpret_cast<::tensorflow::OptimizerOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOptions.optimizer_options)
}

// int64 build_cost_model = 4;
inline void GraphOptions::clear_build_cost_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.build_cost_model_ = ::int64_t{0};
}
inline ::int64_t GraphOptions::build_cost_model() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.build_cost_model)
  return _internal_build_cost_model();
}
inline void GraphOptions::set_build_cost_model(::int64_t value) {
  _internal_set_build_cost_model(value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.build_cost_model)
}
inline ::int64_t GraphOptions::_internal_build_cost_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.build_cost_model_;
}
inline void GraphOptions::_internal_set_build_cost_model(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.build_cost_model_ = value;
}

// int64 build_cost_model_after = 9;
inline void GraphOptions::clear_build_cost_model_after() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.build_cost_model_after_ = ::int64_t{0};
}
inline ::int64_t GraphOptions::build_cost_model_after() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.build_cost_model_after)
  return _internal_build_cost_model_after();
}
inline void GraphOptions::set_build_cost_model_after(::int64_t value) {
  _internal_set_build_cost_model_after(value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.build_cost_model_after)
}
inline ::int64_t GraphOptions::_internal_build_cost_model_after() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.build_cost_model_after_;
}
inline void GraphOptions::_internal_set_build_cost_model_after(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.build_cost_model_after_ = value;
}

// bool infer_shapes = 5;
inline void GraphOptions::clear_infer_shapes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.infer_shapes_ = false;
}
inline bool GraphOptions::infer_shapes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.infer_shapes)
  return _internal_infer_shapes();
}
inline void GraphOptions::set_infer_shapes(bool value) {
  _internal_set_infer_shapes(value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.infer_shapes)
}
inline bool GraphOptions::_internal_infer_shapes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.infer_shapes_;
}
inline void GraphOptions::_internal_set_infer_shapes(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.infer_shapes_ = value;
}

// bool place_pruned_graph = 6;
inline void GraphOptions::clear_place_pruned_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.place_pruned_graph_ = false;
}
inline bool GraphOptions::place_pruned_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.place_pruned_graph)
  return _internal_place_pruned_graph();
}
inline void GraphOptions::set_place_pruned_graph(bool value) {
  _internal_set_place_pruned_graph(value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.place_pruned_graph)
}
inline bool GraphOptions::_internal_place_pruned_graph() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.place_pruned_graph_;
}
inline void GraphOptions::_internal_set_place_pruned_graph(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.place_pruned_graph_ = value;
}

// bool enable_bfloat16_sendrecv = 7;
inline void GraphOptions::clear_enable_bfloat16_sendrecv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_bfloat16_sendrecv_ = false;
}
inline bool GraphOptions::enable_bfloat16_sendrecv() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.enable_bfloat16_sendrecv)
  return _internal_enable_bfloat16_sendrecv();
}
inline void GraphOptions::set_enable_bfloat16_sendrecv(bool value) {
  _internal_set_enable_bfloat16_sendrecv(value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.enable_bfloat16_sendrecv)
}
inline bool GraphOptions::_internal_enable_bfloat16_sendrecv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_bfloat16_sendrecv_;
}
inline void GraphOptions::_internal_set_enable_bfloat16_sendrecv(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_bfloat16_sendrecv_ = value;
}

// int32 timeline_step = 8;
inline void GraphOptions::clear_timeline_step() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeline_step_ = 0;
}
inline ::int32_t GraphOptions::timeline_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.timeline_step)
  return _internal_timeline_step();
}
inline void GraphOptions::set_timeline_step(::int32_t value) {
  _internal_set_timeline_step(value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.timeline_step)
}
inline ::int32_t GraphOptions::_internal_timeline_step() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeline_step_;
}
inline void GraphOptions::_internal_set_timeline_step(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeline_step_ = value;
}

// .tensorflow.RewriterConfig rewrite_options = 10;
inline bool GraphOptions::has_rewrite_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_options_ != nullptr);
  return value;
}
inline const ::tensorflow::RewriterConfig& GraphOptions::_internal_rewrite_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::RewriterConfig* p = _impl_.rewrite_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::RewriterConfig&>(::tensorflow::_RewriterConfig_default_instance_);
}
inline const ::tensorflow::RewriterConfig& GraphOptions::rewrite_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.rewrite_options)
  return _internal_rewrite_options();
}
inline void GraphOptions::unsafe_arena_set_allocated_rewrite_options(::tensorflow::RewriterConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rewrite_options_);
  }
  _impl_.rewrite_options_ = reinterpret_cast<::tensorflow::RewriterConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOptions.rewrite_options)
}
inline ::tensorflow::RewriterConfig* GraphOptions::release_rewrite_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::RewriterConfig* released = _impl_.rewrite_options_;
  _impl_.rewrite_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::RewriterConfig* GraphOptions::unsafe_arena_release_rewrite_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.GraphOptions.rewrite_options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::RewriterConfig* temp = _impl_.rewrite_options_;
  _impl_.rewrite_options_ = nullptr;
  return temp;
}
inline ::tensorflow::RewriterConfig* GraphOptions::_internal_mutable_rewrite_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rewrite_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::RewriterConfig>(GetArena());
    _impl_.rewrite_options_ = reinterpret_cast<::tensorflow::RewriterConfig*>(p);
  }
  return _impl_.rewrite_options_;
}
inline ::tensorflow::RewriterConfig* GraphOptions::mutable_rewrite_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::RewriterConfig* _msg = _internal_mutable_rewrite_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOptions.rewrite_options)
  return _msg;
}
inline void GraphOptions::set_allocated_rewrite_options(::tensorflow::RewriterConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rewrite_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rewrite_options_ = reinterpret_cast<::tensorflow::RewriterConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOptions.rewrite_options)
}

// -------------------------------------------------------------------

// ThreadPoolOptionProto

// int32 num_threads = 1;
inline void ThreadPoolOptionProto::clear_num_threads() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_threads_ = 0;
}
inline ::int32_t ThreadPoolOptionProto::num_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ThreadPoolOptionProto.num_threads)
  return _internal_num_threads();
}
inline void ThreadPoolOptionProto::set_num_threads(::int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:tensorflow.ThreadPoolOptionProto.num_threads)
}
inline ::int32_t ThreadPoolOptionProto::_internal_num_threads() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_threads_;
}
inline void ThreadPoolOptionProto::_internal_set_num_threads(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_threads_ = value;
}

// string global_name = 2;
inline void ThreadPoolOptionProto::clear_global_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_name_.ClearToEmpty();
}
inline const std::string& ThreadPoolOptionProto::global_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ThreadPoolOptionProto.global_name)
  return _internal_global_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThreadPoolOptionProto::set_global_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.ThreadPoolOptionProto.global_name)
}
inline std::string* ThreadPoolOptionProto::mutable_global_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_global_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.ThreadPoolOptionProto.global_name)
  return _s;
}
inline const std::string& ThreadPoolOptionProto::_internal_global_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_name_.Get();
}
inline void ThreadPoolOptionProto::_internal_set_global_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_name_.Set(value, GetArena());
}
inline std::string* ThreadPoolOptionProto::_internal_mutable_global_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.global_name_.Mutable( GetArena());
}
inline std::string* ThreadPoolOptionProto::release_global_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ThreadPoolOptionProto.global_name)
  return _impl_.global_name_.Release();
}
inline void ThreadPoolOptionProto::set_allocated_global_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.global_name_.IsDefault()) {
          _impl_.global_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ThreadPoolOptionProto.global_name)
}

// -------------------------------------------------------------------

// SessionMetadata

// string name = 1;
inline void SessionMetadata::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SessionMetadata::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.SessionMetadata.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionMetadata::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.SessionMetadata.name)
}
inline std::string* SessionMetadata::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.SessionMetadata.name)
  return _s;
}
inline const std::string& SessionMetadata::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SessionMetadata::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SessionMetadata::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SessionMetadata::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.SessionMetadata.name)
  return _impl_.name_.Release();
}
inline void SessionMetadata::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SessionMetadata.name)
}

// int64 version = 2;
inline void SessionMetadata::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t SessionMetadata::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionMetadata.version)
  return _internal_version();
}
inline void SessionMetadata::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tensorflow.SessionMetadata.version)
}
inline ::int64_t SessionMetadata::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void SessionMetadata::_internal_set_version(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConfigProto_Experimental

// string collective_group_leader = 1;
inline void ConfigProto_Experimental::clear_collective_group_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_group_leader_.ClearToEmpty();
}
inline const std::string& ConfigProto_Experimental::collective_group_leader() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_group_leader)
  return _internal_collective_group_leader();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConfigProto_Experimental::set_collective_group_leader(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_group_leader_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
inline std::string* ConfigProto_Experimental::mutable_collective_group_leader() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_collective_group_leader();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.collective_group_leader)
  return _s;
}
inline const std::string& ConfigProto_Experimental::_internal_collective_group_leader() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collective_group_leader_.Get();
}
inline void ConfigProto_Experimental::_internal_set_collective_group_leader(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_group_leader_.Set(value, GetArena());
}
inline std::string* ConfigProto_Experimental::_internal_mutable_collective_group_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.collective_group_leader_.Mutable( GetArena());
}
inline std::string* ConfigProto_Experimental::release_collective_group_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.collective_group_leader)
  return _impl_.collective_group_leader_.Release();
}
inline void ConfigProto_Experimental::set_allocated_collective_group_leader(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_group_leader_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.collective_group_leader_.IsDefault()) {
          _impl_.collective_group_leader_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.collective_group_leader)
}

// string executor_type = 3;
inline void ConfigProto_Experimental::clear_executor_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_type_.ClearToEmpty();
}
inline const std::string& ConfigProto_Experimental::executor_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.executor_type)
  return _internal_executor_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConfigProto_Experimental::set_executor_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.executor_type)
}
inline std::string* ConfigProto_Experimental::mutable_executor_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_executor_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.executor_type)
  return _s;
}
inline const std::string& ConfigProto_Experimental::_internal_executor_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.executor_type_.Get();
}
inline void ConfigProto_Experimental::_internal_set_executor_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_type_.Set(value, GetArena());
}
inline std::string* ConfigProto_Experimental::_internal_mutable_executor_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.executor_type_.Mutable( GetArena());
}
inline std::string* ConfigProto_Experimental::release_executor_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.executor_type)
  return _impl_.executor_type_.Release();
}
inline void ConfigProto_Experimental::set_allocated_executor_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.executor_type_.IsDefault()) {
          _impl_.executor_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.executor_type)
}

// int32 recv_buf_max_chunk = 4;
inline void ConfigProto_Experimental::clear_recv_buf_max_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recv_buf_max_chunk_ = 0;
}
inline ::int32_t ConfigProto_Experimental::recv_buf_max_chunk() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.recv_buf_max_chunk)
  return _internal_recv_buf_max_chunk();
}
inline void ConfigProto_Experimental::set_recv_buf_max_chunk(::int32_t value) {
  _internal_set_recv_buf_max_chunk(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.recv_buf_max_chunk)
}
inline ::int32_t ConfigProto_Experimental::_internal_recv_buf_max_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recv_buf_max_chunk_;
}
inline void ConfigProto_Experimental::_internal_set_recv_buf_max_chunk(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recv_buf_max_chunk_ = value;
}

// bool use_numa_affinity = 5;
inline void ConfigProto_Experimental::clear_use_numa_affinity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_numa_affinity_ = false;
}
inline bool ConfigProto_Experimental::use_numa_affinity() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.use_numa_affinity)
  return _internal_use_numa_affinity();
}
inline void ConfigProto_Experimental::set_use_numa_affinity(bool value) {
  _internal_set_use_numa_affinity(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.use_numa_affinity)
}
inline bool ConfigProto_Experimental::_internal_use_numa_affinity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_numa_affinity_;
}
inline void ConfigProto_Experimental::_internal_set_use_numa_affinity(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_numa_affinity_ = value;
}

// bool collective_deterministic_sequential_execution = 6;
inline void ConfigProto_Experimental::clear_collective_deterministic_sequential_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_deterministic_sequential_execution_ = false;
}
inline bool ConfigProto_Experimental::collective_deterministic_sequential_execution() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_deterministic_sequential_execution)
  return _internal_collective_deterministic_sequential_execution();
}
inline void ConfigProto_Experimental::set_collective_deterministic_sequential_execution(bool value) {
  _internal_set_collective_deterministic_sequential_execution(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_deterministic_sequential_execution)
}
inline bool ConfigProto_Experimental::_internal_collective_deterministic_sequential_execution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collective_deterministic_sequential_execution_;
}
inline void ConfigProto_Experimental::_internal_set_collective_deterministic_sequential_execution(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_deterministic_sequential_execution_ = value;
}

// bool collective_nccl = 7;
inline void ConfigProto_Experimental::clear_collective_nccl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_nccl_ = false;
}
inline bool ConfigProto_Experimental::collective_nccl() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_nccl)
  return _internal_collective_nccl();
}
inline void ConfigProto_Experimental::set_collective_nccl(bool value) {
  _internal_set_collective_nccl(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_nccl)
}
inline bool ConfigProto_Experimental::_internal_collective_nccl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collective_nccl_;
}
inline void ConfigProto_Experimental::_internal_set_collective_nccl(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_nccl_ = value;
}

// bool share_session_state_in_clusterspec_propagation = 8;
inline void ConfigProto_Experimental::clear_share_session_state_in_clusterspec_propagation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.share_session_state_in_clusterspec_propagation_ = false;
}
inline bool ConfigProto_Experimental::share_session_state_in_clusterspec_propagation() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.share_session_state_in_clusterspec_propagation)
  return _internal_share_session_state_in_clusterspec_propagation();
}
inline void ConfigProto_Experimental::set_share_session_state_in_clusterspec_propagation(bool value) {
  _internal_set_share_session_state_in_clusterspec_propagation(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.share_session_state_in_clusterspec_propagation)
}
inline bool ConfigProto_Experimental::_internal_share_session_state_in_clusterspec_propagation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.share_session_state_in_clusterspec_propagation_;
}
inline void ConfigProto_Experimental::_internal_set_share_session_state_in_clusterspec_propagation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.share_session_state_in_clusterspec_propagation_ = value;
}

// bool disable_thread_spinning = 9;
inline void ConfigProto_Experimental::clear_disable_thread_spinning() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_thread_spinning_ = false;
}
inline bool ConfigProto_Experimental::disable_thread_spinning() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_thread_spinning)
  return _internal_disable_thread_spinning();
}
inline void ConfigProto_Experimental::set_disable_thread_spinning(bool value) {
  _internal_set_disable_thread_spinning(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_thread_spinning)
}
inline bool ConfigProto_Experimental::_internal_disable_thread_spinning() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_thread_spinning_;
}
inline void ConfigProto_Experimental::_internal_set_disable_thread_spinning(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_thread_spinning_ = value;
}

// bool share_cluster_devices_in_session = 10;
inline void ConfigProto_Experimental::clear_share_cluster_devices_in_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.share_cluster_devices_in_session_ = false;
}
inline bool ConfigProto_Experimental::share_cluster_devices_in_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.share_cluster_devices_in_session)
  return _internal_share_cluster_devices_in_session();
}
inline void ConfigProto_Experimental::set_share_cluster_devices_in_session(bool value) {
  _internal_set_share_cluster_devices_in_session(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.share_cluster_devices_in_session)
}
inline bool ConfigProto_Experimental::_internal_share_cluster_devices_in_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.share_cluster_devices_in_session_;
}
inline void ConfigProto_Experimental::_internal_set_share_cluster_devices_in_session(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.share_cluster_devices_in_session_ = value;
}

// .tensorflow.SessionMetadata session_metadata = 11;
inline bool ConfigProto_Experimental::has_session_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_metadata_ != nullptr);
  return value;
}
inline void ConfigProto_Experimental::clear_session_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_metadata_ != nullptr) _impl_.session_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::SessionMetadata& ConfigProto_Experimental::_internal_session_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::SessionMetadata* p = _impl_.session_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::SessionMetadata&>(::tensorflow::_SessionMetadata_default_instance_);
}
inline const ::tensorflow::SessionMetadata& ConfigProto_Experimental::session_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.session_metadata)
  return _internal_session_metadata();
}
inline void ConfigProto_Experimental::unsafe_arena_set_allocated_session_metadata(::tensorflow::SessionMetadata* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_metadata_);
  }
  _impl_.session_metadata_ = reinterpret_cast<::tensorflow::SessionMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.Experimental.session_metadata)
}
inline ::tensorflow::SessionMetadata* ConfigProto_Experimental::release_session_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::SessionMetadata* released = _impl_.session_metadata_;
  _impl_.session_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::SessionMetadata* ConfigProto_Experimental::unsafe_arena_release_session_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.session_metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::SessionMetadata* temp = _impl_.session_metadata_;
  _impl_.session_metadata_ = nullptr;
  return temp;
}
inline ::tensorflow::SessionMetadata* ConfigProto_Experimental::_internal_mutable_session_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::SessionMetadata>(GetArena());
    _impl_.session_metadata_ = reinterpret_cast<::tensorflow::SessionMetadata*>(p);
  }
  return _impl_.session_metadata_;
}
inline ::tensorflow::SessionMetadata* ConfigProto_Experimental::mutable_session_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::SessionMetadata* _msg = _internal_mutable_session_metadata();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.session_metadata)
  return _msg;
}
inline void ConfigProto_Experimental::set_allocated_session_metadata(::tensorflow::SessionMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.session_metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.session_metadata_ = reinterpret_cast<::tensorflow::SessionMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.session_metadata)
}

// bool optimize_for_static_graph = 12;
inline void ConfigProto_Experimental::clear_optimize_for_static_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optimize_for_static_graph_ = false;
}
inline bool ConfigProto_Experimental::optimize_for_static_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.optimize_for_static_graph)
  return _internal_optimize_for_static_graph();
}
inline void ConfigProto_Experimental::set_optimize_for_static_graph(bool value) {
  _internal_set_optimize_for_static_graph(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.optimize_for_static_graph)
}
inline bool ConfigProto_Experimental::_internal_optimize_for_static_graph() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optimize_for_static_graph_;
}
inline void ConfigProto_Experimental::_internal_set_optimize_for_static_graph(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optimize_for_static_graph_ = value;
}

// bool enable_mlir_bridge = 13;
inline void ConfigProto_Experimental::clear_enable_mlir_bridge() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mlir_bridge_ = false;
}
inline bool ConfigProto_Experimental::enable_mlir_bridge() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.enable_mlir_bridge)
  return _internal_enable_mlir_bridge();
}
inline void ConfigProto_Experimental::set_enable_mlir_bridge(bool value) {
  _internal_set_enable_mlir_bridge(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.enable_mlir_bridge)
}
inline bool ConfigProto_Experimental::_internal_enable_mlir_bridge() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_mlir_bridge_;
}
inline void ConfigProto_Experimental::_internal_set_enable_mlir_bridge(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mlir_bridge_ = value;
}

// .tensorflow.ConfigProto.Experimental.MlirBridgeRollout mlir_bridge_rollout = 17;
inline void ConfigProto_Experimental::clear_mlir_bridge_rollout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mlir_bridge_rollout_ = 0;
}
inline ::tensorflow::ConfigProto_Experimental_MlirBridgeRollout ConfigProto_Experimental::mlir_bridge_rollout() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.mlir_bridge_rollout)
  return _internal_mlir_bridge_rollout();
}
inline void ConfigProto_Experimental::set_mlir_bridge_rollout(::tensorflow::ConfigProto_Experimental_MlirBridgeRollout value) {
  _internal_set_mlir_bridge_rollout(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.mlir_bridge_rollout)
}
inline ::tensorflow::ConfigProto_Experimental_MlirBridgeRollout ConfigProto_Experimental::_internal_mlir_bridge_rollout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::ConfigProto_Experimental_MlirBridgeRollout>(_impl_.mlir_bridge_rollout_);
}
inline void ConfigProto_Experimental::_internal_set_mlir_bridge_rollout(::tensorflow::ConfigProto_Experimental_MlirBridgeRollout value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mlir_bridge_rollout_ = value;
}

// bool enable_mlir_graph_optimization = 16;
inline void ConfigProto_Experimental::clear_enable_mlir_graph_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mlir_graph_optimization_ = false;
}
inline bool ConfigProto_Experimental::enable_mlir_graph_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.enable_mlir_graph_optimization)
  return _internal_enable_mlir_graph_optimization();
}
inline void ConfigProto_Experimental::set_enable_mlir_graph_optimization(bool value) {
  _internal_set_enable_mlir_graph_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.enable_mlir_graph_optimization)
}
inline bool ConfigProto_Experimental::_internal_enable_mlir_graph_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_mlir_graph_optimization_;
}
inline void ConfigProto_Experimental::_internal_set_enable_mlir_graph_optimization(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_mlir_graph_optimization_ = value;
}

// bool disable_output_partition_graphs = 14;
inline void ConfigProto_Experimental::clear_disable_output_partition_graphs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_output_partition_graphs_ = false;
}
inline bool ConfigProto_Experimental::disable_output_partition_graphs() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_output_partition_graphs)
  return _internal_disable_output_partition_graphs();
}
inline void ConfigProto_Experimental::set_disable_output_partition_graphs(bool value) {
  _internal_set_disable_output_partition_graphs(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_output_partition_graphs)
}
inline bool ConfigProto_Experimental::_internal_disable_output_partition_graphs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_output_partition_graphs_;
}
inline void ConfigProto_Experimental::_internal_set_disable_output_partition_graphs(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_output_partition_graphs_ = value;
}

// int64 xla_fusion_autotuner_thresh = 15;
inline void ConfigProto_Experimental::clear_xla_fusion_autotuner_thresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xla_fusion_autotuner_thresh_ = ::int64_t{0};
}
inline ::int64_t ConfigProto_Experimental::xla_fusion_autotuner_thresh() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.xla_fusion_autotuner_thresh)
  return _internal_xla_fusion_autotuner_thresh();
}
inline void ConfigProto_Experimental::set_xla_fusion_autotuner_thresh(::int64_t value) {
  _internal_set_xla_fusion_autotuner_thresh(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.xla_fusion_autotuner_thresh)
}
inline ::int64_t ConfigProto_Experimental::_internal_xla_fusion_autotuner_thresh() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xla_fusion_autotuner_thresh_;
}
inline void ConfigProto_Experimental::_internal_set_xla_fusion_autotuner_thresh(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xla_fusion_autotuner_thresh_ = value;
}

// bool use_tfrt = 18;
inline void ConfigProto_Experimental::clear_use_tfrt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_tfrt_ = false;
}
inline bool ConfigProto_Experimental::use_tfrt() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.use_tfrt)
  return _internal_use_tfrt();
}
inline void ConfigProto_Experimental::set_use_tfrt(bool value) {
  _internal_set_use_tfrt(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.use_tfrt)
}
inline bool ConfigProto_Experimental::_internal_use_tfrt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_tfrt_;
}
inline void ConfigProto_Experimental::_internal_set_use_tfrt(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_tfrt_ = value;
}

// bool enable_multi_host = 27;
inline void ConfigProto_Experimental::clear_enable_multi_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_multi_host_ = false;
}
inline bool ConfigProto_Experimental::enable_multi_host() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.enable_multi_host)
  return _internal_enable_multi_host();
}
inline void ConfigProto_Experimental::set_enable_multi_host(bool value) {
  _internal_set_enable_multi_host(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.enable_multi_host)
}
inline bool ConfigProto_Experimental::_internal_enable_multi_host() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_multi_host_;
}
inline void ConfigProto_Experimental::_internal_set_enable_multi_host(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_multi_host_ = value;
}

// bool tfrt_use_ifrt = 32;
inline void ConfigProto_Experimental::clear_tfrt_use_ifrt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tfrt_use_ifrt_ = false;
}
inline bool ConfigProto_Experimental::tfrt_use_ifrt() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.tfrt_use_ifrt)
  return _internal_tfrt_use_ifrt();
}
inline void ConfigProto_Experimental::set_tfrt_use_ifrt(bool value) {
  _internal_set_tfrt_use_ifrt(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.tfrt_use_ifrt)
}
inline bool ConfigProto_Experimental::_internal_tfrt_use_ifrt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tfrt_use_ifrt_;
}
inline void ConfigProto_Experimental::_internal_set_tfrt_use_ifrt(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tfrt_use_ifrt_ = value;
}

// int32 backend_server_port = 28;
inline void ConfigProto_Experimental::clear_backend_server_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.backend_server_port_ = 0;
}
inline ::int32_t ConfigProto_Experimental::backend_server_port() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.backend_server_port)
  return _internal_backend_server_port();
}
inline void ConfigProto_Experimental::set_backend_server_port(::int32_t value) {
  _internal_set_backend_server_port(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.backend_server_port)
}
inline ::int32_t ConfigProto_Experimental::_internal_backend_server_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.backend_server_port_;
}
inline void ConfigProto_Experimental::_internal_set_backend_server_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.backend_server_port_ = value;
}

// bool target_tpu = 29;
inline void ConfigProto_Experimental::clear_target_tpu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_tpu_ = false;
}
inline bool ConfigProto_Experimental::target_tpu() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.target_tpu)
  return _internal_target_tpu();
}
inline void ConfigProto_Experimental::set_target_tpu(bool value) {
  _internal_set_target_tpu(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.target_tpu)
}
inline bool ConfigProto_Experimental::_internal_target_tpu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_tpu_;
}
inline void ConfigProto_Experimental::_internal_set_target_tpu(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_tpu_ = value;
}

// bool target_gpu = 30;
inline void ConfigProto_Experimental::clear_target_gpu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_gpu_ = false;
}
inline bool ConfigProto_Experimental::target_gpu() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.target_gpu)
  return _internal_target_gpu();
}
inline void ConfigProto_Experimental::set_target_gpu(bool value) {
  _internal_set_target_gpu(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.target_gpu)
}
inline bool ConfigProto_Experimental::_internal_target_gpu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_gpu_;
}
inline void ConfigProto_Experimental::_internal_set_target_gpu(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_gpu_ = value;
}

// int32 stream_merge_threshold = 31;
inline void ConfigProto_Experimental::clear_stream_merge_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_merge_threshold_ = 0;
}
inline ::int32_t ConfigProto_Experimental::stream_merge_threshold() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.stream_merge_threshold)
  return _internal_stream_merge_threshold();
}
inline void ConfigProto_Experimental::set_stream_merge_threshold(::int32_t value) {
  _internal_set_stream_merge_threshold(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.stream_merge_threshold)
}
inline ::int32_t ConfigProto_Experimental::_internal_stream_merge_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_merge_threshold_;
}
inline void ConfigProto_Experimental::_internal_set_stream_merge_threshold(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_merge_threshold_ = value;
}

// bool disable_functional_ops_lowering = 21;
inline void ConfigProto_Experimental::clear_disable_functional_ops_lowering() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_functional_ops_lowering_ = false;
}
inline bool ConfigProto_Experimental::disable_functional_ops_lowering() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_functional_ops_lowering)
  return _internal_disable_functional_ops_lowering();
}
inline void ConfigProto_Experimental::set_disable_functional_ops_lowering(bool value) {
  _internal_set_disable_functional_ops_lowering(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_functional_ops_lowering)
}
inline bool ConfigProto_Experimental::_internal_disable_functional_ops_lowering() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_functional_ops_lowering_;
}
inline void ConfigProto_Experimental::_internal_set_disable_functional_ops_lowering(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_functional_ops_lowering_ = value;
}

// bool xla_prefer_single_graph_cluster = 22;
inline void ConfigProto_Experimental::clear_xla_prefer_single_graph_cluster() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xla_prefer_single_graph_cluster_ = false;
}
inline bool ConfigProto_Experimental::xla_prefer_single_graph_cluster() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.xla_prefer_single_graph_cluster)
  return _internal_xla_prefer_single_graph_cluster();
}
inline void ConfigProto_Experimental::set_xla_prefer_single_graph_cluster(bool value) {
  _internal_set_xla_prefer_single_graph_cluster(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.xla_prefer_single_graph_cluster)
}
inline bool ConfigProto_Experimental::_internal_xla_prefer_single_graph_cluster() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xla_prefer_single_graph_cluster_;
}
inline void ConfigProto_Experimental::_internal_set_xla_prefer_single_graph_cluster(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xla_prefer_single_graph_cluster_ = value;
}

// .tensorflow.CoordinationServiceConfig coordination_config = 23;
inline bool ConfigProto_Experimental::has_coordination_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coordination_config_ != nullptr);
  return value;
}
inline const ::tensorflow::CoordinationServiceConfig& ConfigProto_Experimental::_internal_coordination_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::CoordinationServiceConfig* p = _impl_.coordination_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::CoordinationServiceConfig&>(::tensorflow::_CoordinationServiceConfig_default_instance_);
}
inline const ::tensorflow::CoordinationServiceConfig& ConfigProto_Experimental::coordination_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.coordination_config)
  return _internal_coordination_config();
}
inline void ConfigProto_Experimental::unsafe_arena_set_allocated_coordination_config(::tensorflow::CoordinationServiceConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coordination_config_);
  }
  _impl_.coordination_config_ = reinterpret_cast<::tensorflow::CoordinationServiceConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.Experimental.coordination_config)
}
inline ::tensorflow::CoordinationServiceConfig* ConfigProto_Experimental::release_coordination_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::CoordinationServiceConfig* released = _impl_.coordination_config_;
  _impl_.coordination_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::CoordinationServiceConfig* ConfigProto_Experimental::unsafe_arena_release_coordination_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.coordination_config)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::CoordinationServiceConfig* temp = _impl_.coordination_config_;
  _impl_.coordination_config_ = nullptr;
  return temp;
}
inline ::tensorflow::CoordinationServiceConfig* ConfigProto_Experimental::_internal_mutable_coordination_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coordination_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::CoordinationServiceConfig>(GetArena());
    _impl_.coordination_config_ = reinterpret_cast<::tensorflow::CoordinationServiceConfig*>(p);
  }
  return _impl_.coordination_config_;
}
inline ::tensorflow::CoordinationServiceConfig* ConfigProto_Experimental::mutable_coordination_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::CoordinationServiceConfig* _msg = _internal_mutable_coordination_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.coordination_config)
  return _msg;
}
inline void ConfigProto_Experimental::set_allocated_coordination_config(::tensorflow::CoordinationServiceConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coordination_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.coordination_config_ = reinterpret_cast<::tensorflow::CoordinationServiceConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.coordination_config)
}

// bool disable_optimize_for_static_graph = 24;
inline void ConfigProto_Experimental::clear_disable_optimize_for_static_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_optimize_for_static_graph_ = false;
}
inline bool ConfigProto_Experimental::disable_optimize_for_static_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_optimize_for_static_graph)
  return _internal_disable_optimize_for_static_graph();
}
inline void ConfigProto_Experimental::set_disable_optimize_for_static_graph(bool value) {
  _internal_set_disable_optimize_for_static_graph(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_optimize_for_static_graph)
}
inline bool ConfigProto_Experimental::_internal_disable_optimize_for_static_graph() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_optimize_for_static_graph_;
}
inline void ConfigProto_Experimental::_internal_set_disable_optimize_for_static_graph(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_optimize_for_static_graph_ = value;
}

// bool disable_eager_executor_streaming_enqueue = 26;
inline void ConfigProto_Experimental::clear_disable_eager_executor_streaming_enqueue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_eager_executor_streaming_enqueue_ = false;
}
inline bool ConfigProto_Experimental::disable_eager_executor_streaming_enqueue() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_eager_executor_streaming_enqueue)
  return _internal_disable_eager_executor_streaming_enqueue();
}
inline void ConfigProto_Experimental::set_disable_eager_executor_streaming_enqueue(bool value) {
  _internal_set_disable_eager_executor_streaming_enqueue(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_eager_executor_streaming_enqueue)
}
inline bool ConfigProto_Experimental::_internal_disable_eager_executor_streaming_enqueue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_eager_executor_streaming_enqueue_;
}
inline void ConfigProto_Experimental::_internal_set_disable_eager_executor_streaming_enqueue(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_eager_executor_streaming_enqueue_ = value;
}

// bool finalize_function_library_runtime = 33;
inline void ConfigProto_Experimental::clear_finalize_function_library_runtime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finalize_function_library_runtime_ = false;
}
inline bool ConfigProto_Experimental::finalize_function_library_runtime() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.finalize_function_library_runtime)
  return _internal_finalize_function_library_runtime();
}
inline void ConfigProto_Experimental::set_finalize_function_library_runtime(bool value) {
  _internal_set_finalize_function_library_runtime(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.finalize_function_library_runtime)
}
inline bool ConfigProto_Experimental::_internal_finalize_function_library_runtime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.finalize_function_library_runtime_;
}
inline void ConfigProto_Experimental::_internal_set_finalize_function_library_runtime(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finalize_function_library_runtime_ = value;
}

// bool finalize_resource_manager = 34;
inline void ConfigProto_Experimental::clear_finalize_resource_manager() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finalize_resource_manager_ = false;
}
inline bool ConfigProto_Experimental::finalize_resource_manager() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.finalize_resource_manager)
  return _internal_finalize_resource_manager();
}
inline void ConfigProto_Experimental::set_finalize_resource_manager(bool value) {
  _internal_set_finalize_resource_manager(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.finalize_resource_manager)
}
inline bool ConfigProto_Experimental::_internal_finalize_resource_manager() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.finalize_resource_manager_;
}
inline void ConfigProto_Experimental::_internal_set_finalize_resource_manager(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finalize_resource_manager_ = value;
}

// -------------------------------------------------------------------

// ConfigProto

// map<string, int32> device_count = 1;
inline int ConfigProto::_internal_device_count_size() const {
  return _internal_device_count().size();
}
inline int ConfigProto::device_count_size() const {
  return _internal_device_count_size();
}
inline void ConfigProto::clear_device_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_count_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& ConfigProto::_internal_device_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_count_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& ConfigProto::device_count() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.ConfigProto.device_count)
  return _internal_device_count();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* ConfigProto::_internal_mutable_device_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_count_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* ConfigProto::mutable_device_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.ConfigProto.device_count)
  return _internal_mutable_device_count();
}

// int32 intra_op_parallelism_threads = 2;
inline void ConfigProto::clear_intra_op_parallelism_threads() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.intra_op_parallelism_threads_ = 0;
}
inline ::int32_t ConfigProto::intra_op_parallelism_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.intra_op_parallelism_threads)
  return _internal_intra_op_parallelism_threads();
}
inline void ConfigProto::set_intra_op_parallelism_threads(::int32_t value) {
  _internal_set_intra_op_parallelism_threads(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.intra_op_parallelism_threads)
}
inline ::int32_t ConfigProto::_internal_intra_op_parallelism_threads() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.intra_op_parallelism_threads_;
}
inline void ConfigProto::_internal_set_intra_op_parallelism_threads(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.intra_op_parallelism_threads_ = value;
}

// int32 inter_op_parallelism_threads = 5;
inline void ConfigProto::clear_inter_op_parallelism_threads() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inter_op_parallelism_threads_ = 0;
}
inline ::int32_t ConfigProto::inter_op_parallelism_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.inter_op_parallelism_threads)
  return _internal_inter_op_parallelism_threads();
}
inline void ConfigProto::set_inter_op_parallelism_threads(::int32_t value) {
  _internal_set_inter_op_parallelism_threads(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.inter_op_parallelism_threads)
}
inline ::int32_t ConfigProto::_internal_inter_op_parallelism_threads() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inter_op_parallelism_threads_;
}
inline void ConfigProto::_internal_set_inter_op_parallelism_threads(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inter_op_parallelism_threads_ = value;
}

// bool use_per_session_threads = 9;
inline void ConfigProto::clear_use_per_session_threads() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_per_session_threads_ = false;
}
inline bool ConfigProto::use_per_session_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.use_per_session_threads)
  return _internal_use_per_session_threads();
}
inline void ConfigProto::set_use_per_session_threads(bool value) {
  _internal_set_use_per_session_threads(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.use_per_session_threads)
}
inline bool ConfigProto::_internal_use_per_session_threads() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_per_session_threads_;
}
inline void ConfigProto::_internal_set_use_per_session_threads(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_per_session_threads_ = value;
}

// repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
inline int ConfigProto::_internal_session_inter_op_thread_pool_size() const {
  return _internal_session_inter_op_thread_pool().size();
}
inline int ConfigProto::session_inter_op_thread_pool_size() const {
  return _internal_session_inter_op_thread_pool_size();
}
inline void ConfigProto::clear_session_inter_op_thread_pool() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_inter_op_thread_pool_.Clear();
}
inline ::tensorflow::ThreadPoolOptionProto* ConfigProto::mutable_session_inter_op_thread_pool(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return _internal_mutable_session_inter_op_thread_pool()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::ThreadPoolOptionProto>* ConfigProto::mutable_session_inter_op_thread_pool()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConfigProto.session_inter_op_thread_pool)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_session_inter_op_thread_pool();
}
inline const ::tensorflow::ThreadPoolOptionProto& ConfigProto::session_inter_op_thread_pool(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return _internal_session_inter_op_thread_pool().Get(index);
}
inline ::tensorflow::ThreadPoolOptionProto* ConfigProto::add_session_inter_op_thread_pool() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::ThreadPoolOptionProto* _add = _internal_mutable_session_inter_op_thread_pool()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::ThreadPoolOptionProto>& ConfigProto::session_inter_op_thread_pool() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return _internal_session_inter_op_thread_pool();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::ThreadPoolOptionProto>&
ConfigProto::_internal_session_inter_op_thread_pool() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_inter_op_thread_pool_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::ThreadPoolOptionProto>*
ConfigProto::_internal_mutable_session_inter_op_thread_pool() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.session_inter_op_thread_pool_;
}

// int32 placement_period = 3;
inline void ConfigProto::clear_placement_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.placement_period_ = 0;
}
inline ::int32_t ConfigProto::placement_period() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.placement_period)
  return _internal_placement_period();
}
inline void ConfigProto::set_placement_period(::int32_t value) {
  _internal_set_placement_period(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.placement_period)
}
inline ::int32_t ConfigProto::_internal_placement_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.placement_period_;
}
inline void ConfigProto::_internal_set_placement_period(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.placement_period_ = value;
}

// repeated string device_filters = 4;
inline int ConfigProto::_internal_device_filters_size() const {
  return _internal_device_filters().size();
}
inline int ConfigProto::device_filters_size() const {
  return _internal_device_filters_size();
}
inline void ConfigProto::clear_device_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_filters_.Clear();
}
inline std::string* ConfigProto::add_device_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_device_filters()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ConfigProto.device_filters)
  return _s;
}
inline const std::string& ConfigProto::device_filters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.device_filters)
  return _internal_device_filters().Get(index);
}
inline std::string* ConfigProto::mutable_device_filters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.device_filters)
  return _internal_mutable_device_filters()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ConfigProto::set_device_filters(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_device_filters()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.device_filters)
}
template <typename Arg_, typename... Args_>
inline void ConfigProto::add_device_filters(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_device_filters(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.ConfigProto.device_filters)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ConfigProto::device_filters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.ConfigProto.device_filters)
  return _internal_device_filters();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ConfigProto::mutable_device_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConfigProto.device_filters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_device_filters();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ConfigProto::_internal_device_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_filters_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ConfigProto::_internal_mutable_device_filters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.device_filters_;
}

// .tensorflow.GPUOptions gpu_options = 6;
inline bool ConfigProto::has_gpu_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gpu_options_ != nullptr);
  return value;
}
inline void ConfigProto::clear_gpu_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gpu_options_ != nullptr) _impl_.gpu_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::GPUOptions& ConfigProto::_internal_gpu_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::GPUOptions* p = _impl_.gpu_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::GPUOptions&>(::tensorflow::_GPUOptions_default_instance_);
}
inline const ::tensorflow::GPUOptions& ConfigProto::gpu_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.gpu_options)
  return _internal_gpu_options();
}
inline void ConfigProto::unsafe_arena_set_allocated_gpu_options(::tensorflow::GPUOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gpu_options_);
  }
  _impl_.gpu_options_ = reinterpret_cast<::tensorflow::GPUOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.gpu_options)
}
inline ::tensorflow::GPUOptions* ConfigProto::release_gpu_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::GPUOptions* released = _impl_.gpu_options_;
  _impl_.gpu_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::GPUOptions* ConfigProto::unsafe_arena_release_gpu_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.gpu_options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::GPUOptions* temp = _impl_.gpu_options_;
  _impl_.gpu_options_ = nullptr;
  return temp;
}
inline ::tensorflow::GPUOptions* ConfigProto::_internal_mutable_gpu_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gpu_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::GPUOptions>(GetArena());
    _impl_.gpu_options_ = reinterpret_cast<::tensorflow::GPUOptions*>(p);
  }
  return _impl_.gpu_options_;
}
inline ::tensorflow::GPUOptions* ConfigProto::mutable_gpu_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::GPUOptions* _msg = _internal_mutable_gpu_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.gpu_options)
  return _msg;
}
inline void ConfigProto::set_allocated_gpu_options(::tensorflow::GPUOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gpu_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gpu_options_ = reinterpret_cast<::tensorflow::GPUOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.gpu_options)
}

// .tensorflow.GPUOptions pluggable_device_options = 18;
inline bool ConfigProto::has_pluggable_device_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pluggable_device_options_ != nullptr);
  return value;
}
inline void ConfigProto::clear_pluggable_device_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pluggable_device_options_ != nullptr) _impl_.pluggable_device_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::tensorflow::GPUOptions& ConfigProto::_internal_pluggable_device_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::GPUOptions* p = _impl_.pluggable_device_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::GPUOptions&>(::tensorflow::_GPUOptions_default_instance_);
}
inline const ::tensorflow::GPUOptions& ConfigProto::pluggable_device_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.pluggable_device_options)
  return _internal_pluggable_device_options();
}
inline void ConfigProto::unsafe_arena_set_allocated_pluggable_device_options(::tensorflow::GPUOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pluggable_device_options_);
  }
  _impl_.pluggable_device_options_ = reinterpret_cast<::tensorflow::GPUOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.pluggable_device_options)
}
inline ::tensorflow::GPUOptions* ConfigProto::release_pluggable_device_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tensorflow::GPUOptions* released = _impl_.pluggable_device_options_;
  _impl_.pluggable_device_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::GPUOptions* ConfigProto::unsafe_arena_release_pluggable_device_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.pluggable_device_options)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tensorflow::GPUOptions* temp = _impl_.pluggable_device_options_;
  _impl_.pluggable_device_options_ = nullptr;
  return temp;
}
inline ::tensorflow::GPUOptions* ConfigProto::_internal_mutable_pluggable_device_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pluggable_device_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::GPUOptions>(GetArena());
    _impl_.pluggable_device_options_ = reinterpret_cast<::tensorflow::GPUOptions*>(p);
  }
  return _impl_.pluggable_device_options_;
}
inline ::tensorflow::GPUOptions* ConfigProto::mutable_pluggable_device_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::tensorflow::GPUOptions* _msg = _internal_mutable_pluggable_device_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.pluggable_device_options)
  return _msg;
}
inline void ConfigProto::set_allocated_pluggable_device_options(::tensorflow::GPUOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pluggable_device_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.pluggable_device_options_ = reinterpret_cast<::tensorflow::GPUOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.pluggable_device_options)
}

// bool allow_soft_placement = 7;
inline void ConfigProto::clear_allow_soft_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_soft_placement_ = false;
}
inline bool ConfigProto::allow_soft_placement() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.allow_soft_placement)
  return _internal_allow_soft_placement();
}
inline void ConfigProto::set_allow_soft_placement(bool value) {
  _internal_set_allow_soft_placement(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.allow_soft_placement)
}
inline bool ConfigProto::_internal_allow_soft_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_soft_placement_;
}
inline void ConfigProto::_internal_set_allow_soft_placement(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_soft_placement_ = value;
}

// bool log_device_placement = 8;
inline void ConfigProto::clear_log_device_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_device_placement_ = false;
}
inline bool ConfigProto::log_device_placement() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.log_device_placement)
  return _internal_log_device_placement();
}
inline void ConfigProto::set_log_device_placement(bool value) {
  _internal_set_log_device_placement(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.log_device_placement)
}
inline bool ConfigProto::_internal_log_device_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_device_placement_;
}
inline void ConfigProto::_internal_set_log_device_placement(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_device_placement_ = value;
}

// .tensorflow.GraphOptions graph_options = 10;
inline bool ConfigProto::has_graph_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.graph_options_ != nullptr);
  return value;
}
inline void ConfigProto::clear_graph_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.graph_options_ != nullptr) _impl_.graph_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::GraphOptions& ConfigProto::_internal_graph_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::GraphOptions* p = _impl_.graph_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::GraphOptions&>(::tensorflow::_GraphOptions_default_instance_);
}
inline const ::tensorflow::GraphOptions& ConfigProto::graph_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.graph_options)
  return _internal_graph_options();
}
inline void ConfigProto::unsafe_arena_set_allocated_graph_options(::tensorflow::GraphOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.graph_options_);
  }
  _impl_.graph_options_ = reinterpret_cast<::tensorflow::GraphOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.graph_options)
}
inline ::tensorflow::GraphOptions* ConfigProto::release_graph_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::GraphOptions* released = _impl_.graph_options_;
  _impl_.graph_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::GraphOptions* ConfigProto::unsafe_arena_release_graph_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.graph_options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::GraphOptions* temp = _impl_.graph_options_;
  _impl_.graph_options_ = nullptr;
  return temp;
}
inline ::tensorflow::GraphOptions* ConfigProto::_internal_mutable_graph_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.graph_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::GraphOptions>(GetArena());
    _impl_.graph_options_ = reinterpret_cast<::tensorflow::GraphOptions*>(p);
  }
  return _impl_.graph_options_;
}
inline ::tensorflow::GraphOptions* ConfigProto::mutable_graph_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::GraphOptions* _msg = _internal_mutable_graph_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.graph_options)
  return _msg;
}
inline void ConfigProto::set_allocated_graph_options(::tensorflow::GraphOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.graph_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.graph_options_ = reinterpret_cast<::tensorflow::GraphOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.graph_options)
}

// int64 operation_timeout_in_ms = 11;
inline void ConfigProto::clear_operation_timeout_in_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_timeout_in_ms_ = ::int64_t{0};
}
inline ::int64_t ConfigProto::operation_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.operation_timeout_in_ms)
  return _internal_operation_timeout_in_ms();
}
inline void ConfigProto::set_operation_timeout_in_ms(::int64_t value) {
  _internal_set_operation_timeout_in_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.operation_timeout_in_ms)
}
inline ::int64_t ConfigProto::_internal_operation_timeout_in_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_timeout_in_ms_;
}
inline void ConfigProto::_internal_set_operation_timeout_in_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_timeout_in_ms_ = value;
}

// .tensorflow.RPCOptions rpc_options = 13;
inline bool ConfigProto::has_rpc_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rpc_options_ != nullptr);
  return value;
}
inline const ::tensorflow::RPCOptions& ConfigProto::_internal_rpc_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::RPCOptions* p = _impl_.rpc_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::RPCOptions&>(::tensorflow::_RPCOptions_default_instance_);
}
inline const ::tensorflow::RPCOptions& ConfigProto::rpc_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.rpc_options)
  return _internal_rpc_options();
}
inline void ConfigProto::unsafe_arena_set_allocated_rpc_options(::tensorflow::RPCOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rpc_options_);
  }
  _impl_.rpc_options_ = reinterpret_cast<::tensorflow::RPCOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.rpc_options)
}
inline ::tensorflow::RPCOptions* ConfigProto::release_rpc_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::RPCOptions* released = _impl_.rpc_options_;
  _impl_.rpc_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::RPCOptions* ConfigProto::unsafe_arena_release_rpc_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.rpc_options)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::RPCOptions* temp = _impl_.rpc_options_;
  _impl_.rpc_options_ = nullptr;
  return temp;
}
inline ::tensorflow::RPCOptions* ConfigProto::_internal_mutable_rpc_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rpc_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::RPCOptions>(GetArena());
    _impl_.rpc_options_ = reinterpret_cast<::tensorflow::RPCOptions*>(p);
  }
  return _impl_.rpc_options_;
}
inline ::tensorflow::RPCOptions* ConfigProto::mutable_rpc_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tensorflow::RPCOptions* _msg = _internal_mutable_rpc_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.rpc_options)
  return _msg;
}
inline void ConfigProto::set_allocated_rpc_options(::tensorflow::RPCOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rpc_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.rpc_options_ = reinterpret_cast<::tensorflow::RPCOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.rpc_options)
}

// .tensorflow.ClusterDef cluster_def = 14;
inline bool ConfigProto::has_cluster_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cluster_def_ != nullptr);
  return value;
}
inline const ::tensorflow::ClusterDef& ConfigProto::_internal_cluster_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::ClusterDef* p = _impl_.cluster_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::ClusterDef&>(::tensorflow::_ClusterDef_default_instance_);
}
inline const ::tensorflow::ClusterDef& ConfigProto::cluster_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.cluster_def)
  return _internal_cluster_def();
}
inline void ConfigProto::unsafe_arena_set_allocated_cluster_def(::tensorflow::ClusterDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cluster_def_);
  }
  _impl_.cluster_def_ = reinterpret_cast<::tensorflow::ClusterDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.cluster_def)
}
inline ::tensorflow::ClusterDef* ConfigProto::release_cluster_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tensorflow::ClusterDef* released = _impl_.cluster_def_;
  _impl_.cluster_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::ClusterDef* ConfigProto::unsafe_arena_release_cluster_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.cluster_def)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tensorflow::ClusterDef* temp = _impl_.cluster_def_;
  _impl_.cluster_def_ = nullptr;
  return temp;
}
inline ::tensorflow::ClusterDef* ConfigProto::_internal_mutable_cluster_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cluster_def_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::ClusterDef>(GetArena());
    _impl_.cluster_def_ = reinterpret_cast<::tensorflow::ClusterDef*>(p);
  }
  return _impl_.cluster_def_;
}
inline ::tensorflow::ClusterDef* ConfigProto::mutable_cluster_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tensorflow::ClusterDef* _msg = _internal_mutable_cluster_def();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.cluster_def)
  return _msg;
}
inline void ConfigProto::set_allocated_cluster_def(::tensorflow::ClusterDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cluster_def_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.cluster_def_ = reinterpret_cast<::tensorflow::ClusterDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.cluster_def)
}

// bool isolate_session_state = 15;
inline void ConfigProto::clear_isolate_session_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isolate_session_state_ = false;
}
inline bool ConfigProto::isolate_session_state() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.isolate_session_state)
  return _internal_isolate_session_state();
}
inline void ConfigProto::set_isolate_session_state(bool value) {
  _internal_set_isolate_session_state(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.isolate_session_state)
}
inline bool ConfigProto::_internal_isolate_session_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isolate_session_state_;
}
inline void ConfigProto::_internal_set_isolate_session_state(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isolate_session_state_ = value;
}

// bool share_cluster_devices_in_session = 17;
inline void ConfigProto::clear_share_cluster_devices_in_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.share_cluster_devices_in_session_ = false;
}
inline bool ConfigProto::share_cluster_devices_in_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.share_cluster_devices_in_session)
  return _internal_share_cluster_devices_in_session();
}
inline void ConfigProto::set_share_cluster_devices_in_session(bool value) {
  _internal_set_share_cluster_devices_in_session(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.share_cluster_devices_in_session)
}
inline bool ConfigProto::_internal_share_cluster_devices_in_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.share_cluster_devices_in_session_;
}
inline void ConfigProto::_internal_set_share_cluster_devices_in_session(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.share_cluster_devices_in_session_ = value;
}

// .tensorflow.ConfigProto.Experimental experimental = 16;
inline bool ConfigProto::has_experimental() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.experimental_ != nullptr);
  return value;
}
inline void ConfigProto::clear_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_ != nullptr) _impl_.experimental_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::tensorflow::ConfigProto_Experimental& ConfigProto::_internal_experimental() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::ConfigProto_Experimental* p = _impl_.experimental_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::ConfigProto_Experimental&>(::tensorflow::_ConfigProto_Experimental_default_instance_);
}
inline const ::tensorflow::ConfigProto_Experimental& ConfigProto::experimental() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.experimental)
  return _internal_experimental();
}
inline void ConfigProto::unsafe_arena_set_allocated_experimental(::tensorflow::ConfigProto_Experimental* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.experimental_);
  }
  _impl_.experimental_ = reinterpret_cast<::tensorflow::ConfigProto_Experimental*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.experimental)
}
inline ::tensorflow::ConfigProto_Experimental* ConfigProto::release_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tensorflow::ConfigProto_Experimental* released = _impl_.experimental_;
  _impl_.experimental_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::ConfigProto_Experimental* ConfigProto::unsafe_arena_release_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.experimental)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tensorflow::ConfigProto_Experimental* temp = _impl_.experimental_;
  _impl_.experimental_ = nullptr;
  return temp;
}
inline ::tensorflow::ConfigProto_Experimental* ConfigProto::_internal_mutable_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::ConfigProto_Experimental>(GetArena());
    _impl_.experimental_ = reinterpret_cast<::tensorflow::ConfigProto_Experimental*>(p);
  }
  return _impl_.experimental_;
}
inline ::tensorflow::ConfigProto_Experimental* ConfigProto::mutable_experimental() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::tensorflow::ConfigProto_Experimental* _msg = _internal_mutable_experimental();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.experimental)
  return _msg;
}
inline void ConfigProto::set_allocated_experimental(::tensorflow::ConfigProto_Experimental* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.experimental_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.experimental_ = reinterpret_cast<::tensorflow::ConfigProto_Experimental*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.experimental)
}

// -------------------------------------------------------------------

// RunOptions_Experimental_RunHandlerPoolOptions

// int64 priority = 1;
inline void RunOptions_Experimental_RunHandlerPoolOptions::clear_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = ::int64_t{0};
}
inline ::int64_t RunOptions_Experimental_RunHandlerPoolOptions::priority() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions.priority)
  return _internal_priority();
}
inline void RunOptions_Experimental_RunHandlerPoolOptions::set_priority(::int64_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions.priority)
}
inline ::int64_t RunOptions_Experimental_RunHandlerPoolOptions::_internal_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.priority_;
}
inline void RunOptions_Experimental_RunHandlerPoolOptions::_internal_set_priority(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = value;
}

// -------------------------------------------------------------------

// RunOptions_Experimental

// int64 collective_graph_key = 1;
inline void RunOptions_Experimental::clear_collective_graph_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_graph_key_ = ::int64_t{0};
}
inline ::int64_t RunOptions_Experimental::collective_graph_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.collective_graph_key)
  return _internal_collective_graph_key();
}
inline void RunOptions_Experimental::set_collective_graph_key(::int64_t value) {
  _internal_set_collective_graph_key(value);
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.collective_graph_key)
}
inline ::int64_t RunOptions_Experimental::_internal_collective_graph_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collective_graph_key_;
}
inline void RunOptions_Experimental::_internal_set_collective_graph_key(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collective_graph_key_ = value;
}

// bool use_run_handler_pool = 2;
inline void RunOptions_Experimental::clear_use_run_handler_pool() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_run_handler_pool_ = false;
}
inline bool RunOptions_Experimental::use_run_handler_pool() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.use_run_handler_pool)
  return _internal_use_run_handler_pool();
}
inline void RunOptions_Experimental::set_use_run_handler_pool(bool value) {
  _internal_set_use_run_handler_pool(value);
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.use_run_handler_pool)
}
inline bool RunOptions_Experimental::_internal_use_run_handler_pool() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_run_handler_pool_;
}
inline void RunOptions_Experimental::_internal_set_use_run_handler_pool(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_run_handler_pool_ = value;
}

// .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
inline bool RunOptions_Experimental::has_run_handler_pool_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.run_handler_pool_options_ != nullptr);
  return value;
}
inline void RunOptions_Experimental::clear_run_handler_pool_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.run_handler_pool_options_ != nullptr) _impl_.run_handler_pool_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions& RunOptions_Experimental::_internal_run_handler_pool_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* p = _impl_.run_handler_pool_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions&>(::tensorflow::_RunOptions_Experimental_RunHandlerPoolOptions_default_instance_);
}
inline const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions& RunOptions_Experimental::run_handler_pool_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  return _internal_run_handler_pool_options();
}
inline void RunOptions_Experimental::unsafe_arena_set_allocated_run_handler_pool_options(::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.run_handler_pool_options_);
  }
  _impl_.run_handler_pool_options_ = reinterpret_cast<::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunOptions.Experimental.run_handler_pool_options)
}
inline ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::release_run_handler_pool_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* released = _impl_.run_handler_pool_options_;
  _impl_.run_handler_pool_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::unsafe_arena_release_run_handler_pool_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.Experimental.run_handler_pool_options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* temp = _impl_.run_handler_pool_options_;
  _impl_.run_handler_pool_options_ = nullptr;
  return temp;
}
inline ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::_internal_mutable_run_handler_pool_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.run_handler_pool_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions>(GetArena());
    _impl_.run_handler_pool_options_ = reinterpret_cast<::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions*>(p);
  }
  return _impl_.run_handler_pool_options_;
}
inline ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::mutable_run_handler_pool_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* _msg = _internal_mutable_run_handler_pool_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  return _msg;
}
inline void RunOptions_Experimental::set_allocated_run_handler_pool_options(::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.run_handler_pool_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.run_handler_pool_options_ = reinterpret_cast<::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.Experimental.run_handler_pool_options)
}

// -------------------------------------------------------------------

// RunOptions

// .tensorflow.RunOptions.TraceLevel trace_level = 1;
inline void RunOptions::clear_trace_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_level_ = 0;
}
inline ::tensorflow::RunOptions_TraceLevel RunOptions::trace_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.trace_level)
  return _internal_trace_level();
}
inline void RunOptions::set_trace_level(::tensorflow::RunOptions_TraceLevel value) {
  _internal_set_trace_level(value);
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.trace_level)
}
inline ::tensorflow::RunOptions_TraceLevel RunOptions::_internal_trace_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RunOptions_TraceLevel>(_impl_.trace_level_);
}
inline void RunOptions::_internal_set_trace_level(::tensorflow::RunOptions_TraceLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_level_ = value;
}

// int64 timeout_in_ms = 2;
inline void RunOptions::clear_timeout_in_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_in_ms_ = ::int64_t{0};
}
inline ::int64_t RunOptions::timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.timeout_in_ms)
  return _internal_timeout_in_ms();
}
inline void RunOptions::set_timeout_in_ms(::int64_t value) {
  _internal_set_timeout_in_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.timeout_in_ms)
}
inline ::int64_t RunOptions::_internal_timeout_in_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeout_in_ms_;
}
inline void RunOptions::_internal_set_timeout_in_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_in_ms_ = value;
}

// int32 inter_op_thread_pool = 3;
inline void RunOptions::clear_inter_op_thread_pool() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inter_op_thread_pool_ = 0;
}
inline ::int32_t RunOptions::inter_op_thread_pool() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.inter_op_thread_pool)
  return _internal_inter_op_thread_pool();
}
inline void RunOptions::set_inter_op_thread_pool(::int32_t value) {
  _internal_set_inter_op_thread_pool(value);
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.inter_op_thread_pool)
}
inline ::int32_t RunOptions::_internal_inter_op_thread_pool() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inter_op_thread_pool_;
}
inline void RunOptions::_internal_set_inter_op_thread_pool(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inter_op_thread_pool_ = value;
}

// bool output_partition_graphs = 5;
inline void RunOptions::clear_output_partition_graphs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_partition_graphs_ = false;
}
inline bool RunOptions::output_partition_graphs() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.output_partition_graphs)
  return _internal_output_partition_graphs();
}
inline void RunOptions::set_output_partition_graphs(bool value) {
  _internal_set_output_partition_graphs(value);
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.output_partition_graphs)
}
inline bool RunOptions::_internal_output_partition_graphs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_partition_graphs_;
}
inline void RunOptions::_internal_set_output_partition_graphs(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_partition_graphs_ = value;
}

// .tensorflow.DebugOptions debug_options = 6;
inline bool RunOptions::has_debug_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.debug_options_ != nullptr);
  return value;
}
inline const ::tensorflow::DebugOptions& RunOptions::_internal_debug_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::DebugOptions* p = _impl_.debug_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::DebugOptions&>(::tensorflow::_DebugOptions_default_instance_);
}
inline const ::tensorflow::DebugOptions& RunOptions::debug_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.debug_options)
  return _internal_debug_options();
}
inline void RunOptions::unsafe_arena_set_allocated_debug_options(::tensorflow::DebugOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.debug_options_);
  }
  _impl_.debug_options_ = reinterpret_cast<::tensorflow::DebugOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunOptions.debug_options)
}
inline ::tensorflow::DebugOptions* RunOptions::release_debug_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::DebugOptions* released = _impl_.debug_options_;
  _impl_.debug_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::DebugOptions* RunOptions::unsafe_arena_release_debug_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.debug_options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::DebugOptions* temp = _impl_.debug_options_;
  _impl_.debug_options_ = nullptr;
  return temp;
}
inline ::tensorflow::DebugOptions* RunOptions::_internal_mutable_debug_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.debug_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::DebugOptions>(GetArena());
    _impl_.debug_options_ = reinterpret_cast<::tensorflow::DebugOptions*>(p);
  }
  return _impl_.debug_options_;
}
inline ::tensorflow::DebugOptions* RunOptions::mutable_debug_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::DebugOptions* _msg = _internal_mutable_debug_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.debug_options)
  return _msg;
}
inline void RunOptions::set_allocated_debug_options(::tensorflow::DebugOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.debug_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.debug_options_ = reinterpret_cast<::tensorflow::DebugOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.debug_options)
}

// bool report_tensor_allocations_upon_oom = 7;
inline void RunOptions::clear_report_tensor_allocations_upon_oom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_tensor_allocations_upon_oom_ = false;
}
inline bool RunOptions::report_tensor_allocations_upon_oom() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.report_tensor_allocations_upon_oom)
  return _internal_report_tensor_allocations_upon_oom();
}
inline void RunOptions::set_report_tensor_allocations_upon_oom(bool value) {
  _internal_set_report_tensor_allocations_upon_oom(value);
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.report_tensor_allocations_upon_oom)
}
inline bool RunOptions::_internal_report_tensor_allocations_upon_oom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.report_tensor_allocations_upon_oom_;
}
inline void RunOptions::_internal_set_report_tensor_allocations_upon_oom(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_tensor_allocations_upon_oom_ = value;
}

// .tensorflow.RunOptions.Experimental experimental = 8;
inline bool RunOptions::has_experimental() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.experimental_ != nullptr);
  return value;
}
inline void RunOptions::clear_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_ != nullptr) _impl_.experimental_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::RunOptions_Experimental& RunOptions::_internal_experimental() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::RunOptions_Experimental* p = _impl_.experimental_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::RunOptions_Experimental&>(::tensorflow::_RunOptions_Experimental_default_instance_);
}
inline const ::tensorflow::RunOptions_Experimental& RunOptions::experimental() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.experimental)
  return _internal_experimental();
}
inline void RunOptions::unsafe_arena_set_allocated_experimental(::tensorflow::RunOptions_Experimental* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.experimental_);
  }
  _impl_.experimental_ = reinterpret_cast<::tensorflow::RunOptions_Experimental*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunOptions.experimental)
}
inline ::tensorflow::RunOptions_Experimental* RunOptions::release_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::RunOptions_Experimental* released = _impl_.experimental_;
  _impl_.experimental_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::RunOptions_Experimental* RunOptions::unsafe_arena_release_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.experimental)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::RunOptions_Experimental* temp = _impl_.experimental_;
  _impl_.experimental_ = nullptr;
  return temp;
}
inline ::tensorflow::RunOptions_Experimental* RunOptions::_internal_mutable_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.experimental_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunOptions_Experimental>(GetArena());
    _impl_.experimental_ = reinterpret_cast<::tensorflow::RunOptions_Experimental*>(p);
  }
  return _impl_.experimental_;
}
inline ::tensorflow::RunOptions_Experimental* RunOptions::mutable_experimental() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::RunOptions_Experimental* _msg = _internal_mutable_experimental();
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.experimental)
  return _msg;
}
inline void RunOptions::set_allocated_experimental(::tensorflow::RunOptions_Experimental* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.experimental_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.experimental_ = reinterpret_cast<::tensorflow::RunOptions_Experimental*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.experimental)
}

// -------------------------------------------------------------------

// RunMetadata_FunctionGraphs

// repeated .tensorflow.GraphDef partition_graphs = 1;
inline int RunMetadata_FunctionGraphs::_internal_partition_graphs_size() const {
  return _internal_partition_graphs().size();
}
inline int RunMetadata_FunctionGraphs::partition_graphs_size() const {
  return _internal_partition_graphs_size();
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_partition_graphs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return _internal_mutable_partition_graphs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>* RunMetadata_FunctionGraphs::mutable_partition_graphs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_partition_graphs();
}
inline const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::partition_graphs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return _internal_partition_graphs().Get(index);
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::add_partition_graphs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::GraphDef* _add = _internal_mutable_partition_graphs()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>& RunMetadata_FunctionGraphs::partition_graphs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return _internal_partition_graphs();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>&
RunMetadata_FunctionGraphs::_internal_partition_graphs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.partition_graphs_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>*
RunMetadata_FunctionGraphs::_internal_mutable_partition_graphs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.partition_graphs_;
}

// .tensorflow.GraphDef pre_optimization_graph = 2;
inline bool RunMetadata_FunctionGraphs::has_pre_optimization_graph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pre_optimization_graph_ != nullptr);
  return value;
}
inline const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::_internal_pre_optimization_graph() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::GraphDef* p = _impl_.pre_optimization_graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::GraphDef&>(::tensorflow::_GraphDef_default_instance_);
}
inline const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::pre_optimization_graph() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  return _internal_pre_optimization_graph();
}
inline void RunMetadata_FunctionGraphs::unsafe_arena_set_allocated_pre_optimization_graph(::tensorflow::GraphDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pre_optimization_graph_);
  }
  _impl_.pre_optimization_graph_ = reinterpret_cast<::tensorflow::GraphDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::release_pre_optimization_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::GraphDef* released = _impl_.pre_optimization_graph_;
  _impl_.pre_optimization_graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::unsafe_arena_release_pre_optimization_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::GraphDef* temp = _impl_.pre_optimization_graph_;
  _impl_.pre_optimization_graph_ = nullptr;
  return temp;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::_internal_mutable_pre_optimization_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pre_optimization_graph_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::GraphDef>(GetArena());
    _impl_.pre_optimization_graph_ = reinterpret_cast<::tensorflow::GraphDef*>(p);
  }
  return _impl_.pre_optimization_graph_;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_pre_optimization_graph() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::GraphDef* _msg = _internal_mutable_pre_optimization_graph();
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  return _msg;
}
inline void RunMetadata_FunctionGraphs::set_allocated_pre_optimization_graph(::tensorflow::GraphDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pre_optimization_graph_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pre_optimization_graph_ = reinterpret_cast<::tensorflow::GraphDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
}

// .tensorflow.GraphDef post_optimization_graph = 3;
inline bool RunMetadata_FunctionGraphs::has_post_optimization_graph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_optimization_graph_ != nullptr);
  return value;
}
inline const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::_internal_post_optimization_graph() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::GraphDef* p = _impl_.post_optimization_graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::GraphDef&>(::tensorflow::_GraphDef_default_instance_);
}
inline const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::post_optimization_graph() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  return _internal_post_optimization_graph();
}
inline void RunMetadata_FunctionGraphs::unsafe_arena_set_allocated_post_optimization_graph(::tensorflow::GraphDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_optimization_graph_);
  }
  _impl_.post_optimization_graph_ = reinterpret_cast<::tensorflow::GraphDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::release_post_optimization_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::GraphDef* released = _impl_.post_optimization_graph_;
  _impl_.post_optimization_graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::unsafe_arena_release_post_optimization_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::GraphDef* temp = _impl_.post_optimization_graph_;
  _impl_.post_optimization_graph_ = nullptr;
  return temp;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::_internal_mutable_post_optimization_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.post_optimization_graph_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::GraphDef>(GetArena());
    _impl_.post_optimization_graph_ = reinterpret_cast<::tensorflow::GraphDef*>(p);
  }
  return _impl_.post_optimization_graph_;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_post_optimization_graph() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::GraphDef* _msg = _internal_mutable_post_optimization_graph();
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  return _msg;
}
inline void RunMetadata_FunctionGraphs::set_allocated_post_optimization_graph(::tensorflow::GraphDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_optimization_graph_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.post_optimization_graph_ = reinterpret_cast<::tensorflow::GraphDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
}

// -------------------------------------------------------------------

// RunMetadata

// .tensorflow.StepStats step_stats = 1;
inline bool RunMetadata::has_step_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.step_stats_ != nullptr);
  return value;
}
inline const ::tensorflow::StepStats& RunMetadata::_internal_step_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::StepStats* p = _impl_.step_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::StepStats&>(::tensorflow::_StepStats_default_instance_);
}
inline const ::tensorflow::StepStats& RunMetadata::step_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.step_stats)
  return _internal_step_stats();
}
inline void RunMetadata::unsafe_arena_set_allocated_step_stats(::tensorflow::StepStats* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.step_stats_);
  }
  _impl_.step_stats_ = reinterpret_cast<::tensorflow::StepStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.step_stats)
}
inline ::tensorflow::StepStats* RunMetadata::release_step_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::StepStats* released = _impl_.step_stats_;
  _impl_.step_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::StepStats* RunMetadata::unsafe_arena_release_step_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.step_stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::StepStats* temp = _impl_.step_stats_;
  _impl_.step_stats_ = nullptr;
  return temp;
}
inline ::tensorflow::StepStats* RunMetadata::_internal_mutable_step_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.step_stats_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::StepStats>(GetArena());
    _impl_.step_stats_ = reinterpret_cast<::tensorflow::StepStats*>(p);
  }
  return _impl_.step_stats_;
}
inline ::tensorflow::StepStats* RunMetadata::mutable_step_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::StepStats* _msg = _internal_mutable_step_stats();
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.step_stats)
  return _msg;
}
inline void RunMetadata::set_allocated_step_stats(::tensorflow::StepStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.step_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.step_stats_ = reinterpret_cast<::tensorflow::StepStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.step_stats)
}

// .tensorflow.CostGraphDef cost_graph = 2;
inline bool RunMetadata::has_cost_graph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cost_graph_ != nullptr);
  return value;
}
inline const ::tensorflow::CostGraphDef& RunMetadata::_internal_cost_graph() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::CostGraphDef* p = _impl_.cost_graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::CostGraphDef&>(::tensorflow::_CostGraphDef_default_instance_);
}
inline const ::tensorflow::CostGraphDef& RunMetadata::cost_graph() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.cost_graph)
  return _internal_cost_graph();
}
inline void RunMetadata::unsafe_arena_set_allocated_cost_graph(::tensorflow::CostGraphDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cost_graph_);
  }
  _impl_.cost_graph_ = reinterpret_cast<::tensorflow::CostGraphDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.cost_graph)
}
inline ::tensorflow::CostGraphDef* RunMetadata::release_cost_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::CostGraphDef* released = _impl_.cost_graph_;
  _impl_.cost_graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::CostGraphDef* RunMetadata::unsafe_arena_release_cost_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.cost_graph)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::CostGraphDef* temp = _impl_.cost_graph_;
  _impl_.cost_graph_ = nullptr;
  return temp;
}
inline ::tensorflow::CostGraphDef* RunMetadata::_internal_mutable_cost_graph() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cost_graph_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::CostGraphDef>(GetArena());
    _impl_.cost_graph_ = reinterpret_cast<::tensorflow::CostGraphDef*>(p);
  }
  return _impl_.cost_graph_;
}
inline ::tensorflow::CostGraphDef* RunMetadata::mutable_cost_graph() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::CostGraphDef* _msg = _internal_mutable_cost_graph();
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.cost_graph)
  return _msg;
}
inline void RunMetadata::set_allocated_cost_graph(::tensorflow::CostGraphDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cost_graph_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.cost_graph_ = reinterpret_cast<::tensorflow::CostGraphDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.cost_graph)
}

// repeated .tensorflow.GraphDef partition_graphs = 3;
inline int RunMetadata::_internal_partition_graphs_size() const {
  return _internal_partition_graphs().size();
}
inline int RunMetadata::partition_graphs_size() const {
  return _internal_partition_graphs_size();
}
inline ::tensorflow::GraphDef* RunMetadata::mutable_partition_graphs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.partition_graphs)
  return _internal_mutable_partition_graphs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>* RunMetadata::mutable_partition_graphs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.partition_graphs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_partition_graphs();
}
inline const ::tensorflow::GraphDef& RunMetadata::partition_graphs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.partition_graphs)
  return _internal_partition_graphs().Get(index);
}
inline ::tensorflow::GraphDef* RunMetadata::add_partition_graphs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::GraphDef* _add = _internal_mutable_partition_graphs()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.partition_graphs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>& RunMetadata::partition_graphs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.partition_graphs)
  return _internal_partition_graphs();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>&
RunMetadata::_internal_partition_graphs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.partition_graphs_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::GraphDef>*
RunMetadata::_internal_mutable_partition_graphs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.partition_graphs_;
}

// repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
inline int RunMetadata::_internal_function_graphs_size() const {
  return _internal_function_graphs().size();
}
inline int RunMetadata::function_graphs_size() const {
  return _internal_function_graphs_size();
}
inline void RunMetadata::clear_function_graphs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_graphs_.Clear();
}
inline ::tensorflow::RunMetadata_FunctionGraphs* RunMetadata::mutable_function_graphs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.function_graphs)
  return _internal_mutable_function_graphs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::RunMetadata_FunctionGraphs>* RunMetadata::mutable_function_graphs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.function_graphs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_function_graphs();
}
inline const ::tensorflow::RunMetadata_FunctionGraphs& RunMetadata::function_graphs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.function_graphs)
  return _internal_function_graphs().Get(index);
}
inline ::tensorflow::RunMetadata_FunctionGraphs* RunMetadata::add_function_graphs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::RunMetadata_FunctionGraphs* _add = _internal_mutable_function_graphs()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.function_graphs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::RunMetadata_FunctionGraphs>& RunMetadata::function_graphs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.function_graphs)
  return _internal_function_graphs();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::RunMetadata_FunctionGraphs>&
RunMetadata::_internal_function_graphs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.function_graphs_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::RunMetadata_FunctionGraphs>*
RunMetadata::_internal_mutable_function_graphs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.function_graphs_;
}

// .tensorflow.SessionMetadata session_metadata = 5;
inline bool RunMetadata::has_session_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_metadata_ != nullptr);
  return value;
}
inline void RunMetadata::clear_session_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_metadata_ != nullptr) _impl_.session_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tensorflow::SessionMetadata& RunMetadata::_internal_session_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::SessionMetadata* p = _impl_.session_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::SessionMetadata&>(::tensorflow::_SessionMetadata_default_instance_);
}
inline const ::tensorflow::SessionMetadata& RunMetadata::session_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.session_metadata)
  return _internal_session_metadata();
}
inline void RunMetadata::unsafe_arena_set_allocated_session_metadata(::tensorflow::SessionMetadata* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.session_metadata_);
  }
  _impl_.session_metadata_ = reinterpret_cast<::tensorflow::SessionMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.session_metadata)
}
inline ::tensorflow::SessionMetadata* RunMetadata::release_session_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::SessionMetadata* released = _impl_.session_metadata_;
  _impl_.session_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::SessionMetadata* RunMetadata::unsafe_arena_release_session_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.session_metadata)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::SessionMetadata* temp = _impl_.session_metadata_;
  _impl_.session_metadata_ = nullptr;
  return temp;
}
inline ::tensorflow::SessionMetadata* RunMetadata::_internal_mutable_session_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::SessionMetadata>(GetArena());
    _impl_.session_metadata_ = reinterpret_cast<::tensorflow::SessionMetadata*>(p);
  }
  return _impl_.session_metadata_;
}
inline ::tensorflow::SessionMetadata* RunMetadata::mutable_session_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tensorflow::SessionMetadata* _msg = _internal_mutable_session_metadata();
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.session_metadata)
  return _msg;
}
inline void RunMetadata::set_allocated_session_metadata(::tensorflow::SessionMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.session_metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.session_metadata_ = reinterpret_cast<::tensorflow::SessionMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.session_metadata)
}

// -------------------------------------------------------------------

// TensorConnection

// string from_tensor = 1;
inline void TensorConnection::clear_from_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_tensor_.ClearToEmpty();
}
inline const std::string& TensorConnection::from_tensor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.TensorConnection.from_tensor)
  return _internal_from_tensor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TensorConnection::set_from_tensor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_tensor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.TensorConnection.from_tensor)
}
inline std::string* TensorConnection::mutable_from_tensor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_from_tensor();
  // @@protoc_insertion_point(field_mutable:tensorflow.TensorConnection.from_tensor)
  return _s;
}
inline const std::string& TensorConnection::_internal_from_tensor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_tensor_.Get();
}
inline void TensorConnection::_internal_set_from_tensor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_tensor_.Set(value, GetArena());
}
inline std::string* TensorConnection::_internal_mutable_from_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.from_tensor_.Mutable( GetArena());
}
inline std::string* TensorConnection::release_from_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.TensorConnection.from_tensor)
  return _impl_.from_tensor_.Release();
}
inline void TensorConnection::set_allocated_from_tensor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_tensor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.from_tensor_.IsDefault()) {
          _impl_.from_tensor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorConnection.from_tensor)
}

// string to_tensor = 2;
inline void TensorConnection::clear_to_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_tensor_.ClearToEmpty();
}
inline const std::string& TensorConnection::to_tensor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.TensorConnection.to_tensor)
  return _internal_to_tensor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TensorConnection::set_to_tensor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_tensor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.TensorConnection.to_tensor)
}
inline std::string* TensorConnection::mutable_to_tensor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_tensor();
  // @@protoc_insertion_point(field_mutable:tensorflow.TensorConnection.to_tensor)
  return _s;
}
inline const std::string& TensorConnection::_internal_to_tensor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_tensor_.Get();
}
inline void TensorConnection::_internal_set_to_tensor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_tensor_.Set(value, GetArena());
}
inline std::string* TensorConnection::_internal_mutable_to_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_tensor_.Mutable( GetArena());
}
inline std::string* TensorConnection::release_to_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.TensorConnection.to_tensor)
  return _impl_.to_tensor_.Release();
}
inline void TensorConnection::set_allocated_to_tensor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_tensor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_tensor_.IsDefault()) {
          _impl_.to_tensor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorConnection.to_tensor)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CallableOptions

// repeated string feed = 1;
inline int CallableOptions::_internal_feed_size() const {
  return _internal_feed().size();
}
inline int CallableOptions::feed_size() const {
  return _internal_feed_size();
}
inline void CallableOptions::clear_feed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feed_.Clear();
}
inline std::string* CallableOptions::add_feed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_feed()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.feed)
  return _s;
}
inline const std::string& CallableOptions::feed(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.feed)
  return _internal_feed().Get(index);
}
inline std::string* CallableOptions::mutable_feed(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.feed)
  return _internal_mutable_feed()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CallableOptions::set_feed(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_feed()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.feed)
}
template <typename Arg_, typename... Args_>
inline void CallableOptions::add_feed(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_feed(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.feed)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CallableOptions::feed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.feed)
  return _internal_feed();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CallableOptions::mutable_feed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.feed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_feed();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CallableOptions::_internal_feed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.feed_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CallableOptions::_internal_mutable_feed() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.feed_;
}

// repeated string fetch = 2;
inline int CallableOptions::_internal_fetch_size() const {
  return _internal_fetch().size();
}
inline int CallableOptions::fetch_size() const {
  return _internal_fetch_size();
}
inline void CallableOptions::clear_fetch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_.Clear();
}
inline std::string* CallableOptions::add_fetch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_fetch()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.fetch)
  return _s;
}
inline const std::string& CallableOptions::fetch(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.fetch)
  return _internal_fetch().Get(index);
}
inline std::string* CallableOptions::mutable_fetch(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.fetch)
  return _internal_mutable_fetch()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CallableOptions::set_fetch(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_fetch()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.fetch)
}
template <typename Arg_, typename... Args_>
inline void CallableOptions::add_fetch(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_fetch(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.fetch)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CallableOptions::fetch() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.fetch)
  return _internal_fetch();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CallableOptions::mutable_fetch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.fetch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fetch();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CallableOptions::_internal_fetch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fetch_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CallableOptions::_internal_mutable_fetch() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fetch_;
}

// repeated string target = 3;
inline int CallableOptions::_internal_target_size() const {
  return _internal_target().size();
}
inline int CallableOptions::target_size() const {
  return _internal_target_size();
}
inline void CallableOptions::clear_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_.Clear();
}
inline std::string* CallableOptions::add_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_target()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.target)
  return _s;
}
inline const std::string& CallableOptions::target(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.target)
  return _internal_target().Get(index);
}
inline std::string* CallableOptions::mutable_target(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.target)
  return _internal_mutable_target()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CallableOptions::set_target(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_target()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.target)
}
template <typename Arg_, typename... Args_>
inline void CallableOptions::add_target(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_target(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.target)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CallableOptions::target() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.target)
  return _internal_target();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CallableOptions::mutable_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.target)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_target();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CallableOptions::_internal_target() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CallableOptions::_internal_mutable_target() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.target_;
}

// .tensorflow.RunOptions run_options = 4;
inline bool CallableOptions::has_run_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.run_options_ != nullptr);
  return value;
}
inline void CallableOptions::clear_run_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.run_options_ != nullptr) _impl_.run_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::RunOptions& CallableOptions::_internal_run_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::RunOptions* p = _impl_.run_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::RunOptions&>(::tensorflow::_RunOptions_default_instance_);
}
inline const ::tensorflow::RunOptions& CallableOptions::run_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.run_options)
  return _internal_run_options();
}
inline void CallableOptions::unsafe_arena_set_allocated_run_options(::tensorflow::RunOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.run_options_);
  }
  _impl_.run_options_ = reinterpret_cast<::tensorflow::RunOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CallableOptions.run_options)
}
inline ::tensorflow::RunOptions* CallableOptions::release_run_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::RunOptions* released = _impl_.run_options_;
  _impl_.run_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::RunOptions* CallableOptions::unsafe_arena_release_run_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.CallableOptions.run_options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::RunOptions* temp = _impl_.run_options_;
  _impl_.run_options_ = nullptr;
  return temp;
}
inline ::tensorflow::RunOptions* CallableOptions::_internal_mutable_run_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.run_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunOptions>(GetArena());
    _impl_.run_options_ = reinterpret_cast<::tensorflow::RunOptions*>(p);
  }
  return _impl_.run_options_;
}
inline ::tensorflow::RunOptions* CallableOptions::mutable_run_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::RunOptions* _msg = _internal_mutable_run_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.run_options)
  return _msg;
}
inline void CallableOptions::set_allocated_run_options(::tensorflow::RunOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.run_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.run_options_ = reinterpret_cast<::tensorflow::RunOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CallableOptions.run_options)
}

// repeated .tensorflow.TensorConnection tensor_connection = 5;
inline int CallableOptions::_internal_tensor_connection_size() const {
  return _internal_tensor_connection().size();
}
inline int CallableOptions::tensor_connection_size() const {
  return _internal_tensor_connection_size();
}
inline void CallableOptions::clear_tensor_connection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensor_connection_.Clear();
}
inline ::tensorflow::TensorConnection* CallableOptions::mutable_tensor_connection(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.tensor_connection)
  return _internal_mutable_tensor_connection()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::TensorConnection>* CallableOptions::mutable_tensor_connection()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.tensor_connection)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tensor_connection();
}
inline const ::tensorflow::TensorConnection& CallableOptions::tensor_connection(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.tensor_connection)
  return _internal_tensor_connection().Get(index);
}
inline ::tensorflow::TensorConnection* CallableOptions::add_tensor_connection() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::TensorConnection* _add = _internal_mutable_tensor_connection()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.tensor_connection)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::TensorConnection>& CallableOptions::tensor_connection() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.tensor_connection)
  return _internal_tensor_connection();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::TensorConnection>&
CallableOptions::_internal_tensor_connection() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensor_connection_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::TensorConnection>*
CallableOptions::_internal_mutable_tensor_connection() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tensor_connection_;
}

// map<string, string> feed_devices = 6;
inline int CallableOptions::_internal_feed_devices_size() const {
  return _internal_feed_devices().size();
}
inline int CallableOptions::feed_devices_size() const {
  return _internal_feed_devices_size();
}
inline void CallableOptions::clear_feed_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feed_devices_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CallableOptions::_internal_feed_devices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.feed_devices_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CallableOptions::feed_devices() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.CallableOptions.feed_devices)
  return _internal_feed_devices();
}
inline ::google::protobuf::Map<std::string, std::string>* CallableOptions::_internal_mutable_feed_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.feed_devices_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CallableOptions::mutable_feed_devices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.CallableOptions.feed_devices)
  return _internal_mutable_feed_devices();
}

// map<string, string> fetch_devices = 7;
inline int CallableOptions::_internal_fetch_devices_size() const {
  return _internal_fetch_devices().size();
}
inline int CallableOptions::fetch_devices_size() const {
  return _internal_fetch_devices_size();
}
inline void CallableOptions::clear_fetch_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_devices_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CallableOptions::_internal_fetch_devices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fetch_devices_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CallableOptions::fetch_devices() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.CallableOptions.fetch_devices)
  return _internal_fetch_devices();
}
inline ::google::protobuf::Map<std::string, std::string>* CallableOptions::_internal_mutable_fetch_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fetch_devices_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CallableOptions::mutable_fetch_devices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.CallableOptions.fetch_devices)
  return _internal_mutable_fetch_devices();
}

// bool fetch_skip_sync = 8;
inline void CallableOptions::clear_fetch_skip_sync() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_skip_sync_ = false;
}
inline bool CallableOptions::fetch_skip_sync() const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.fetch_skip_sync)
  return _internal_fetch_skip_sync();
}
inline void CallableOptions::set_fetch_skip_sync(bool value) {
  _internal_set_fetch_skip_sync(value);
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.fetch_skip_sync)
}
inline bool CallableOptions::_internal_fetch_skip_sync() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fetch_skip_sync_;
}
inline void CallableOptions::_internal_set_fetch_skip_sync(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_skip_sync_ = value;
}

// -------------------------------------------------------------------

// BatchingOptions

// int32 num_batch_threads = 1;
inline void BatchingOptions::clear_num_batch_threads() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_batch_threads_ = 0;
}
inline ::int32_t BatchingOptions::num_batch_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.BatchingOptions.num_batch_threads)
  return _internal_num_batch_threads();
}
inline void BatchingOptions::set_num_batch_threads(::int32_t value) {
  _internal_set_num_batch_threads(value);
  // @@protoc_insertion_point(field_set:tensorflow.BatchingOptions.num_batch_threads)
}
inline ::int32_t BatchingOptions::_internal_num_batch_threads() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_batch_threads_;
}
inline void BatchingOptions::_internal_set_num_batch_threads(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_batch_threads_ = value;
}

// int32 max_batch_size = 2;
inline void BatchingOptions::clear_max_batch_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_batch_size_ = 0;
}
inline ::int32_t BatchingOptions::max_batch_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.BatchingOptions.max_batch_size)
  return _internal_max_batch_size();
}
inline void BatchingOptions::set_max_batch_size(::int32_t value) {
  _internal_set_max_batch_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.BatchingOptions.max_batch_size)
}
inline ::int32_t BatchingOptions::_internal_max_batch_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_batch_size_;
}
inline void BatchingOptions::_internal_set_max_batch_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_batch_size_ = value;
}

// int32 batch_timeout_micros = 3;
inline void BatchingOptions::clear_batch_timeout_micros() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_timeout_micros_ = 0;
}
inline ::int32_t BatchingOptions::batch_timeout_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.BatchingOptions.batch_timeout_micros)
  return _internal_batch_timeout_micros();
}
inline void BatchingOptions::set_batch_timeout_micros(::int32_t value) {
  _internal_set_batch_timeout_micros(value);
  // @@protoc_insertion_point(field_set:tensorflow.BatchingOptions.batch_timeout_micros)
}
inline ::int32_t BatchingOptions::_internal_batch_timeout_micros() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.batch_timeout_micros_;
}
inline void BatchingOptions::_internal_set_batch_timeout_micros(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_timeout_micros_ = value;
}

// repeated int32 allowed_batch_sizes = 4;
inline int BatchingOptions::_internal_allowed_batch_sizes_size() const {
  return _internal_allowed_batch_sizes().size();
}
inline int BatchingOptions::allowed_batch_sizes_size() const {
  return _internal_allowed_batch_sizes_size();
}
inline void BatchingOptions::clear_allowed_batch_sizes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowed_batch_sizes_.Clear();
}
inline ::int32_t BatchingOptions::allowed_batch_sizes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.BatchingOptions.allowed_batch_sizes)
  return _internal_allowed_batch_sizes().Get(index);
}
inline void BatchingOptions::set_allowed_batch_sizes(int index, ::int32_t value) {
  _internal_mutable_allowed_batch_sizes()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.BatchingOptions.allowed_batch_sizes)
}
inline void BatchingOptions::add_allowed_batch_sizes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_allowed_batch_sizes()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.BatchingOptions.allowed_batch_sizes)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& BatchingOptions::allowed_batch_sizes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.BatchingOptions.allowed_batch_sizes)
  return _internal_allowed_batch_sizes();
}
inline ::google::protobuf::RepeatedField<::int32_t>* BatchingOptions::mutable_allowed_batch_sizes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.BatchingOptions.allowed_batch_sizes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allowed_batch_sizes();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
BatchingOptions::_internal_allowed_batch_sizes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowed_batch_sizes_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* BatchingOptions::_internal_mutable_allowed_batch_sizes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allowed_batch_sizes_;
}

// int32 max_enqueued_batches = 5;
inline void BatchingOptions::clear_max_enqueued_batches() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_enqueued_batches_ = 0;
}
inline ::int32_t BatchingOptions::max_enqueued_batches() const {
  // @@protoc_insertion_point(field_get:tensorflow.BatchingOptions.max_enqueued_batches)
  return _internal_max_enqueued_batches();
}
inline void BatchingOptions::set_max_enqueued_batches(::int32_t value) {
  _internal_set_max_enqueued_batches(value);
  // @@protoc_insertion_point(field_set:tensorflow.BatchingOptions.max_enqueued_batches)
}
inline ::int32_t BatchingOptions::_internal_max_enqueued_batches() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_enqueued_batches_;
}
inline void BatchingOptions::_internal_set_max_enqueued_batches(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_enqueued_batches_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::OptimizerOptions_Level> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::OptimizerOptions_Level>() {
  return ::tensorflow::OptimizerOptions_Level_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::OptimizerOptions_GlobalJitLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::OptimizerOptions_GlobalJitLevel>() {
  return ::tensorflow::OptimizerOptions_GlobalJitLevel_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::ConfigProto_Experimental_MlirBridgeRollout> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::ConfigProto_Experimental_MlirBridgeRollout>() {
  return ::tensorflow::ConfigProto_Experimental_MlirBridgeRollout_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::RunOptions_TraceLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::RunOptions_TraceLevel>() {
  return ::tensorflow::RunOptions_TraceLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto_2epb_2eh
