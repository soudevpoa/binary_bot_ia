// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/data_service.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto;
namespace tensorflow {
namespace data {
class CrossTrainerCacheOptions;
struct CrossTrainerCacheOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern CrossTrainerCacheOptionsDefaultTypeInternal _CrossTrainerCacheOptions_default_instance_;
class DataServiceConfig;
struct DataServiceConfigDefaultTypeInternal;
PROTOBUF_EXPORT extern DataServiceConfigDefaultTypeInternal _DataServiceConfig_default_instance_;
class DataServiceMetadata;
struct DataServiceMetadataDefaultTypeInternal;
PROTOBUF_EXPORT extern DataServiceMetadataDefaultTypeInternal _DataServiceMetadata_default_instance_;
class ProcessingModeDef;
struct ProcessingModeDefDefaultTypeInternal;
PROTOBUF_EXPORT extern ProcessingModeDefDefaultTypeInternal _ProcessingModeDef_default_instance_;
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace data {
enum ProcessingModeDef_ShardingPolicy : int {
  ProcessingModeDef_ShardingPolicy_OFF = 0,
  ProcessingModeDef_ShardingPolicy_DYNAMIC = 1,
  ProcessingModeDef_ShardingPolicy_FILE = 2,
  ProcessingModeDef_ShardingPolicy_DATA = 3,
  ProcessingModeDef_ShardingPolicy_FILE_OR_DATA = 4,
  ProcessingModeDef_ShardingPolicy_HINT = 5,
  ProcessingModeDef_ShardingPolicy_ProcessingModeDef_ShardingPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProcessingModeDef_ShardingPolicy_ProcessingModeDef_ShardingPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool ProcessingModeDef_ShardingPolicy_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t ProcessingModeDef_ShardingPolicy_internal_data_[];
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef_ShardingPolicy_ShardingPolicy_MIN = static_cast<ProcessingModeDef_ShardingPolicy>(0);
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef_ShardingPolicy_ShardingPolicy_MAX = static_cast<ProcessingModeDef_ShardingPolicy>(5);
constexpr int ProcessingModeDef_ShardingPolicy_ShardingPolicy_ARRAYSIZE = 5 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
ProcessingModeDef_ShardingPolicy_descriptor();
template <typename T>
const std::string& ProcessingModeDef_ShardingPolicy_Name(T value) {
  static_assert(std::is_same<T, ProcessingModeDef_ShardingPolicy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ShardingPolicy_Name().");
  return ProcessingModeDef_ShardingPolicy_Name(static_cast<ProcessingModeDef_ShardingPolicy>(value));
}
template <>
inline const std::string& ProcessingModeDef_ShardingPolicy_Name(ProcessingModeDef_ShardingPolicy value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProcessingModeDef_ShardingPolicy_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ProcessingModeDef_ShardingPolicy_Parse(absl::string_view name, ProcessingModeDef_ShardingPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcessingModeDef_ShardingPolicy>(
      ProcessingModeDef_ShardingPolicy_descriptor(), name, value);
}
enum DataServiceMetadata_Compression : int {
  DataServiceMetadata_Compression_COMPRESSION_UNSPECIFIED = 0,
  DataServiceMetadata_Compression_COMPRESSION_OFF = 1,
  DataServiceMetadata_Compression_COMPRESSION_SNAPPY = 2,
  DataServiceMetadata_Compression_COMPRESSION_FORCED_SNAPPY = 3,
  DataServiceMetadata_Compression_DataServiceMetadata_Compression_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataServiceMetadata_Compression_DataServiceMetadata_Compression_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool DataServiceMetadata_Compression_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t DataServiceMetadata_Compression_internal_data_[];
constexpr DataServiceMetadata_Compression DataServiceMetadata_Compression_Compression_MIN = static_cast<DataServiceMetadata_Compression>(0);
constexpr DataServiceMetadata_Compression DataServiceMetadata_Compression_Compression_MAX = static_cast<DataServiceMetadata_Compression>(3);
constexpr int DataServiceMetadata_Compression_Compression_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
DataServiceMetadata_Compression_descriptor();
template <typename T>
const std::string& DataServiceMetadata_Compression_Name(T value) {
  static_assert(std::is_same<T, DataServiceMetadata_Compression>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Compression_Name().");
  return DataServiceMetadata_Compression_Name(static_cast<DataServiceMetadata_Compression>(value));
}
template <>
inline const std::string& DataServiceMetadata_Compression_Name(DataServiceMetadata_Compression value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataServiceMetadata_Compression_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool DataServiceMetadata_Compression_Parse(absl::string_view name, DataServiceMetadata_Compression* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataServiceMetadata_Compression>(
      DataServiceMetadata_Compression_descriptor(), name, value);
}
enum DeploymentMode : int {
  DEPLOYMENT_MODE_UNSPECIFIED = 0,
  DEPLOYMENT_MODE_COLOCATED = 1,
  DEPLOYMENT_MODE_REMOTE = 2,
  DEPLOYMENT_MODE_HYBRID = 3,
  DeploymentMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeploymentMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool DeploymentMode_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t DeploymentMode_internal_data_[];
constexpr DeploymentMode DeploymentMode_MIN = static_cast<DeploymentMode>(0);
constexpr DeploymentMode DeploymentMode_MAX = static_cast<DeploymentMode>(3);
constexpr int DeploymentMode_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
DeploymentMode_descriptor();
template <typename T>
const std::string& DeploymentMode_Name(T value) {
  static_assert(std::is_same<T, DeploymentMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeploymentMode_Name().");
  return DeploymentMode_Name(static_cast<DeploymentMode>(value));
}
template <>
inline const std::string& DeploymentMode_Name(DeploymentMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DeploymentMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool DeploymentMode_Parse(absl::string_view name, DeploymentMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeploymentMode>(
      DeploymentMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT ProcessingModeDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.data.ProcessingModeDef) */ {
 public:
  inline ProcessingModeDef() : ProcessingModeDef(nullptr) {}
  ~ProcessingModeDef() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessingModeDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProcessingModeDef(const ProcessingModeDef& from) : ProcessingModeDef(nullptr, from) {}
  inline ProcessingModeDef(ProcessingModeDef&& from) noexcept
      : ProcessingModeDef(nullptr, std::move(from)) {}
  inline ProcessingModeDef& operator=(const ProcessingModeDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingModeDef& operator=(ProcessingModeDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessingModeDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessingModeDef* internal_default_instance() {
    return reinterpret_cast<const ProcessingModeDef*>(
        &_ProcessingModeDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ProcessingModeDef& a, ProcessingModeDef& b) { a.Swap(&b); }
  inline void Swap(ProcessingModeDef* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessingModeDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessingModeDef* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ProcessingModeDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessingModeDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProcessingModeDef& from) { ProcessingModeDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProcessingModeDef* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.data.ProcessingModeDef"; }

 protected:
  explicit ProcessingModeDef(::google::protobuf::Arena* arena);
  ProcessingModeDef(::google::protobuf::Arena* arena, const ProcessingModeDef& from);
  ProcessingModeDef(::google::protobuf::Arena* arena, ProcessingModeDef&& from) noexcept
      : ProcessingModeDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ShardingPolicy = ProcessingModeDef_ShardingPolicy;
  static constexpr ShardingPolicy OFF = ProcessingModeDef_ShardingPolicy_OFF;
  static constexpr ShardingPolicy DYNAMIC = ProcessingModeDef_ShardingPolicy_DYNAMIC;
  static constexpr ShardingPolicy FILE = ProcessingModeDef_ShardingPolicy_FILE;
  static constexpr ShardingPolicy DATA = ProcessingModeDef_ShardingPolicy_DATA;
  static constexpr ShardingPolicy FILE_OR_DATA = ProcessingModeDef_ShardingPolicy_FILE_OR_DATA;
  static constexpr ShardingPolicy HINT = ProcessingModeDef_ShardingPolicy_HINT;
  static inline bool ShardingPolicy_IsValid(int value) {
    return ProcessingModeDef_ShardingPolicy_IsValid(value);
  }
  static constexpr ShardingPolicy ShardingPolicy_MIN = ProcessingModeDef_ShardingPolicy_ShardingPolicy_MIN;
  static constexpr ShardingPolicy ShardingPolicy_MAX = ProcessingModeDef_ShardingPolicy_ShardingPolicy_MAX;
  static constexpr int ShardingPolicy_ARRAYSIZE = ProcessingModeDef_ShardingPolicy_ShardingPolicy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ShardingPolicy_descriptor() {
    return ProcessingModeDef_ShardingPolicy_descriptor();
  }
  template <typename T>
  static inline const std::string& ShardingPolicy_Name(T value) {
    return ProcessingModeDef_ShardingPolicy_Name(value);
  }
  static inline bool ShardingPolicy_Parse(absl::string_view name, ShardingPolicy* value) {
    return ProcessingModeDef_ShardingPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kShardingPolicyFieldNumber = 1,
  };
  // .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
  void clear_sharding_policy() ;
  ::tensorflow::data::ProcessingModeDef_ShardingPolicy sharding_policy() const;
  void set_sharding_policy(::tensorflow::data::ProcessingModeDef_ShardingPolicy value);

  private:
  ::tensorflow::data::ProcessingModeDef_ShardingPolicy _internal_sharding_policy() const;
  void _internal_set_sharding_policy(::tensorflow::data::ProcessingModeDef_ShardingPolicy value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.data.ProcessingModeDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProcessingModeDef& from_msg);
    int sharding_policy_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DataServiceMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.data.DataServiceMetadata) */ {
 public:
  inline DataServiceMetadata() : DataServiceMetadata(nullptr) {}
  ~DataServiceMetadata() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataServiceMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataServiceMetadata(const DataServiceMetadata& from) : DataServiceMetadata(nullptr, from) {}
  inline DataServiceMetadata(DataServiceMetadata&& from) noexcept
      : DataServiceMetadata(nullptr, std::move(from)) {}
  inline DataServiceMetadata& operator=(const DataServiceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataServiceMetadata& operator=(DataServiceMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataServiceMetadata& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalElementSpecCase {
    kElementSpec = 1,
    OPTIONAL_ELEMENT_SPEC_NOT_SET = 0,
  };
  static inline const DataServiceMetadata* internal_default_instance() {
    return reinterpret_cast<const DataServiceMetadata*>(
        &_DataServiceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DataServiceMetadata& a, DataServiceMetadata& b) { a.Swap(&b); }
  inline void Swap(DataServiceMetadata* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataServiceMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataServiceMetadata* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DataServiceMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataServiceMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataServiceMetadata& from) { DataServiceMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataServiceMetadata* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.data.DataServiceMetadata"; }

 protected:
  explicit DataServiceMetadata(::google::protobuf::Arena* arena);
  DataServiceMetadata(::google::protobuf::Arena* arena, const DataServiceMetadata& from);
  DataServiceMetadata(::google::protobuf::Arena* arena, DataServiceMetadata&& from) noexcept
      : DataServiceMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Compression = DataServiceMetadata_Compression;
  static constexpr Compression COMPRESSION_UNSPECIFIED = DataServiceMetadata_Compression_COMPRESSION_UNSPECIFIED;
  static constexpr Compression COMPRESSION_OFF = DataServiceMetadata_Compression_COMPRESSION_OFF;
  static constexpr Compression COMPRESSION_SNAPPY = DataServiceMetadata_Compression_COMPRESSION_SNAPPY;
  static constexpr Compression COMPRESSION_FORCED_SNAPPY = DataServiceMetadata_Compression_COMPRESSION_FORCED_SNAPPY;
  static inline bool Compression_IsValid(int value) {
    return DataServiceMetadata_Compression_IsValid(value);
  }
  static constexpr Compression Compression_MIN = DataServiceMetadata_Compression_Compression_MIN;
  static constexpr Compression Compression_MAX = DataServiceMetadata_Compression_Compression_MAX;
  static constexpr int Compression_ARRAYSIZE = DataServiceMetadata_Compression_Compression_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Compression_descriptor() {
    return DataServiceMetadata_Compression_descriptor();
  }
  template <typename T>
  static inline const std::string& Compression_Name(T value) {
    return DataServiceMetadata_Compression_Name(value);
  }
  static inline bool Compression_Parse(absl::string_view name, Compression* value) {
    return DataServiceMetadata_Compression_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kCardinalityFieldNumber = 3,
    kCompressionFieldNumber = 2,
    kElementSpecFieldNumber = 1,
  };
  // int64 cardinality = 3;
  void clear_cardinality() ;
  ::int64_t cardinality() const;
  void set_cardinality(::int64_t value);

  private:
  ::int64_t _internal_cardinality() const;
  void _internal_set_cardinality(::int64_t value);

  public:
  // .tensorflow.data.DataServiceMetadata.Compression compression = 2;
  void clear_compression() ;
  ::tensorflow::data::DataServiceMetadata_Compression compression() const;
  void set_compression(::tensorflow::data::DataServiceMetadata_Compression value);

  private:
  ::tensorflow::data::DataServiceMetadata_Compression _internal_compression() const;
  void _internal_set_compression(::tensorflow::data::DataServiceMetadata_Compression value);

  public:
  // bytes element_spec = 1;
  bool has_element_spec() const;
  void clear_element_spec() ;
  const std::string& element_spec() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_element_spec(Arg_&& arg, Args_... args);
  std::string* mutable_element_spec();
  PROTOBUF_NODISCARD std::string* release_element_spec();
  void set_allocated_element_spec(std::string* value);

  private:
  const std::string& _internal_element_spec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_element_spec(
      const std::string& value);
  std::string* _internal_mutable_element_spec();

  public:
  void clear_optional_element_spec();
  OptionalElementSpecCase optional_element_spec_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.data.DataServiceMetadata)
 private:
  class _Internal;
  void set_has_element_spec();
  inline bool has_optional_element_spec() const;
  inline void clear_has_optional_element_spec();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataServiceMetadata& from_msg);
    ::int64_t cardinality_;
    int compression_;
    union OptionalElementSpecUnion {
      constexpr OptionalElementSpecUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr element_spec_;
    } optional_element_spec_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DataServiceConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.data.DataServiceConfig) */ {
 public:
  inline DataServiceConfig() : DataServiceConfig(nullptr) {}
  ~DataServiceConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataServiceConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataServiceConfig(const DataServiceConfig& from) : DataServiceConfig(nullptr, from) {}
  inline DataServiceConfig(DataServiceConfig&& from) noexcept
      : DataServiceConfig(nullptr, std::move(from)) {}
  inline DataServiceConfig& operator=(const DataServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataServiceConfig& operator=(DataServiceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataServiceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataServiceConfig* internal_default_instance() {
    return reinterpret_cast<const DataServiceConfig*>(
        &_DataServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DataServiceConfig& a, DataServiceConfig& b) { a.Swap(&b); }
  inline void Swap(DataServiceConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataServiceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataServiceConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DataServiceConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataServiceConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataServiceConfig& from) { DataServiceConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataServiceConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.data.DataServiceConfig"; }

 protected:
  explicit DataServiceConfig(::google::protobuf::Arena* arena);
  DataServiceConfig(::google::protobuf::Arena* arena, const DataServiceConfig& from);
  DataServiceConfig(::google::protobuf::Arena* arena, DataServiceConfig&& from) noexcept
      : DataServiceConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeploymentModeFieldNumber = 1,
  };
  // .tensorflow.data.DeploymentMode deployment_mode = 1;
  void clear_deployment_mode() ;
  ::tensorflow::data::DeploymentMode deployment_mode() const;
  void set_deployment_mode(::tensorflow::data::DeploymentMode value);

  private:
  ::tensorflow::data::DeploymentMode _internal_deployment_mode() const;
  void _internal_set_deployment_mode(::tensorflow::data::DeploymentMode value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.data.DataServiceConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataServiceConfig& from_msg);
    int deployment_mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT CrossTrainerCacheOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.data.CrossTrainerCacheOptions) */ {
 public:
  inline CrossTrainerCacheOptions() : CrossTrainerCacheOptions(nullptr) {}
  ~CrossTrainerCacheOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CrossTrainerCacheOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline CrossTrainerCacheOptions(const CrossTrainerCacheOptions& from) : CrossTrainerCacheOptions(nullptr, from) {}
  inline CrossTrainerCacheOptions(CrossTrainerCacheOptions&& from) noexcept
      : CrossTrainerCacheOptions(nullptr, std::move(from)) {}
  inline CrossTrainerCacheOptions& operator=(const CrossTrainerCacheOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossTrainerCacheOptions& operator=(CrossTrainerCacheOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossTrainerCacheOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossTrainerCacheOptions* internal_default_instance() {
    return reinterpret_cast<const CrossTrainerCacheOptions*>(
        &_CrossTrainerCacheOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CrossTrainerCacheOptions& a, CrossTrainerCacheOptions& b) { a.Swap(&b); }
  inline void Swap(CrossTrainerCacheOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossTrainerCacheOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossTrainerCacheOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<CrossTrainerCacheOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CrossTrainerCacheOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CrossTrainerCacheOptions& from) { CrossTrainerCacheOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CrossTrainerCacheOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.data.CrossTrainerCacheOptions"; }

 protected:
  explicit CrossTrainerCacheOptions(::google::protobuf::Arena* arena);
  CrossTrainerCacheOptions(::google::protobuf::Arena* arena, const CrossTrainerCacheOptions& from);
  CrossTrainerCacheOptions(::google::protobuf::Arena* arena, CrossTrainerCacheOptions&& from) noexcept
      : CrossTrainerCacheOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTrainerIdFieldNumber = 1,
  };
  // string trainer_id = 1;
  void clear_trainer_id() ;
  const std::string& trainer_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trainer_id(Arg_&& arg, Args_... args);
  std::string* mutable_trainer_id();
  PROTOBUF_NODISCARD std::string* release_trainer_id();
  void set_allocated_trainer_id(std::string* value);

  private:
  const std::string& _internal_trainer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trainer_id(
      const std::string& value);
  std::string* _internal_mutable_trainer_id();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.data.CrossTrainerCacheOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      59, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CrossTrainerCacheOptions& from_msg);
    ::google::protobuf::internal::ArenaStringPtr trainer_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProcessingModeDef

// .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
inline void ProcessingModeDef::clear_sharding_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sharding_policy_ = 0;
}
inline ::tensorflow::data::ProcessingModeDef_ShardingPolicy ProcessingModeDef::sharding_policy() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.ProcessingModeDef.sharding_policy)
  return _internal_sharding_policy();
}
inline void ProcessingModeDef::set_sharding_policy(::tensorflow::data::ProcessingModeDef_ShardingPolicy value) {
  _internal_set_sharding_policy(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.ProcessingModeDef.sharding_policy)
}
inline ::tensorflow::data::ProcessingModeDef_ShardingPolicy ProcessingModeDef::_internal_sharding_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::data::ProcessingModeDef_ShardingPolicy>(_impl_.sharding_policy_);
}
inline void ProcessingModeDef::_internal_set_sharding_policy(::tensorflow::data::ProcessingModeDef_ShardingPolicy value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sharding_policy_ = value;
}

// -------------------------------------------------------------------

// DataServiceMetadata

// bytes element_spec = 1;
inline bool DataServiceMetadata::has_element_spec() const {
  return optional_element_spec_case() == kElementSpec;
}
inline void DataServiceMetadata::set_has_element_spec() {
  _impl_._oneof_case_[0] = kElementSpec;
}
inline void DataServiceMetadata::clear_element_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_element_spec_case() == kElementSpec) {
    _impl_.optional_element_spec_.element_spec_.Destroy();
    clear_has_optional_element_spec();
  }
}
inline const std::string& DataServiceMetadata::element_spec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.DataServiceMetadata.element_spec)
  return _internal_element_spec();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataServiceMetadata::set_element_spec(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_element_spec_case() != kElementSpec) {
    clear_optional_element_spec();

    set_has_element_spec();
    _impl_.optional_element_spec_.element_spec_.InitDefault();
  }
  _impl_.optional_element_spec_.element_spec_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.DataServiceMetadata.element_spec)
}
inline std::string* DataServiceMetadata::mutable_element_spec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_element_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.DataServiceMetadata.element_spec)
  return _s;
}
inline const std::string& DataServiceMetadata::_internal_element_spec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (optional_element_spec_case() != kElementSpec) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_element_spec_.element_spec_.Get();
}
inline void DataServiceMetadata::_internal_set_element_spec(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_element_spec_case() != kElementSpec) {
    clear_optional_element_spec();

    set_has_element_spec();
    _impl_.optional_element_spec_.element_spec_.InitDefault();
  }
  _impl_.optional_element_spec_.element_spec_.Set(value, GetArena());
}
inline std::string* DataServiceMetadata::_internal_mutable_element_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_element_spec_case() != kElementSpec) {
    clear_optional_element_spec();

    set_has_element_spec();
    _impl_.optional_element_spec_.element_spec_.InitDefault();
  }
  return _impl_.optional_element_spec_.element_spec_.Mutable( GetArena());
}
inline std::string* DataServiceMetadata::release_element_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.DataServiceMetadata.element_spec)
  if (optional_element_spec_case() != kElementSpec) {
    return nullptr;
  }
  clear_has_optional_element_spec();
  return _impl_.optional_element_spec_.element_spec_.Release();
}
inline void DataServiceMetadata::set_allocated_element_spec(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_optional_element_spec()) {
    clear_optional_element_spec();
  }
  if (value != nullptr) {
    set_has_element_spec();
    _impl_.optional_element_spec_.element_spec_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.DataServiceMetadata.element_spec)
}

// .tensorflow.data.DataServiceMetadata.Compression compression = 2;
inline void DataServiceMetadata::clear_compression() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compression_ = 0;
}
inline ::tensorflow::data::DataServiceMetadata_Compression DataServiceMetadata::compression() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.DataServiceMetadata.compression)
  return _internal_compression();
}
inline void DataServiceMetadata::set_compression(::tensorflow::data::DataServiceMetadata_Compression value) {
  _internal_set_compression(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.DataServiceMetadata.compression)
}
inline ::tensorflow::data::DataServiceMetadata_Compression DataServiceMetadata::_internal_compression() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::data::DataServiceMetadata_Compression>(_impl_.compression_);
}
inline void DataServiceMetadata::_internal_set_compression(::tensorflow::data::DataServiceMetadata_Compression value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compression_ = value;
}

// int64 cardinality = 3;
inline void DataServiceMetadata::clear_cardinality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cardinality_ = ::int64_t{0};
}
inline ::int64_t DataServiceMetadata::cardinality() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.DataServiceMetadata.cardinality)
  return _internal_cardinality();
}
inline void DataServiceMetadata::set_cardinality(::int64_t value) {
  _internal_set_cardinality(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.DataServiceMetadata.cardinality)
}
inline ::int64_t DataServiceMetadata::_internal_cardinality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cardinality_;
}
inline void DataServiceMetadata::_internal_set_cardinality(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cardinality_ = value;
}

inline bool DataServiceMetadata::has_optional_element_spec() const {
  return optional_element_spec_case() != OPTIONAL_ELEMENT_SPEC_NOT_SET;
}
inline void DataServiceMetadata::clear_has_optional_element_spec() {
  _impl_._oneof_case_[0] = OPTIONAL_ELEMENT_SPEC_NOT_SET;
}
inline DataServiceMetadata::OptionalElementSpecCase DataServiceMetadata::optional_element_spec_case() const {
  return DataServiceMetadata::OptionalElementSpecCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CrossTrainerCacheOptions

// string trainer_id = 1;
inline void CrossTrainerCacheOptions::clear_trainer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trainer_id_.ClearToEmpty();
}
inline const std::string& CrossTrainerCacheOptions::trainer_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.CrossTrainerCacheOptions.trainer_id)
  return _internal_trainer_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossTrainerCacheOptions::set_trainer_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trainer_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.CrossTrainerCacheOptions.trainer_id)
}
inline std::string* CrossTrainerCacheOptions::mutable_trainer_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trainer_id();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.CrossTrainerCacheOptions.trainer_id)
  return _s;
}
inline const std::string& CrossTrainerCacheOptions::_internal_trainer_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trainer_id_.Get();
}
inline void CrossTrainerCacheOptions::_internal_set_trainer_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trainer_id_.Set(value, GetArena());
}
inline std::string* CrossTrainerCacheOptions::_internal_mutable_trainer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.trainer_id_.Mutable( GetArena());
}
inline std::string* CrossTrainerCacheOptions::release_trainer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.CrossTrainerCacheOptions.trainer_id)
  return _impl_.trainer_id_.Release();
}
inline void CrossTrainerCacheOptions::set_allocated_trainer_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trainer_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trainer_id_.IsDefault()) {
          _impl_.trainer_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.CrossTrainerCacheOptions.trainer_id)
}

// -------------------------------------------------------------------

// DataServiceConfig

// .tensorflow.data.DeploymentMode deployment_mode = 1;
inline void DataServiceConfig::clear_deployment_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deployment_mode_ = 0;
}
inline ::tensorflow::data::DeploymentMode DataServiceConfig::deployment_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.DataServiceConfig.deployment_mode)
  return _internal_deployment_mode();
}
inline void DataServiceConfig::set_deployment_mode(::tensorflow::data::DeploymentMode value) {
  _internal_set_deployment_mode(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.DataServiceConfig.deployment_mode)
}
inline ::tensorflow::data::DeploymentMode DataServiceConfig::_internal_deployment_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::data::DeploymentMode>(_impl_.deployment_mode_);
}
inline void DataServiceConfig::_internal_set_deployment_mode(::tensorflow::data::DeploymentMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deployment_mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::data::ProcessingModeDef_ShardingPolicy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::data::ProcessingModeDef_ShardingPolicy>() {
  return ::tensorflow::data::ProcessingModeDef_ShardingPolicy_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::data::DataServiceMetadata_Compression> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::data::DataServiceMetadata_Compression>() {
  return ::tensorflow::data::DataServiceMetadata_Compression_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::data::DeploymentMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::data::DeploymentMode>() {
  return ::tensorflow::data::DeploymentMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_2epb_2eh
