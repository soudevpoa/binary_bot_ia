// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/debug.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
namespace tensorflow {
class DebugOptions;
struct DebugOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern DebugOptionsDefaultTypeInternal _DebugOptions_default_instance_;
class DebugTensorWatch;
struct DebugTensorWatchDefaultTypeInternal;
PROTOBUF_EXPORT extern DebugTensorWatchDefaultTypeInternal _DebugTensorWatch_default_instance_;
class DebuggedSourceFile;
struct DebuggedSourceFileDefaultTypeInternal;
PROTOBUF_EXPORT extern DebuggedSourceFileDefaultTypeInternal _DebuggedSourceFile_default_instance_;
class DebuggedSourceFiles;
struct DebuggedSourceFilesDefaultTypeInternal;
PROTOBUF_EXPORT extern DebuggedSourceFilesDefaultTypeInternal _DebuggedSourceFiles_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT DebuggedSourceFile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.DebuggedSourceFile) */ {
 public:
  inline DebuggedSourceFile() : DebuggedSourceFile(nullptr) {}
  ~DebuggedSourceFile() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DebuggedSourceFile(
      ::google::protobuf::internal::ConstantInitialized);

  inline DebuggedSourceFile(const DebuggedSourceFile& from) : DebuggedSourceFile(nullptr, from) {}
  inline DebuggedSourceFile(DebuggedSourceFile&& from) noexcept
      : DebuggedSourceFile(nullptr, std::move(from)) {}
  inline DebuggedSourceFile& operator=(const DebuggedSourceFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebuggedSourceFile& operator=(DebuggedSourceFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebuggedSourceFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebuggedSourceFile* internal_default_instance() {
    return reinterpret_cast<const DebuggedSourceFile*>(
        &_DebuggedSourceFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DebuggedSourceFile& a, DebuggedSourceFile& b) { a.Swap(&b); }
  inline void Swap(DebuggedSourceFile* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebuggedSourceFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebuggedSourceFile* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DebuggedSourceFile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DebuggedSourceFile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DebuggedSourceFile& from) { DebuggedSourceFile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DebuggedSourceFile* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.DebuggedSourceFile"; }

 protected:
  explicit DebuggedSourceFile(::google::protobuf::Arena* arena);
  DebuggedSourceFile(::google::protobuf::Arena* arena, const DebuggedSourceFile& from);
  DebuggedSourceFile(::google::protobuf::Arena* arena, DebuggedSourceFile&& from) noexcept
      : DebuggedSourceFile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLinesFieldNumber = 5,
    kHostFieldNumber = 1,
    kFilePathFieldNumber = 2,
    kLastModifiedFieldNumber = 3,
    kBytesFieldNumber = 4,
  };
  // repeated string lines = 5;
  int lines_size() const;
  private:
  int _internal_lines_size() const;

  public:
  void clear_lines() ;
  const std::string& lines(int index) const;
  std::string* mutable_lines(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lines(int index, Arg_&& value, Args_... args);
  std::string* add_lines();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_lines(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& lines() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_lines();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_lines() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_lines();

  public:
  // string host = 1;
  void clear_host() ;
  const std::string& host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* value);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // string file_path = 2;
  void clear_file_path() ;
  const std::string& file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* value);

  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(
      const std::string& value);
  std::string* _internal_mutable_file_path();

  public:
  // int64 last_modified = 3;
  void clear_last_modified() ;
  ::int64_t last_modified() const;
  void set_last_modified(::int64_t value);

  private:
  ::int64_t _internal_last_modified() const;
  void _internal_set_last_modified(::int64_t value);

  public:
  // int64 bytes = 4;
  void clear_bytes() ;
  ::int64_t bytes() const;
  void set_bytes(::int64_t value);

  private:
  ::int64_t _internal_bytes() const;
  void _internal_set_bytes(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.DebuggedSourceFile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      56, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DebuggedSourceFile& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> lines_;
    ::google::protobuf::internal::ArenaStringPtr host_;
    ::google::protobuf::internal::ArenaStringPtr file_path_;
    ::int64_t last_modified_;
    ::int64_t bytes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DebugTensorWatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.DebugTensorWatch) */ {
 public:
  inline DebugTensorWatch() : DebugTensorWatch(nullptr) {}
  ~DebugTensorWatch() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DebugTensorWatch(
      ::google::protobuf::internal::ConstantInitialized);

  inline DebugTensorWatch(const DebugTensorWatch& from) : DebugTensorWatch(nullptr, from) {}
  inline DebugTensorWatch(DebugTensorWatch&& from) noexcept
      : DebugTensorWatch(nullptr, std::move(from)) {}
  inline DebugTensorWatch& operator=(const DebugTensorWatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugTensorWatch& operator=(DebugTensorWatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugTensorWatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugTensorWatch* internal_default_instance() {
    return reinterpret_cast<const DebugTensorWatch*>(
        &_DebugTensorWatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DebugTensorWatch& a, DebugTensorWatch& b) { a.Swap(&b); }
  inline void Swap(DebugTensorWatch* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugTensorWatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugTensorWatch* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DebugTensorWatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DebugTensorWatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DebugTensorWatch& from) { DebugTensorWatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DebugTensorWatch* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.DebugTensorWatch"; }

 protected:
  explicit DebugTensorWatch(::google::protobuf::Arena* arena);
  DebugTensorWatch(::google::protobuf::Arena* arena, const DebugTensorWatch& from);
  DebugTensorWatch(::google::protobuf::Arena* arena, DebugTensorWatch&& from) noexcept
      : DebugTensorWatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDebugOpsFieldNumber = 3,
    kDebugUrlsFieldNumber = 4,
    kNodeNameFieldNumber = 1,
    kOutputSlotFieldNumber = 2,
    kTolerateDebugOpCreationFailuresFieldNumber = 5,
  };
  // repeated string debug_ops = 3;
  int debug_ops_size() const;
  private:
  int _internal_debug_ops_size() const;

  public:
  void clear_debug_ops() ;
  const std::string& debug_ops(int index) const;
  std::string* mutable_debug_ops(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_debug_ops(int index, Arg_&& value, Args_... args);
  std::string* add_debug_ops();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_debug_ops(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& debug_ops() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_debug_ops();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_debug_ops() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_debug_ops();

  public:
  // repeated string debug_urls = 4;
  int debug_urls_size() const;
  private:
  int _internal_debug_urls_size() const;

  public:
  void clear_debug_urls() ;
  const std::string& debug_urls(int index) const;
  std::string* mutable_debug_urls(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_debug_urls(int index, Arg_&& value, Args_... args);
  std::string* add_debug_urls();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_debug_urls(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& debug_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_debug_urls();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_debug_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_debug_urls();

  public:
  // string node_name = 1;
  void clear_node_name() ;
  const std::string& node_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_name(Arg_&& arg, Args_... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* value);

  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(
      const std::string& value);
  std::string* _internal_mutable_node_name();

  public:
  // int32 output_slot = 2;
  void clear_output_slot() ;
  ::int32_t output_slot() const;
  void set_output_slot(::int32_t value);

  private:
  ::int32_t _internal_output_slot() const;
  void _internal_set_output_slot(::int32_t value);

  public:
  // bool tolerate_debug_op_creation_failures = 5;
  void clear_tolerate_debug_op_creation_failures() ;
  bool tolerate_debug_op_creation_failures() const;
  void set_tolerate_debug_op_creation_failures(bool value);

  private:
  bool _internal_tolerate_debug_op_creation_failures() const;
  void _internal_set_tolerate_debug_op_creation_failures(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.DebugTensorWatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      64, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DebugTensorWatch& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> debug_ops_;
    ::google::protobuf::RepeatedPtrField<std::string> debug_urls_;
    ::google::protobuf::internal::ArenaStringPtr node_name_;
    ::int32_t output_slot_;
    bool tolerate_debug_op_creation_failures_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DebuggedSourceFiles final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.DebuggedSourceFiles) */ {
 public:
  inline DebuggedSourceFiles() : DebuggedSourceFiles(nullptr) {}
  ~DebuggedSourceFiles() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DebuggedSourceFiles(
      ::google::protobuf::internal::ConstantInitialized);

  inline DebuggedSourceFiles(const DebuggedSourceFiles& from) : DebuggedSourceFiles(nullptr, from) {}
  inline DebuggedSourceFiles(DebuggedSourceFiles&& from) noexcept
      : DebuggedSourceFiles(nullptr, std::move(from)) {}
  inline DebuggedSourceFiles& operator=(const DebuggedSourceFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebuggedSourceFiles& operator=(DebuggedSourceFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebuggedSourceFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebuggedSourceFiles* internal_default_instance() {
    return reinterpret_cast<const DebuggedSourceFiles*>(
        &_DebuggedSourceFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DebuggedSourceFiles& a, DebuggedSourceFiles& b) { a.Swap(&b); }
  inline void Swap(DebuggedSourceFiles* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebuggedSourceFiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebuggedSourceFiles* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DebuggedSourceFiles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DebuggedSourceFiles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DebuggedSourceFiles& from) { DebuggedSourceFiles::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DebuggedSourceFiles* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.DebuggedSourceFiles"; }

 protected:
  explicit DebuggedSourceFiles(::google::protobuf::Arena* arena);
  DebuggedSourceFiles(::google::protobuf::Arena* arena, const DebuggedSourceFiles& from);
  DebuggedSourceFiles(::google::protobuf::Arena* arena, DebuggedSourceFiles&& from) noexcept
      : DebuggedSourceFiles(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceFilesFieldNumber = 1,
  };
  // repeated .tensorflow.DebuggedSourceFile source_files = 1;
  int source_files_size() const;
  private:
  int _internal_source_files_size() const;

  public:
  void clear_source_files() ;
  ::tensorflow::DebuggedSourceFile* mutable_source_files(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::DebuggedSourceFile>* mutable_source_files();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::DebuggedSourceFile>& _internal_source_files() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::DebuggedSourceFile>* _internal_mutable_source_files();
  public:
  const ::tensorflow::DebuggedSourceFile& source_files(int index) const;
  ::tensorflow::DebuggedSourceFile* add_source_files();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::DebuggedSourceFile>& source_files() const;
  // @@protoc_insertion_point(class_scope:tensorflow.DebuggedSourceFiles)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DebuggedSourceFiles& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::DebuggedSourceFile > source_files_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DebugOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.DebugOptions) */ {
 public:
  inline DebugOptions() : DebugOptions(nullptr) {}
  ~DebugOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DebugOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline DebugOptions(const DebugOptions& from) : DebugOptions(nullptr, from) {}
  inline DebugOptions(DebugOptions&& from) noexcept
      : DebugOptions(nullptr, std::move(from)) {}
  inline DebugOptions& operator=(const DebugOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugOptions& operator=(DebugOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugOptions* internal_default_instance() {
    return reinterpret_cast<const DebugOptions*>(
        &_DebugOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DebugOptions& a, DebugOptions& b) { a.Swap(&b); }
  inline void Swap(DebugOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DebugOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DebugOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DebugOptions& from) { DebugOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DebugOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.DebugOptions"; }

 protected:
  explicit DebugOptions(::google::protobuf::Arena* arena);
  DebugOptions(::google::protobuf::Arena* arena, const DebugOptions& from);
  DebugOptions(::google::protobuf::Arena* arena, DebugOptions&& from) noexcept
      : DebugOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDebugTensorWatchOptsFieldNumber = 4,
    kGlobalStepFieldNumber = 10,
    kResetDiskByteUsageFieldNumber = 11,
  };
  // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
  int debug_tensor_watch_opts_size() const;
  private:
  int _internal_debug_tensor_watch_opts_size() const;

  public:
  void clear_debug_tensor_watch_opts() ;
  ::tensorflow::DebugTensorWatch* mutable_debug_tensor_watch_opts(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::DebugTensorWatch>* mutable_debug_tensor_watch_opts();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::DebugTensorWatch>& _internal_debug_tensor_watch_opts() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::DebugTensorWatch>* _internal_mutable_debug_tensor_watch_opts();
  public:
  const ::tensorflow::DebugTensorWatch& debug_tensor_watch_opts(int index) const;
  ::tensorflow::DebugTensorWatch* add_debug_tensor_watch_opts();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::DebugTensorWatch>& debug_tensor_watch_opts() const;
  // int64 global_step = 10;
  void clear_global_step() ;
  ::int64_t global_step() const;
  void set_global_step(::int64_t value);

  private:
  ::int64_t _internal_global_step() const;
  void _internal_set_global_step(::int64_t value);

  public:
  // bool reset_disk_byte_usage = 11;
  void clear_reset_disk_byte_usage() ;
  bool reset_disk_byte_usage() const;
  void set_reset_disk_byte_usage(bool value);

  private:
  bool _internal_reset_disk_byte_usage() const;
  void _internal_set_reset_disk_byte_usage(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.DebugOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DebugOptions& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::DebugTensorWatch > debug_tensor_watch_opts_;
    ::int64_t global_step_;
    bool reset_disk_byte_usage_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DebugTensorWatch

// string node_name = 1;
inline void DebugTensorWatch::clear_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.ClearToEmpty();
}
inline const std::string& DebugTensorWatch::node_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.node_name)
  return _internal_node_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugTensorWatch::set_node_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.node_name)
}
inline std::string* DebugTensorWatch::mutable_node_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugTensorWatch.node_name)
  return _s;
}
inline const std::string& DebugTensorWatch::_internal_node_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_name_.Get();
}
inline void DebugTensorWatch::_internal_set_node_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.Set(value, GetArena());
}
inline std::string* DebugTensorWatch::_internal_mutable_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_name_.Mutable( GetArena());
}
inline std::string* DebugTensorWatch::release_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.DebugTensorWatch.node_name)
  return _impl_.node_name_.Release();
}
inline void DebugTensorWatch::set_allocated_node_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.node_name_.IsDefault()) {
          _impl_.node_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugTensorWatch.node_name)
}

// int32 output_slot = 2;
inline void DebugTensorWatch::clear_output_slot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_slot_ = 0;
}
inline ::int32_t DebugTensorWatch::output_slot() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.output_slot)
  return _internal_output_slot();
}
inline void DebugTensorWatch::set_output_slot(::int32_t value) {
  _internal_set_output_slot(value);
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.output_slot)
}
inline ::int32_t DebugTensorWatch::_internal_output_slot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_slot_;
}
inline void DebugTensorWatch::_internal_set_output_slot(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_slot_ = value;
}

// repeated string debug_ops = 3;
inline int DebugTensorWatch::_internal_debug_ops_size() const {
  return _internal_debug_ops().size();
}
inline int DebugTensorWatch::debug_ops_size() const {
  return _internal_debug_ops_size();
}
inline void DebugTensorWatch::clear_debug_ops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_ops_.Clear();
}
inline std::string* DebugTensorWatch::add_debug_ops() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_debug_ops()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.DebugTensorWatch.debug_ops)
  return _s;
}
inline const std::string& DebugTensorWatch::debug_ops(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.debug_ops)
  return _internal_debug_ops().Get(index);
}
inline std::string* DebugTensorWatch::mutable_debug_ops(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugTensorWatch.debug_ops)
  return _internal_mutable_debug_ops()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void DebugTensorWatch::set_debug_ops(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_debug_ops()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.debug_ops)
}
template <typename Arg_, typename... Args_>
inline void DebugTensorWatch::add_debug_ops(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_debug_ops(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.DebugTensorWatch.debug_ops)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DebugTensorWatch::debug_ops() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.DebugTensorWatch.debug_ops)
  return _internal_debug_ops();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DebugTensorWatch::mutable_debug_ops() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebugTensorWatch.debug_ops)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_debug_ops();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DebugTensorWatch::_internal_debug_ops() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_ops_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DebugTensorWatch::_internal_mutable_debug_ops() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.debug_ops_;
}

// repeated string debug_urls = 4;
inline int DebugTensorWatch::_internal_debug_urls_size() const {
  return _internal_debug_urls().size();
}
inline int DebugTensorWatch::debug_urls_size() const {
  return _internal_debug_urls_size();
}
inline void DebugTensorWatch::clear_debug_urls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_urls_.Clear();
}
inline std::string* DebugTensorWatch::add_debug_urls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_debug_urls()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.DebugTensorWatch.debug_urls)
  return _s;
}
inline const std::string& DebugTensorWatch::debug_urls(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.debug_urls)
  return _internal_debug_urls().Get(index);
}
inline std::string* DebugTensorWatch::mutable_debug_urls(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugTensorWatch.debug_urls)
  return _internal_mutable_debug_urls()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void DebugTensorWatch::set_debug_urls(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_debug_urls()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.debug_urls)
}
template <typename Arg_, typename... Args_>
inline void DebugTensorWatch::add_debug_urls(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_debug_urls(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.DebugTensorWatch.debug_urls)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DebugTensorWatch::debug_urls() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.DebugTensorWatch.debug_urls)
  return _internal_debug_urls();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DebugTensorWatch::mutable_debug_urls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebugTensorWatch.debug_urls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_debug_urls();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DebugTensorWatch::_internal_debug_urls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_urls_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DebugTensorWatch::_internal_mutable_debug_urls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.debug_urls_;
}

// bool tolerate_debug_op_creation_failures = 5;
inline void DebugTensorWatch::clear_tolerate_debug_op_creation_failures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tolerate_debug_op_creation_failures_ = false;
}
inline bool DebugTensorWatch::tolerate_debug_op_creation_failures() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.tolerate_debug_op_creation_failures)
  return _internal_tolerate_debug_op_creation_failures();
}
inline void DebugTensorWatch::set_tolerate_debug_op_creation_failures(bool value) {
  _internal_set_tolerate_debug_op_creation_failures(value);
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.tolerate_debug_op_creation_failures)
}
inline bool DebugTensorWatch::_internal_tolerate_debug_op_creation_failures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tolerate_debug_op_creation_failures_;
}
inline void DebugTensorWatch::_internal_set_tolerate_debug_op_creation_failures(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tolerate_debug_op_creation_failures_ = value;
}

// -------------------------------------------------------------------

// DebugOptions

// repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
inline int DebugOptions::_internal_debug_tensor_watch_opts_size() const {
  return _internal_debug_tensor_watch_opts().size();
}
inline int DebugOptions::debug_tensor_watch_opts_size() const {
  return _internal_debug_tensor_watch_opts_size();
}
inline void DebugOptions::clear_debug_tensor_watch_opts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_tensor_watch_opts_.Clear();
}
inline ::tensorflow::DebugTensorWatch* DebugOptions::mutable_debug_tensor_watch_opts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return _internal_mutable_debug_tensor_watch_opts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::DebugTensorWatch>* DebugOptions::mutable_debug_tensor_watch_opts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebugOptions.debug_tensor_watch_opts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_debug_tensor_watch_opts();
}
inline const ::tensorflow::DebugTensorWatch& DebugOptions::debug_tensor_watch_opts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return _internal_debug_tensor_watch_opts().Get(index);
}
inline ::tensorflow::DebugTensorWatch* DebugOptions::add_debug_tensor_watch_opts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::DebugTensorWatch* _add = _internal_mutable_debug_tensor_watch_opts()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::DebugTensorWatch>& DebugOptions::debug_tensor_watch_opts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return _internal_debug_tensor_watch_opts();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::DebugTensorWatch>&
DebugOptions::_internal_debug_tensor_watch_opts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_tensor_watch_opts_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::DebugTensorWatch>*
DebugOptions::_internal_mutable_debug_tensor_watch_opts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.debug_tensor_watch_opts_;
}

// int64 global_step = 10;
inline void DebugOptions::clear_global_step() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_step_ = ::int64_t{0};
}
inline ::int64_t DebugOptions::global_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugOptions.global_step)
  return _internal_global_step();
}
inline void DebugOptions::set_global_step(::int64_t value) {
  _internal_set_global_step(value);
  // @@protoc_insertion_point(field_set:tensorflow.DebugOptions.global_step)
}
inline ::int64_t DebugOptions::_internal_global_step() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_step_;
}
inline void DebugOptions::_internal_set_global_step(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_step_ = value;
}

// bool reset_disk_byte_usage = 11;
inline void DebugOptions::clear_reset_disk_byte_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reset_disk_byte_usage_ = false;
}
inline bool DebugOptions::reset_disk_byte_usage() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugOptions.reset_disk_byte_usage)
  return _internal_reset_disk_byte_usage();
}
inline void DebugOptions::set_reset_disk_byte_usage(bool value) {
  _internal_set_reset_disk_byte_usage(value);
  // @@protoc_insertion_point(field_set:tensorflow.DebugOptions.reset_disk_byte_usage)
}
inline bool DebugOptions::_internal_reset_disk_byte_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reset_disk_byte_usage_;
}
inline void DebugOptions::_internal_set_reset_disk_byte_usage(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reset_disk_byte_usage_ = value;
}

// -------------------------------------------------------------------

// DebuggedSourceFile

// string host = 1;
inline void DebuggedSourceFile::clear_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.ClearToEmpty();
}
inline const std::string& DebuggedSourceFile::host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedSourceFile.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebuggedSourceFile::set_host(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedSourceFile.host)
}
inline std::string* DebuggedSourceFile::mutable_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedSourceFile.host)
  return _s;
}
inline const std::string& DebuggedSourceFile::_internal_host() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.host_.Get();
}
inline void DebuggedSourceFile::_internal_set_host(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.Set(value, GetArena());
}
inline std::string* DebuggedSourceFile::_internal_mutable_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.host_.Mutable( GetArena());
}
inline std::string* DebuggedSourceFile::release_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.DebuggedSourceFile.host)
  return _impl_.host_.Release();
}
inline void DebuggedSourceFile::set_allocated_host(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebuggedSourceFile.host)
}

// string file_path = 2;
inline void DebuggedSourceFile::clear_file_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& DebuggedSourceFile::file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedSourceFile.file_path)
  return _internal_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebuggedSourceFile::set_file_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedSourceFile.file_path)
}
inline std::string* DebuggedSourceFile::mutable_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedSourceFile.file_path)
  return _s;
}
inline const std::string& DebuggedSourceFile::_internal_file_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_path_.Get();
}
inline void DebuggedSourceFile::_internal_set_file_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_path_.Set(value, GetArena());
}
inline std::string* DebuggedSourceFile::_internal_mutable_file_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_path_.Mutable( GetArena());
}
inline std::string* DebuggedSourceFile::release_file_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.DebuggedSourceFile.file_path)
  return _impl_.file_path_.Release();
}
inline void DebuggedSourceFile::set_allocated_file_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_path_.IsDefault()) {
          _impl_.file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebuggedSourceFile.file_path)
}

// int64 last_modified = 3;
inline void DebuggedSourceFile::clear_last_modified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_ = ::int64_t{0};
}
inline ::int64_t DebuggedSourceFile::last_modified() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedSourceFile.last_modified)
  return _internal_last_modified();
}
inline void DebuggedSourceFile::set_last_modified(::int64_t value) {
  _internal_set_last_modified(value);
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedSourceFile.last_modified)
}
inline ::int64_t DebuggedSourceFile::_internal_last_modified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_modified_;
}
inline void DebuggedSourceFile::_internal_set_last_modified(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_ = value;
}

// int64 bytes = 4;
inline void DebuggedSourceFile::clear_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_ = ::int64_t{0};
}
inline ::int64_t DebuggedSourceFile::bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedSourceFile.bytes)
  return _internal_bytes();
}
inline void DebuggedSourceFile::set_bytes(::int64_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedSourceFile.bytes)
}
inline ::int64_t DebuggedSourceFile::_internal_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bytes_;
}
inline void DebuggedSourceFile::_internal_set_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_ = value;
}

// repeated string lines = 5;
inline int DebuggedSourceFile::_internal_lines_size() const {
  return _internal_lines().size();
}
inline int DebuggedSourceFile::lines_size() const {
  return _internal_lines_size();
}
inline void DebuggedSourceFile::clear_lines() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lines_.Clear();
}
inline std::string* DebuggedSourceFile::add_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_lines()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.DebuggedSourceFile.lines)
  return _s;
}
inline const std::string& DebuggedSourceFile::lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedSourceFile.lines)
  return _internal_lines().Get(index);
}
inline std::string* DebuggedSourceFile::mutable_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedSourceFile.lines)
  return _internal_mutable_lines()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void DebuggedSourceFile::set_lines(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_lines()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedSourceFile.lines)
}
template <typename Arg_, typename... Args_>
inline void DebuggedSourceFile::add_lines(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_lines(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.DebuggedSourceFile.lines)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DebuggedSourceFile::lines() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.DebuggedSourceFile.lines)
  return _internal_lines();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DebuggedSourceFile::mutable_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebuggedSourceFile.lines)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_lines();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DebuggedSourceFile::_internal_lines() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lines_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DebuggedSourceFile::_internal_mutable_lines() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.lines_;
}

// -------------------------------------------------------------------

// DebuggedSourceFiles

// repeated .tensorflow.DebuggedSourceFile source_files = 1;
inline int DebuggedSourceFiles::_internal_source_files_size() const {
  return _internal_source_files().size();
}
inline int DebuggedSourceFiles::source_files_size() const {
  return _internal_source_files_size();
}
inline void DebuggedSourceFiles::clear_source_files() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_files_.Clear();
}
inline ::tensorflow::DebuggedSourceFile* DebuggedSourceFiles::mutable_source_files(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedSourceFiles.source_files)
  return _internal_mutable_source_files()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::DebuggedSourceFile>* DebuggedSourceFiles::mutable_source_files()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebuggedSourceFiles.source_files)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_source_files();
}
inline const ::tensorflow::DebuggedSourceFile& DebuggedSourceFiles::source_files(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedSourceFiles.source_files)
  return _internal_source_files().Get(index);
}
inline ::tensorflow::DebuggedSourceFile* DebuggedSourceFiles::add_source_files() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::DebuggedSourceFile* _add = _internal_mutable_source_files()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.DebuggedSourceFiles.source_files)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::DebuggedSourceFile>& DebuggedSourceFiles::source_files() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.DebuggedSourceFiles.source_files)
  return _internal_source_files();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::DebuggedSourceFile>&
DebuggedSourceFiles::_internal_source_files() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_files_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::DebuggedSourceFile>*
DebuggedSourceFiles::_internal_mutable_source_files() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.source_files_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_2epb_2eh
