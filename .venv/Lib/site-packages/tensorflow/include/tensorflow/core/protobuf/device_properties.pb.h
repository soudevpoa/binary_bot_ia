// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/device_properties.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto;
namespace tensorflow {
class DeviceProperties;
struct DevicePropertiesDefaultTypeInternal;
PROTOBUF_EXPORT extern DevicePropertiesDefaultTypeInternal _DeviceProperties_default_instance_;
class DeviceProperties_EnvironmentEntry_DoNotUse;
struct DeviceProperties_EnvironmentEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern DeviceProperties_EnvironmentEntry_DoNotUseDefaultTypeInternal _DeviceProperties_EnvironmentEntry_DoNotUse_default_instance_;
class NamedDevice;
struct NamedDeviceDefaultTypeInternal;
PROTOBUF_EXPORT extern NamedDeviceDefaultTypeInternal _NamedDevice_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class DeviceProperties_EnvironmentEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          DeviceProperties_EnvironmentEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      DeviceProperties_EnvironmentEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  DeviceProperties_EnvironmentEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceProperties_EnvironmentEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit DeviceProperties_EnvironmentEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const DeviceProperties_EnvironmentEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DeviceProperties_EnvironmentEntry_DoNotUse*>(
        &_DeviceProperties_EnvironmentEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DeviceProperties final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.DeviceProperties) */ {
 public:
  inline DeviceProperties() : DeviceProperties(nullptr) {}
  ~DeviceProperties() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceProperties(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceProperties(const DeviceProperties& from) : DeviceProperties(nullptr, from) {}
  inline DeviceProperties(DeviceProperties&& from) noexcept
      : DeviceProperties(nullptr, std::move(from)) {}
  inline DeviceProperties& operator=(const DeviceProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceProperties& operator=(DeviceProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceProperties* internal_default_instance() {
    return reinterpret_cast<const DeviceProperties*>(
        &_DeviceProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DeviceProperties& a, DeviceProperties& b) { a.Swap(&b); }
  inline void Swap(DeviceProperties* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceProperties* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceProperties* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DeviceProperties>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceProperties& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceProperties& from) { DeviceProperties::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceProperties* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.DeviceProperties"; }

 protected:
  explicit DeviceProperties(::google::protobuf::Arena* arena);
  DeviceProperties(::google::protobuf::Arena* arena, const DeviceProperties& from);
  DeviceProperties(::google::protobuf::Arena* arena, DeviceProperties&& from) noexcept
      : DeviceProperties(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnvironmentFieldNumber = 6,
    kTypeFieldNumber = 1,
    kVendorFieldNumber = 2,
    kModelFieldNumber = 3,
    kFrequencyFieldNumber = 4,
    kNumCoresFieldNumber = 5,
    kNumRegistersFieldNumber = 7,
    kL1CacheSizeFieldNumber = 8,
    kL2CacheSizeFieldNumber = 9,
    kL3CacheSizeFieldNumber = 10,
    kSharedMemorySizePerMultiprocessorFieldNumber = 11,
    kMemorySizeFieldNumber = 12,
    kBandwidthFieldNumber = 13,
  };
  // map<string, string> environment = 6;
  int environment_size() const;
  private:
  int _internal_environment_size() const;

  public:
  void clear_environment() ;
  const ::google::protobuf::Map<std::string, std::string>& environment() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_environment();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_environment() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_environment();

  public:
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string vendor = 2;
  void clear_vendor() ;
  const std::string& vendor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vendor(Arg_&& arg, Args_... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* value);

  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(
      const std::string& value);
  std::string* _internal_mutable_vendor();

  public:
  // string model = 3;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* value);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // int64 frequency = 4;
  void clear_frequency() ;
  ::int64_t frequency() const;
  void set_frequency(::int64_t value);

  private:
  ::int64_t _internal_frequency() const;
  void _internal_set_frequency(::int64_t value);

  public:
  // int64 num_cores = 5;
  void clear_num_cores() ;
  ::int64_t num_cores() const;
  void set_num_cores(::int64_t value);

  private:
  ::int64_t _internal_num_cores() const;
  void _internal_set_num_cores(::int64_t value);

  public:
  // int64 num_registers = 7;
  void clear_num_registers() ;
  ::int64_t num_registers() const;
  void set_num_registers(::int64_t value);

  private:
  ::int64_t _internal_num_registers() const;
  void _internal_set_num_registers(::int64_t value);

  public:
  // int64 l1_cache_size = 8;
  void clear_l1_cache_size() ;
  ::int64_t l1_cache_size() const;
  void set_l1_cache_size(::int64_t value);

  private:
  ::int64_t _internal_l1_cache_size() const;
  void _internal_set_l1_cache_size(::int64_t value);

  public:
  // int64 l2_cache_size = 9;
  void clear_l2_cache_size() ;
  ::int64_t l2_cache_size() const;
  void set_l2_cache_size(::int64_t value);

  private:
  ::int64_t _internal_l2_cache_size() const;
  void _internal_set_l2_cache_size(::int64_t value);

  public:
  // int64 l3_cache_size = 10;
  void clear_l3_cache_size() ;
  ::int64_t l3_cache_size() const;
  void set_l3_cache_size(::int64_t value);

  private:
  ::int64_t _internal_l3_cache_size() const;
  void _internal_set_l3_cache_size(::int64_t value);

  public:
  // int64 shared_memory_size_per_multiprocessor = 11;
  void clear_shared_memory_size_per_multiprocessor() ;
  ::int64_t shared_memory_size_per_multiprocessor() const;
  void set_shared_memory_size_per_multiprocessor(::int64_t value);

  private:
  ::int64_t _internal_shared_memory_size_per_multiprocessor() const;
  void _internal_set_shared_memory_size_per_multiprocessor(::int64_t value);

  public:
  // int64 memory_size = 12;
  void clear_memory_size() ;
  ::int64_t memory_size() const;
  void set_memory_size(::int64_t value);

  private:
  ::int64_t _internal_memory_size() const;
  void _internal_set_memory_size(::int64_t value);

  public:
  // int64 bandwidth = 13;
  void clear_bandwidth() ;
  ::int64_t bandwidth() const;
  void set_bandwidth(::int64_t value);

  private:
  ::int64_t _internal_bandwidth() const;
  void _internal_set_bandwidth(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.DeviceProperties)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      70, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceProperties& from_msg);
    ::google::protobuf::internal::MapField<DeviceProperties_EnvironmentEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        environment_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr vendor_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    ::int64_t frequency_;
    ::int64_t num_cores_;
    ::int64_t num_registers_;
    ::int64_t l1_cache_size_;
    ::int64_t l2_cache_size_;
    ::int64_t l3_cache_size_;
    ::int64_t shared_memory_size_per_multiprocessor_;
    ::int64_t memory_size_;
    ::int64_t bandwidth_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT NamedDevice final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.NamedDevice) */ {
 public:
  inline NamedDevice() : NamedDevice(nullptr) {}
  ~NamedDevice() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NamedDevice(
      ::google::protobuf::internal::ConstantInitialized);

  inline NamedDevice(const NamedDevice& from) : NamedDevice(nullptr, from) {}
  inline NamedDevice(NamedDevice&& from) noexcept
      : NamedDevice(nullptr, std::move(from)) {}
  inline NamedDevice& operator=(const NamedDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedDevice& operator=(NamedDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedDevice* internal_default_instance() {
    return reinterpret_cast<const NamedDevice*>(
        &_NamedDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NamedDevice& a, NamedDevice& b) { a.Swap(&b); }
  inline void Swap(NamedDevice* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedDevice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamedDevice* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<NamedDevice>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NamedDevice& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NamedDevice& from) { NamedDevice::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NamedDevice* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.NamedDevice"; }

 protected:
  explicit NamedDevice(::google::protobuf::Arena* arena);
  NamedDevice(::google::protobuf::Arena* arena, const NamedDevice& from);
  NamedDevice(::google::protobuf::Arena* arena, NamedDevice&& from) noexcept
      : NamedDevice(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPropertiesFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .tensorflow.DeviceProperties properties = 2;
  bool has_properties() const;
  void clear_properties() ;
  const ::tensorflow::DeviceProperties& properties() const;
  PROTOBUF_NODISCARD ::tensorflow::DeviceProperties* release_properties();
  ::tensorflow::DeviceProperties* mutable_properties();
  void set_allocated_properties(::tensorflow::DeviceProperties* value);
  void unsafe_arena_set_allocated_properties(::tensorflow::DeviceProperties* value);
  ::tensorflow::DeviceProperties* unsafe_arena_release_properties();

  private:
  const ::tensorflow::DeviceProperties& _internal_properties() const;
  ::tensorflow::DeviceProperties* _internal_mutable_properties();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.NamedDevice)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      35, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NamedDevice& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::tensorflow::DeviceProperties* properties_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DeviceProperties

// string type = 1;
inline void DeviceProperties::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& DeviceProperties::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProperties::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.type)
}
inline std::string* DeviceProperties::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceProperties.type)
  return _s;
}
inline const std::string& DeviceProperties::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void DeviceProperties::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* DeviceProperties::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* DeviceProperties::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.DeviceProperties.type)
  return _impl_.type_.Release();
}
inline void DeviceProperties::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceProperties.type)
}

// string vendor = 2;
inline void DeviceProperties::clear_vendor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_.ClearToEmpty();
}
inline const std::string& DeviceProperties::vendor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.vendor)
  return _internal_vendor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProperties::set_vendor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.vendor)
}
inline std::string* DeviceProperties::mutable_vendor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceProperties.vendor)
  return _s;
}
inline const std::string& DeviceProperties::_internal_vendor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vendor_.Get();
}
inline void DeviceProperties::_internal_set_vendor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_.Set(value, GetArena());
}
inline std::string* DeviceProperties::_internal_mutable_vendor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vendor_.Mutable( GetArena());
}
inline std::string* DeviceProperties::release_vendor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.DeviceProperties.vendor)
  return _impl_.vendor_.Release();
}
inline void DeviceProperties::set_allocated_vendor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vendor_.IsDefault()) {
          _impl_.vendor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceProperties.vendor)
}

// string model = 3;
inline void DeviceProperties::clear_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.ClearToEmpty();
}
inline const std::string& DeviceProperties::model() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProperties::set_model(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.model)
}
inline std::string* DeviceProperties::mutable_model() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceProperties.model)
  return _s;
}
inline const std::string& DeviceProperties::_internal_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.model_.Get();
}
inline void DeviceProperties::_internal_set_model(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.Set(value, GetArena());
}
inline std::string* DeviceProperties::_internal_mutable_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.model_.Mutable( GetArena());
}
inline std::string* DeviceProperties::release_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.DeviceProperties.model)
  return _impl_.model_.Release();
}
inline void DeviceProperties::set_allocated_model(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceProperties.model)
}

// int64 frequency = 4;
inline void DeviceProperties::clear_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frequency_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::frequency() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.frequency)
  return _internal_frequency();
}
inline void DeviceProperties::set_frequency(::int64_t value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.frequency)
}
inline ::int64_t DeviceProperties::_internal_frequency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frequency_;
}
inline void DeviceProperties::_internal_set_frequency(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frequency_ = value;
}

// int64 num_cores = 5;
inline void DeviceProperties::clear_num_cores() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_cores_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::num_cores() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.num_cores)
  return _internal_num_cores();
}
inline void DeviceProperties::set_num_cores(::int64_t value) {
  _internal_set_num_cores(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.num_cores)
}
inline ::int64_t DeviceProperties::_internal_num_cores() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_cores_;
}
inline void DeviceProperties::_internal_set_num_cores(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_cores_ = value;
}

// map<string, string> environment = 6;
inline int DeviceProperties::_internal_environment_size() const {
  return _internal_environment().size();
}
inline int DeviceProperties::environment_size() const {
  return _internal_environment_size();
}
inline void DeviceProperties::clear_environment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.environment_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& DeviceProperties::_internal_environment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.environment_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& DeviceProperties::environment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.DeviceProperties.environment)
  return _internal_environment();
}
inline ::google::protobuf::Map<std::string, std::string>* DeviceProperties::_internal_mutable_environment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.environment_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* DeviceProperties::mutable_environment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.DeviceProperties.environment)
  return _internal_mutable_environment();
}

// int64 num_registers = 7;
inline void DeviceProperties::clear_num_registers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_registers_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::num_registers() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.num_registers)
  return _internal_num_registers();
}
inline void DeviceProperties::set_num_registers(::int64_t value) {
  _internal_set_num_registers(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.num_registers)
}
inline ::int64_t DeviceProperties::_internal_num_registers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_registers_;
}
inline void DeviceProperties::_internal_set_num_registers(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_registers_ = value;
}

// int64 l1_cache_size = 8;
inline void DeviceProperties::clear_l1_cache_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l1_cache_size_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::l1_cache_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.l1_cache_size)
  return _internal_l1_cache_size();
}
inline void DeviceProperties::set_l1_cache_size(::int64_t value) {
  _internal_set_l1_cache_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.l1_cache_size)
}
inline ::int64_t DeviceProperties::_internal_l1_cache_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.l1_cache_size_;
}
inline void DeviceProperties::_internal_set_l1_cache_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l1_cache_size_ = value;
}

// int64 l2_cache_size = 9;
inline void DeviceProperties::clear_l2_cache_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l2_cache_size_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::l2_cache_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.l2_cache_size)
  return _internal_l2_cache_size();
}
inline void DeviceProperties::set_l2_cache_size(::int64_t value) {
  _internal_set_l2_cache_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.l2_cache_size)
}
inline ::int64_t DeviceProperties::_internal_l2_cache_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.l2_cache_size_;
}
inline void DeviceProperties::_internal_set_l2_cache_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l2_cache_size_ = value;
}

// int64 l3_cache_size = 10;
inline void DeviceProperties::clear_l3_cache_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l3_cache_size_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::l3_cache_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.l3_cache_size)
  return _internal_l3_cache_size();
}
inline void DeviceProperties::set_l3_cache_size(::int64_t value) {
  _internal_set_l3_cache_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.l3_cache_size)
}
inline ::int64_t DeviceProperties::_internal_l3_cache_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.l3_cache_size_;
}
inline void DeviceProperties::_internal_set_l3_cache_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l3_cache_size_ = value;
}

// int64 shared_memory_size_per_multiprocessor = 11;
inline void DeviceProperties::clear_shared_memory_size_per_multiprocessor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_memory_size_per_multiprocessor_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::shared_memory_size_per_multiprocessor() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.shared_memory_size_per_multiprocessor)
  return _internal_shared_memory_size_per_multiprocessor();
}
inline void DeviceProperties::set_shared_memory_size_per_multiprocessor(::int64_t value) {
  _internal_set_shared_memory_size_per_multiprocessor(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.shared_memory_size_per_multiprocessor)
}
inline ::int64_t DeviceProperties::_internal_shared_memory_size_per_multiprocessor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shared_memory_size_per_multiprocessor_;
}
inline void DeviceProperties::_internal_set_shared_memory_size_per_multiprocessor(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_memory_size_per_multiprocessor_ = value;
}

// int64 memory_size = 12;
inline void DeviceProperties::clear_memory_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_size_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.memory_size)
  return _internal_memory_size();
}
inline void DeviceProperties::set_memory_size(::int64_t value) {
  _internal_set_memory_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.memory_size)
}
inline ::int64_t DeviceProperties::_internal_memory_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_size_;
}
inline void DeviceProperties::_internal_set_memory_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_size_ = value;
}

// int64 bandwidth = 13;
inline void DeviceProperties::clear_bandwidth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bandwidth_ = ::int64_t{0};
}
inline ::int64_t DeviceProperties::bandwidth() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.bandwidth)
  return _internal_bandwidth();
}
inline void DeviceProperties::set_bandwidth(::int64_t value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.bandwidth)
}
inline ::int64_t DeviceProperties::_internal_bandwidth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bandwidth_;
}
inline void DeviceProperties::_internal_set_bandwidth(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bandwidth_ = value;
}

// -------------------------------------------------------------------

// NamedDevice

// string name = 1;
inline void NamedDevice::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NamedDevice::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NamedDevice.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NamedDevice::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.NamedDevice.name)
}
inline std::string* NamedDevice::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.NamedDevice.name)
  return _s;
}
inline const std::string& NamedDevice::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NamedDevice::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NamedDevice::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NamedDevice::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NamedDevice.name)
  return _impl_.name_.Release();
}
inline void NamedDevice::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NamedDevice.name)
}

// .tensorflow.DeviceProperties properties = 2;
inline bool NamedDevice::has_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.properties_ != nullptr);
  return value;
}
inline void NamedDevice::clear_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.properties_ != nullptr) _impl_.properties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::DeviceProperties& NamedDevice::_internal_properties() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::DeviceProperties* p = _impl_.properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::DeviceProperties&>(::tensorflow::_DeviceProperties_default_instance_);
}
inline const ::tensorflow::DeviceProperties& NamedDevice::properties() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NamedDevice.properties)
  return _internal_properties();
}
inline void NamedDevice::unsafe_arena_set_allocated_properties(::tensorflow::DeviceProperties* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.properties_);
  }
  _impl_.properties_ = reinterpret_cast<::tensorflow::DeviceProperties*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NamedDevice.properties)
}
inline ::tensorflow::DeviceProperties* NamedDevice::release_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::DeviceProperties* released = _impl_.properties_;
  _impl_.properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::DeviceProperties* NamedDevice::unsafe_arena_release_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NamedDevice.properties)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::DeviceProperties* temp = _impl_.properties_;
  _impl_.properties_ = nullptr;
  return temp;
}
inline ::tensorflow::DeviceProperties* NamedDevice::_internal_mutable_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.properties_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::DeviceProperties>(GetArena());
    _impl_.properties_ = reinterpret_cast<::tensorflow::DeviceProperties*>(p);
  }
  return _impl_.properties_;
}
inline ::tensorflow::DeviceProperties* NamedDevice::mutable_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::DeviceProperties* _msg = _internal_mutable_properties();
  // @@protoc_insertion_point(field_mutable:tensorflow.NamedDevice.properties)
  return _msg;
}
inline void NamedDevice::set_allocated_properties(::tensorflow::DeviceProperties* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.properties_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.properties_ = reinterpret_cast<::tensorflow::DeviceProperties*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NamedDevice.properties)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_2epb_2eh
