// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/rewriter_config.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/framework/attr_value.pb.h"
#include "tensorflow/core/protobuf/verifier_config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
namespace tensorflow {
class AutoParallelOptions;
struct AutoParallelOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern AutoParallelOptionsDefaultTypeInternal _AutoParallelOptions_default_instance_;
class RewriterConfig;
struct RewriterConfigDefaultTypeInternal;
PROTOBUF_EXPORT extern RewriterConfigDefaultTypeInternal _RewriterConfig_default_instance_;
class RewriterConfig_CustomGraphOptimizer;
struct RewriterConfig_CustomGraphOptimizerDefaultTypeInternal;
PROTOBUF_EXPORT extern RewriterConfig_CustomGraphOptimizerDefaultTypeInternal _RewriterConfig_CustomGraphOptimizer_default_instance_;
class RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse;
struct RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUseDefaultTypeInternal _RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_default_instance_;
class ScopedAllocatorOptions;
struct ScopedAllocatorOptionsDefaultTypeInternal;
PROTOBUF_EXPORT extern ScopedAllocatorOptionsDefaultTypeInternal _ScopedAllocatorOptions_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
enum RewriterConfig_Toggle : int {
  RewriterConfig_Toggle_DEFAULT = 0,
  RewriterConfig_Toggle_ON = 1,
  RewriterConfig_Toggle_OFF = 2,
  RewriterConfig_Toggle_AGGRESSIVE = 3,
  RewriterConfig_Toggle_EXPERIMENTAL_MLIR = 4,
  RewriterConfig_Toggle_EXPERIMENTAL_BOTH = 5,
  RewriterConfig_Toggle_RewriterConfig_Toggle_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RewriterConfig_Toggle_RewriterConfig_Toggle_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool RewriterConfig_Toggle_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t RewriterConfig_Toggle_internal_data_[];
constexpr RewriterConfig_Toggle RewriterConfig_Toggle_Toggle_MIN = static_cast<RewriterConfig_Toggle>(0);
constexpr RewriterConfig_Toggle RewriterConfig_Toggle_Toggle_MAX = static_cast<RewriterConfig_Toggle>(5);
constexpr int RewriterConfig_Toggle_Toggle_ARRAYSIZE = 5 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
RewriterConfig_Toggle_descriptor();
template <typename T>
const std::string& RewriterConfig_Toggle_Name(T value) {
  static_assert(std::is_same<T, RewriterConfig_Toggle>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Toggle_Name().");
  return RewriterConfig_Toggle_Name(static_cast<RewriterConfig_Toggle>(value));
}
template <>
inline const std::string& RewriterConfig_Toggle_Name(RewriterConfig_Toggle value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RewriterConfig_Toggle_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool RewriterConfig_Toggle_Parse(absl::string_view name, RewriterConfig_Toggle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RewriterConfig_Toggle>(
      RewriterConfig_Toggle_descriptor(), name, value);
}
enum RewriterConfig_CpuLayout : int {
  RewriterConfig_CpuLayout_NO_CONVERSION_ON_CPU = 0,
  RewriterConfig_CpuLayout_NCHW_TO_NHWC = 1,
  RewriterConfig_CpuLayout_NHWC_TO_NCHW = 2,
  RewriterConfig_CpuLayout_RewriterConfig_CpuLayout_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RewriterConfig_CpuLayout_RewriterConfig_CpuLayout_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool RewriterConfig_CpuLayout_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t RewriterConfig_CpuLayout_internal_data_[];
constexpr RewriterConfig_CpuLayout RewriterConfig_CpuLayout_CpuLayout_MIN = static_cast<RewriterConfig_CpuLayout>(0);
constexpr RewriterConfig_CpuLayout RewriterConfig_CpuLayout_CpuLayout_MAX = static_cast<RewriterConfig_CpuLayout>(2);
constexpr int RewriterConfig_CpuLayout_CpuLayout_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
RewriterConfig_CpuLayout_descriptor();
template <typename T>
const std::string& RewriterConfig_CpuLayout_Name(T value) {
  static_assert(std::is_same<T, RewriterConfig_CpuLayout>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CpuLayout_Name().");
  return RewriterConfig_CpuLayout_Name(static_cast<RewriterConfig_CpuLayout>(value));
}
template <>
inline const std::string& RewriterConfig_CpuLayout_Name(RewriterConfig_CpuLayout value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RewriterConfig_CpuLayout_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RewriterConfig_CpuLayout_Parse(absl::string_view name, RewriterConfig_CpuLayout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RewriterConfig_CpuLayout>(
      RewriterConfig_CpuLayout_descriptor(), name, value);
}
enum RewriterConfig_NumIterationsType : int {
  RewriterConfig_NumIterationsType_DEFAULT_NUM_ITERS = 0,
  RewriterConfig_NumIterationsType_ONE = 1,
  RewriterConfig_NumIterationsType_TWO = 2,
  RewriterConfig_NumIterationsType_RewriterConfig_NumIterationsType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RewriterConfig_NumIterationsType_RewriterConfig_NumIterationsType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool RewriterConfig_NumIterationsType_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t RewriterConfig_NumIterationsType_internal_data_[];
constexpr RewriterConfig_NumIterationsType RewriterConfig_NumIterationsType_NumIterationsType_MIN = static_cast<RewriterConfig_NumIterationsType>(0);
constexpr RewriterConfig_NumIterationsType RewriterConfig_NumIterationsType_NumIterationsType_MAX = static_cast<RewriterConfig_NumIterationsType>(2);
constexpr int RewriterConfig_NumIterationsType_NumIterationsType_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
RewriterConfig_NumIterationsType_descriptor();
template <typename T>
const std::string& RewriterConfig_NumIterationsType_Name(T value) {
  static_assert(std::is_same<T, RewriterConfig_NumIterationsType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NumIterationsType_Name().");
  return RewriterConfig_NumIterationsType_Name(static_cast<RewriterConfig_NumIterationsType>(value));
}
template <>
inline const std::string& RewriterConfig_NumIterationsType_Name(RewriterConfig_NumIterationsType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RewriterConfig_NumIterationsType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RewriterConfig_NumIterationsType_Parse(absl::string_view name, RewriterConfig_NumIterationsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RewriterConfig_NumIterationsType>(
      RewriterConfig_NumIterationsType_descriptor(), name, value);
}
enum RewriterConfig_MemOptType : int {
  RewriterConfig_MemOptType_DEFAULT_MEM_OPT = 0,
  RewriterConfig_MemOptType_NO_MEM_OPT = 1,
  RewriterConfig_MemOptType_MANUAL = 2,
  RewriterConfig_MemOptType_SWAPPING_HEURISTICS = 4,
  RewriterConfig_MemOptType_RECOMPUTATION_HEURISTICS = 5,
  RewriterConfig_MemOptType_SCHEDULING_HEURISTICS = 6,
  RewriterConfig_MemOptType_HEURISTICS = 3,
  RewriterConfig_MemOptType_RewriterConfig_MemOptType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RewriterConfig_MemOptType_RewriterConfig_MemOptType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool RewriterConfig_MemOptType_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t RewriterConfig_MemOptType_internal_data_[];
constexpr RewriterConfig_MemOptType RewriterConfig_MemOptType_MemOptType_MIN = static_cast<RewriterConfig_MemOptType>(0);
constexpr RewriterConfig_MemOptType RewriterConfig_MemOptType_MemOptType_MAX = static_cast<RewriterConfig_MemOptType>(6);
constexpr int RewriterConfig_MemOptType_MemOptType_ARRAYSIZE = 6 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
RewriterConfig_MemOptType_descriptor();
template <typename T>
const std::string& RewriterConfig_MemOptType_Name(T value) {
  static_assert(std::is_same<T, RewriterConfig_MemOptType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MemOptType_Name().");
  return RewriterConfig_MemOptType_Name(static_cast<RewriterConfig_MemOptType>(value));
}
template <>
inline const std::string& RewriterConfig_MemOptType_Name(RewriterConfig_MemOptType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RewriterConfig_MemOptType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool RewriterConfig_MemOptType_Parse(absl::string_view name, RewriterConfig_MemOptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RewriterConfig_MemOptType>(
      RewriterConfig_MemOptType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT ScopedAllocatorOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.ScopedAllocatorOptions) */ {
 public:
  inline ScopedAllocatorOptions() : ScopedAllocatorOptions(nullptr) {}
  ~ScopedAllocatorOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScopedAllocatorOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScopedAllocatorOptions(const ScopedAllocatorOptions& from) : ScopedAllocatorOptions(nullptr, from) {}
  inline ScopedAllocatorOptions(ScopedAllocatorOptions&& from) noexcept
      : ScopedAllocatorOptions(nullptr, std::move(from)) {}
  inline ScopedAllocatorOptions& operator=(const ScopedAllocatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopedAllocatorOptions& operator=(ScopedAllocatorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScopedAllocatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScopedAllocatorOptions* internal_default_instance() {
    return reinterpret_cast<const ScopedAllocatorOptions*>(
        &_ScopedAllocatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ScopedAllocatorOptions& a, ScopedAllocatorOptions& b) { a.Swap(&b); }
  inline void Swap(ScopedAllocatorOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopedAllocatorOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScopedAllocatorOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ScopedAllocatorOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScopedAllocatorOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScopedAllocatorOptions& from) { ScopedAllocatorOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScopedAllocatorOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.ScopedAllocatorOptions"; }

 protected:
  explicit ScopedAllocatorOptions(::google::protobuf::Arena* arena);
  ScopedAllocatorOptions(::google::protobuf::Arena* arena, const ScopedAllocatorOptions& from);
  ScopedAllocatorOptions(::google::protobuf::Arena* arena, ScopedAllocatorOptions&& from) noexcept
      : ScopedAllocatorOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnableOpFieldNumber = 1,
  };
  // repeated string enable_op = 1;
  int enable_op_size() const;
  private:
  int _internal_enable_op_size() const;

  public:
  void clear_enable_op() ;
  const std::string& enable_op(int index) const;
  std::string* mutable_enable_op(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_enable_op(int index, Arg_&& value, Args_... args);
  std::string* add_enable_op();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_enable_op(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& enable_op() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_enable_op();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_enable_op() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_enable_op();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.ScopedAllocatorOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ScopedAllocatorOptions& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> enable_op_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT AutoParallelOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.AutoParallelOptions) */ {
 public:
  inline AutoParallelOptions() : AutoParallelOptions(nullptr) {}
  ~AutoParallelOptions() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AutoParallelOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline AutoParallelOptions(const AutoParallelOptions& from) : AutoParallelOptions(nullptr, from) {}
  inline AutoParallelOptions(AutoParallelOptions&& from) noexcept
      : AutoParallelOptions(nullptr, std::move(from)) {}
  inline AutoParallelOptions& operator=(const AutoParallelOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoParallelOptions& operator=(AutoParallelOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoParallelOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoParallelOptions* internal_default_instance() {
    return reinterpret_cast<const AutoParallelOptions*>(
        &_AutoParallelOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AutoParallelOptions& a, AutoParallelOptions& b) { a.Swap(&b); }
  inline void Swap(AutoParallelOptions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoParallelOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoParallelOptions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<AutoParallelOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AutoParallelOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AutoParallelOptions& from) { AutoParallelOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AutoParallelOptions* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.AutoParallelOptions"; }

 protected:
  explicit AutoParallelOptions(::google::protobuf::Arena* arena);
  AutoParallelOptions(::google::protobuf::Arena* arena, const AutoParallelOptions& from);
  AutoParallelOptions(::google::protobuf::Arena* arena, AutoParallelOptions&& from) noexcept
      : AutoParallelOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnableFieldNumber = 1,
    kNumReplicasFieldNumber = 2,
  };
  // bool enable = 1;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // int32 num_replicas = 2;
  void clear_num_replicas() ;
  ::int32_t num_replicas() const;
  void set_num_replicas(::int32_t value);

  private:
  ::int32_t _internal_num_replicas() const;
  void _internal_set_num_replicas(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.AutoParallelOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AutoParallelOptions& from_msg);
    bool enable_;
    ::int32_t num_replicas_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, std::string, ::tensorflow::AttrValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, std::string, ::tensorflow::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse*>(
        &_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      76, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RewriterConfig_CustomGraphOptimizer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.RewriterConfig.CustomGraphOptimizer) */ {
 public:
  inline RewriterConfig_CustomGraphOptimizer() : RewriterConfig_CustomGraphOptimizer(nullptr) {}
  ~RewriterConfig_CustomGraphOptimizer() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RewriterConfig_CustomGraphOptimizer(
      ::google::protobuf::internal::ConstantInitialized);

  inline RewriterConfig_CustomGraphOptimizer(const RewriterConfig_CustomGraphOptimizer& from) : RewriterConfig_CustomGraphOptimizer(nullptr, from) {}
  inline RewriterConfig_CustomGraphOptimizer(RewriterConfig_CustomGraphOptimizer&& from) noexcept
      : RewriterConfig_CustomGraphOptimizer(nullptr, std::move(from)) {}
  inline RewriterConfig_CustomGraphOptimizer& operator=(const RewriterConfig_CustomGraphOptimizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriterConfig_CustomGraphOptimizer& operator=(RewriterConfig_CustomGraphOptimizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriterConfig_CustomGraphOptimizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriterConfig_CustomGraphOptimizer* internal_default_instance() {
    return reinterpret_cast<const RewriterConfig_CustomGraphOptimizer*>(
        &_RewriterConfig_CustomGraphOptimizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RewriterConfig_CustomGraphOptimizer& a, RewriterConfig_CustomGraphOptimizer& b) { a.Swap(&b); }
  inline void Swap(RewriterConfig_CustomGraphOptimizer* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriterConfig_CustomGraphOptimizer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewriterConfig_CustomGraphOptimizer* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RewriterConfig_CustomGraphOptimizer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RewriterConfig_CustomGraphOptimizer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RewriterConfig_CustomGraphOptimizer& from) { RewriterConfig_CustomGraphOptimizer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RewriterConfig_CustomGraphOptimizer* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.RewriterConfig.CustomGraphOptimizer"; }

 protected:
  explicit RewriterConfig_CustomGraphOptimizer(::google::protobuf::Arena* arena);
  RewriterConfig_CustomGraphOptimizer(::google::protobuf::Arena* arena, const RewriterConfig_CustomGraphOptimizer& from);
  RewriterConfig_CustomGraphOptimizer(::google::protobuf::Arena* arena, RewriterConfig_CustomGraphOptimizer&& from) noexcept
      : RewriterConfig_CustomGraphOptimizer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParameterMapFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  int parameter_map_size() const;
  private:
  int _internal_parameter_map_size() const;

  public:
  void clear_parameter_map() ;
  const ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>& parameter_map() const;
  ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>* mutable_parameter_map();

  private:
  const ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>& _internal_parameter_map() const;
  ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>* _internal_mutable_parameter_map();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.RewriterConfig.CustomGraphOptimizer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      72, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RewriterConfig_CustomGraphOptimizer& from_msg);
    ::google::protobuf::internal::MapField<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, std::string, ::tensorflow::AttrValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        parameter_map_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RewriterConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.RewriterConfig) */ {
 public:
  inline RewriterConfig() : RewriterConfig(nullptr) {}
  ~RewriterConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RewriterConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline RewriterConfig(const RewriterConfig& from) : RewriterConfig(nullptr, from) {}
  inline RewriterConfig(RewriterConfig&& from) noexcept
      : RewriterConfig(nullptr, std::move(from)) {}
  inline RewriterConfig& operator=(const RewriterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriterConfig& operator=(RewriterConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriterConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriterConfig* internal_default_instance() {
    return reinterpret_cast<const RewriterConfig*>(
        &_RewriterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RewriterConfig& a, RewriterConfig& b) { a.Swap(&b); }
  inline void Swap(RewriterConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriterConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewriterConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RewriterConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RewriterConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RewriterConfig& from) { RewriterConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RewriterConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.RewriterConfig"; }

 protected:
  explicit RewriterConfig(::google::protobuf::Arena* arena);
  RewriterConfig(::google::protobuf::Arena* arena, const RewriterConfig& from);
  RewriterConfig(::google::protobuf::Arena* arena, RewriterConfig&& from) noexcept
      : RewriterConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using CustomGraphOptimizer = RewriterConfig_CustomGraphOptimizer;
  using Toggle = RewriterConfig_Toggle;
  static constexpr Toggle DEFAULT = RewriterConfig_Toggle_DEFAULT;
  static constexpr Toggle ON = RewriterConfig_Toggle_ON;
  static constexpr Toggle OFF = RewriterConfig_Toggle_OFF;
  static constexpr Toggle AGGRESSIVE = RewriterConfig_Toggle_AGGRESSIVE;
  static constexpr Toggle EXPERIMENTAL_MLIR = RewriterConfig_Toggle_EXPERIMENTAL_MLIR;
  static constexpr Toggle EXPERIMENTAL_BOTH = RewriterConfig_Toggle_EXPERIMENTAL_BOTH;
  static inline bool Toggle_IsValid(int value) {
    return RewriterConfig_Toggle_IsValid(value);
  }
  static constexpr Toggle Toggle_MIN = RewriterConfig_Toggle_Toggle_MIN;
  static constexpr Toggle Toggle_MAX = RewriterConfig_Toggle_Toggle_MAX;
  static constexpr int Toggle_ARRAYSIZE = RewriterConfig_Toggle_Toggle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Toggle_descriptor() {
    return RewriterConfig_Toggle_descriptor();
  }
  template <typename T>
  static inline const std::string& Toggle_Name(T value) {
    return RewriterConfig_Toggle_Name(value);
  }
  static inline bool Toggle_Parse(absl::string_view name, Toggle* value) {
    return RewriterConfig_Toggle_Parse(name, value);
  }
  using CpuLayout = RewriterConfig_CpuLayout;
  static constexpr CpuLayout NO_CONVERSION_ON_CPU = RewriterConfig_CpuLayout_NO_CONVERSION_ON_CPU;
  static constexpr CpuLayout NCHW_TO_NHWC = RewriterConfig_CpuLayout_NCHW_TO_NHWC;
  static constexpr CpuLayout NHWC_TO_NCHW = RewriterConfig_CpuLayout_NHWC_TO_NCHW;
  static inline bool CpuLayout_IsValid(int value) {
    return RewriterConfig_CpuLayout_IsValid(value);
  }
  static constexpr CpuLayout CpuLayout_MIN = RewriterConfig_CpuLayout_CpuLayout_MIN;
  static constexpr CpuLayout CpuLayout_MAX = RewriterConfig_CpuLayout_CpuLayout_MAX;
  static constexpr int CpuLayout_ARRAYSIZE = RewriterConfig_CpuLayout_CpuLayout_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* CpuLayout_descriptor() {
    return RewriterConfig_CpuLayout_descriptor();
  }
  template <typename T>
  static inline const std::string& CpuLayout_Name(T value) {
    return RewriterConfig_CpuLayout_Name(value);
  }
  static inline bool CpuLayout_Parse(absl::string_view name, CpuLayout* value) {
    return RewriterConfig_CpuLayout_Parse(name, value);
  }
  using NumIterationsType = RewriterConfig_NumIterationsType;
  static constexpr NumIterationsType DEFAULT_NUM_ITERS = RewriterConfig_NumIterationsType_DEFAULT_NUM_ITERS;
  static constexpr NumIterationsType ONE = RewriterConfig_NumIterationsType_ONE;
  static constexpr NumIterationsType TWO = RewriterConfig_NumIterationsType_TWO;
  static inline bool NumIterationsType_IsValid(int value) {
    return RewriterConfig_NumIterationsType_IsValid(value);
  }
  static constexpr NumIterationsType NumIterationsType_MIN = RewriterConfig_NumIterationsType_NumIterationsType_MIN;
  static constexpr NumIterationsType NumIterationsType_MAX = RewriterConfig_NumIterationsType_NumIterationsType_MAX;
  static constexpr int NumIterationsType_ARRAYSIZE = RewriterConfig_NumIterationsType_NumIterationsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NumIterationsType_descriptor() {
    return RewriterConfig_NumIterationsType_descriptor();
  }
  template <typename T>
  static inline const std::string& NumIterationsType_Name(T value) {
    return RewriterConfig_NumIterationsType_Name(value);
  }
  static inline bool NumIterationsType_Parse(absl::string_view name, NumIterationsType* value) {
    return RewriterConfig_NumIterationsType_Parse(name, value);
  }
  using MemOptType = RewriterConfig_MemOptType;
  static constexpr MemOptType DEFAULT_MEM_OPT = RewriterConfig_MemOptType_DEFAULT_MEM_OPT;
  static constexpr MemOptType NO_MEM_OPT = RewriterConfig_MemOptType_NO_MEM_OPT;
  static constexpr MemOptType MANUAL = RewriterConfig_MemOptType_MANUAL;
  static constexpr MemOptType SWAPPING_HEURISTICS = RewriterConfig_MemOptType_SWAPPING_HEURISTICS;
  static constexpr MemOptType RECOMPUTATION_HEURISTICS = RewriterConfig_MemOptType_RECOMPUTATION_HEURISTICS;
  static constexpr MemOptType SCHEDULING_HEURISTICS = RewriterConfig_MemOptType_SCHEDULING_HEURISTICS;
  static constexpr MemOptType HEURISTICS = RewriterConfig_MemOptType_HEURISTICS;
  static inline bool MemOptType_IsValid(int value) {
    return RewriterConfig_MemOptType_IsValid(value);
  }
  static constexpr MemOptType MemOptType_MIN = RewriterConfig_MemOptType_MemOptType_MIN;
  static constexpr MemOptType MemOptType_MAX = RewriterConfig_MemOptType_MemOptType_MAX;
  static constexpr int MemOptType_ARRAYSIZE = RewriterConfig_MemOptType_MemOptType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MemOptType_descriptor() {
    return RewriterConfig_MemOptType_descriptor();
  }
  template <typename T>
  static inline const std::string& MemOptType_Name(T value) {
    return RewriterConfig_MemOptType_Name(value);
  }
  static inline bool MemOptType_Parse(absl::string_view name, MemOptType* value) {
    return RewriterConfig_MemOptType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kOptimizersFieldNumber = 100,
    kCustomOptimizersFieldNumber = 200,
    kMemoryOptimizerTargetNodeNameScopeFieldNumber = 6,
    kAutoParallelFieldNumber = 5,
    kScopedAllocatorOptsFieldNumber = 16,
    kInterOptimizerVerifierConfigFieldNumber = 300,
    kPostOptimizationVerifierConfigFieldNumber = 301,
    kLayoutOptimizerFieldNumber = 1,
    kConstantFoldingFieldNumber = 3,
    kMemoryOptimizationFieldNumber = 4,
    kArithmeticOptimizationFieldNumber = 7,
    kDependencyOptimizationFieldNumber = 8,
    kLoopOptimizationFieldNumber = 9,
    kFunctionOptimizationFieldNumber = 10,
    kDebugStripperFieldNumber = 11,
    kMetaOptimizerIterationsFieldNumber = 12,
    kShapeOptimizationFieldNumber = 13,
    kRemappingFieldNumber = 14,
    kScopedAllocatorOptimizationFieldNumber = 15,
    kMinGraphNodesFieldNumber = 17,
    kPinToHostOptimizationFieldNumber = 18,
    kMetaOptimizerTimeoutMsFieldNumber = 20,
    kDisableModelPruningFieldNumber = 2,
    kDisableMetaOptimizerFieldNumber = 19,
    kDisableTfgOptimizerFieldNumber = 32,
    kExperimentalDisableCompressedTensorOptimizationFieldNumber = 26,
    kImplementationSelectorFieldNumber = 22,
    kAutoMixedPrecisionFieldNumber = 23,
    kCommonSubgraphEliminationFieldNumber = 24,
    kExperimentalDisableFoldingQuantizationEmulationFieldNumber = 27,
    kFailOnOptimizerErrorsFieldNumber = 21,
    kAutoMixedPrecisionMklFieldNumber = 25,
    kUsePluginOptimizersFieldNumber = 28,
    kAutoMixedPrecisionCpuFieldNumber = 29,
    kExperimentalConditionalCodeMotionFieldNumber = 30,
    kAutoMixedPrecisionOnednnBfloat16FieldNumber = 31,
    kCpuLayoutConversionFieldNumber = 50,
  };
  // repeated string optimizers = 100;
  int optimizers_size() const;
  private:
  int _internal_optimizers_size() const;

  public:
  void clear_optimizers() ;
  const std::string& optimizers(int index) const;
  std::string* mutable_optimizers(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_optimizers(int index, Arg_&& value, Args_... args);
  std::string* add_optimizers();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_optimizers(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& optimizers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_optimizers();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_optimizers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_optimizers();

  public:
  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  int custom_optimizers_size() const;
  private:
  int _internal_custom_optimizers_size() const;

  public:
  void clear_custom_optimizers() ;
  ::tensorflow::RewriterConfig_CustomGraphOptimizer* mutable_custom_optimizers(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::RewriterConfig_CustomGraphOptimizer>* mutable_custom_optimizers();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::RewriterConfig_CustomGraphOptimizer>& _internal_custom_optimizers() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::RewriterConfig_CustomGraphOptimizer>* _internal_mutable_custom_optimizers();
  public:
  const ::tensorflow::RewriterConfig_CustomGraphOptimizer& custom_optimizers(int index) const;
  ::tensorflow::RewriterConfig_CustomGraphOptimizer* add_custom_optimizers();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::RewriterConfig_CustomGraphOptimizer>& custom_optimizers() const;
  // string memory_optimizer_target_node_name_scope = 6;
  void clear_memory_optimizer_target_node_name_scope() ;
  const std::string& memory_optimizer_target_node_name_scope() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_memory_optimizer_target_node_name_scope(Arg_&& arg, Args_... args);
  std::string* mutable_memory_optimizer_target_node_name_scope();
  PROTOBUF_NODISCARD std::string* release_memory_optimizer_target_node_name_scope();
  void set_allocated_memory_optimizer_target_node_name_scope(std::string* value);

  private:
  const std::string& _internal_memory_optimizer_target_node_name_scope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memory_optimizer_target_node_name_scope(
      const std::string& value);
  std::string* _internal_mutable_memory_optimizer_target_node_name_scope();

  public:
  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  bool has_auto_parallel() const;
  void clear_auto_parallel() ;
  const ::tensorflow::AutoParallelOptions& auto_parallel() const;
  PROTOBUF_NODISCARD ::tensorflow::AutoParallelOptions* release_auto_parallel();
  ::tensorflow::AutoParallelOptions* mutable_auto_parallel();
  void set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* value);
  void unsafe_arena_set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* value);
  ::tensorflow::AutoParallelOptions* unsafe_arena_release_auto_parallel();

  private:
  const ::tensorflow::AutoParallelOptions& _internal_auto_parallel() const;
  ::tensorflow::AutoParallelOptions* _internal_mutable_auto_parallel();

  public:
  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  bool has_scoped_allocator_opts() const;
  void clear_scoped_allocator_opts() ;
  const ::tensorflow::ScopedAllocatorOptions& scoped_allocator_opts() const;
  PROTOBUF_NODISCARD ::tensorflow::ScopedAllocatorOptions* release_scoped_allocator_opts();
  ::tensorflow::ScopedAllocatorOptions* mutable_scoped_allocator_opts();
  void set_allocated_scoped_allocator_opts(::tensorflow::ScopedAllocatorOptions* value);
  void unsafe_arena_set_allocated_scoped_allocator_opts(::tensorflow::ScopedAllocatorOptions* value);
  ::tensorflow::ScopedAllocatorOptions* unsafe_arena_release_scoped_allocator_opts();

  private:
  const ::tensorflow::ScopedAllocatorOptions& _internal_scoped_allocator_opts() const;
  ::tensorflow::ScopedAllocatorOptions* _internal_mutable_scoped_allocator_opts();

  public:
  // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  bool has_inter_optimizer_verifier_config() const;
  void clear_inter_optimizer_verifier_config() ;
  const ::tensorflow::VerifierConfig& inter_optimizer_verifier_config() const;
  PROTOBUF_NODISCARD ::tensorflow::VerifierConfig* release_inter_optimizer_verifier_config();
  ::tensorflow::VerifierConfig* mutable_inter_optimizer_verifier_config();
  void set_allocated_inter_optimizer_verifier_config(::tensorflow::VerifierConfig* value);
  void unsafe_arena_set_allocated_inter_optimizer_verifier_config(::tensorflow::VerifierConfig* value);
  ::tensorflow::VerifierConfig* unsafe_arena_release_inter_optimizer_verifier_config();

  private:
  const ::tensorflow::VerifierConfig& _internal_inter_optimizer_verifier_config() const;
  ::tensorflow::VerifierConfig* _internal_mutable_inter_optimizer_verifier_config();

  public:
  // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  bool has_post_optimization_verifier_config() const;
  void clear_post_optimization_verifier_config() ;
  const ::tensorflow::VerifierConfig& post_optimization_verifier_config() const;
  PROTOBUF_NODISCARD ::tensorflow::VerifierConfig* release_post_optimization_verifier_config();
  ::tensorflow::VerifierConfig* mutable_post_optimization_verifier_config();
  void set_allocated_post_optimization_verifier_config(::tensorflow::VerifierConfig* value);
  void unsafe_arena_set_allocated_post_optimization_verifier_config(::tensorflow::VerifierConfig* value);
  ::tensorflow::VerifierConfig* unsafe_arena_release_post_optimization_verifier_config();

  private:
  const ::tensorflow::VerifierConfig& _internal_post_optimization_verifier_config() const;
  ::tensorflow::VerifierConfig* _internal_mutable_post_optimization_verifier_config();

  public:
  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  void clear_layout_optimizer() ;
  ::tensorflow::RewriterConfig_Toggle layout_optimizer() const;
  void set_layout_optimizer(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_layout_optimizer() const;
  void _internal_set_layout_optimizer(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  void clear_constant_folding() ;
  ::tensorflow::RewriterConfig_Toggle constant_folding() const;
  void set_constant_folding(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_constant_folding() const;
  void _internal_set_constant_folding(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  void clear_memory_optimization() ;
  ::tensorflow::RewriterConfig_MemOptType memory_optimization() const;
  void set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value);

  private:
  ::tensorflow::RewriterConfig_MemOptType _internal_memory_optimization() const;
  void _internal_set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value);

  public:
  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  void clear_arithmetic_optimization() ;
  ::tensorflow::RewriterConfig_Toggle arithmetic_optimization() const;
  void set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_arithmetic_optimization() const;
  void _internal_set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  void clear_dependency_optimization() ;
  ::tensorflow::RewriterConfig_Toggle dependency_optimization() const;
  void set_dependency_optimization(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_dependency_optimization() const;
  void _internal_set_dependency_optimization(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  void clear_loop_optimization() ;
  ::tensorflow::RewriterConfig_Toggle loop_optimization() const;
  void set_loop_optimization(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_loop_optimization() const;
  void _internal_set_loop_optimization(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  void clear_function_optimization() ;
  ::tensorflow::RewriterConfig_Toggle function_optimization() const;
  void set_function_optimization(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_function_optimization() const;
  void _internal_set_function_optimization(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  void clear_debug_stripper() ;
  ::tensorflow::RewriterConfig_Toggle debug_stripper() const;
  void set_debug_stripper(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_debug_stripper() const;
  void _internal_set_debug_stripper(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  void clear_meta_optimizer_iterations() ;
  ::tensorflow::RewriterConfig_NumIterationsType meta_optimizer_iterations() const;
  void set_meta_optimizer_iterations(::tensorflow::RewriterConfig_NumIterationsType value);

  private:
  ::tensorflow::RewriterConfig_NumIterationsType _internal_meta_optimizer_iterations() const;
  void _internal_set_meta_optimizer_iterations(::tensorflow::RewriterConfig_NumIterationsType value);

  public:
  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  void clear_shape_optimization() ;
  ::tensorflow::RewriterConfig_Toggle shape_optimization() const;
  void set_shape_optimization(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_shape_optimization() const;
  void _internal_set_shape_optimization(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  void clear_remapping() ;
  ::tensorflow::RewriterConfig_Toggle remapping() const;
  void set_remapping(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_remapping() const;
  void _internal_set_remapping(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  void clear_scoped_allocator_optimization() ;
  ::tensorflow::RewriterConfig_Toggle scoped_allocator_optimization() const;
  void set_scoped_allocator_optimization(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_scoped_allocator_optimization() const;
  void _internal_set_scoped_allocator_optimization(::tensorflow::RewriterConfig_Toggle value);

  public:
  // int32 min_graph_nodes = 17;
  void clear_min_graph_nodes() ;
  ::int32_t min_graph_nodes() const;
  void set_min_graph_nodes(::int32_t value);

  private:
  ::int32_t _internal_min_graph_nodes() const;
  void _internal_set_min_graph_nodes(::int32_t value);

  public:
  // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  void clear_pin_to_host_optimization() ;
  ::tensorflow::RewriterConfig_Toggle pin_to_host_optimization() const;
  void set_pin_to_host_optimization(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_pin_to_host_optimization() const;
  void _internal_set_pin_to_host_optimization(::tensorflow::RewriterConfig_Toggle value);

  public:
  // int64 meta_optimizer_timeout_ms = 20;
  void clear_meta_optimizer_timeout_ms() ;
  ::int64_t meta_optimizer_timeout_ms() const;
  void set_meta_optimizer_timeout_ms(::int64_t value);

  private:
  ::int64_t _internal_meta_optimizer_timeout_ms() const;
  void _internal_set_meta_optimizer_timeout_ms(::int64_t value);

  public:
  // bool disable_model_pruning = 2;
  void clear_disable_model_pruning() ;
  bool disable_model_pruning() const;
  void set_disable_model_pruning(bool value);

  private:
  bool _internal_disable_model_pruning() const;
  void _internal_set_disable_model_pruning(bool value);

  public:
  // bool disable_meta_optimizer = 19;
  void clear_disable_meta_optimizer() ;
  bool disable_meta_optimizer() const;
  void set_disable_meta_optimizer(bool value);

  private:
  bool _internal_disable_meta_optimizer() const;
  void _internal_set_disable_meta_optimizer(bool value);

  public:
  // bool disable_tfg_optimizer = 32;
  void clear_disable_tfg_optimizer() ;
  bool disable_tfg_optimizer() const;
  void set_disable_tfg_optimizer(bool value);

  private:
  bool _internal_disable_tfg_optimizer() const;
  void _internal_set_disable_tfg_optimizer(bool value);

  public:
  // bool experimental_disable_compressed_tensor_optimization = 26;
  void clear_experimental_disable_compressed_tensor_optimization() ;
  bool experimental_disable_compressed_tensor_optimization() const;
  void set_experimental_disable_compressed_tensor_optimization(bool value);

  private:
  bool _internal_experimental_disable_compressed_tensor_optimization() const;
  void _internal_set_experimental_disable_compressed_tensor_optimization(bool value);

  public:
  // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  void clear_implementation_selector() ;
  ::tensorflow::RewriterConfig_Toggle implementation_selector() const;
  void set_implementation_selector(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_implementation_selector() const;
  void _internal_set_implementation_selector(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  void clear_auto_mixed_precision() ;
  ::tensorflow::RewriterConfig_Toggle auto_mixed_precision() const;
  void set_auto_mixed_precision(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_auto_mixed_precision() const;
  void _internal_set_auto_mixed_precision(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
  void clear_common_subgraph_elimination() ;
  ::tensorflow::RewriterConfig_Toggle common_subgraph_elimination() const;
  void set_common_subgraph_elimination(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_common_subgraph_elimination() const;
  void _internal_set_common_subgraph_elimination(::tensorflow::RewriterConfig_Toggle value);

  public:
  // bool experimental_disable_folding_quantization_emulation = 27;
  void clear_experimental_disable_folding_quantization_emulation() ;
  bool experimental_disable_folding_quantization_emulation() const;
  void set_experimental_disable_folding_quantization_emulation(bool value);

  private:
  bool _internal_experimental_disable_folding_quantization_emulation() const;
  void _internal_set_experimental_disable_folding_quantization_emulation(bool value);

  public:
  // bool fail_on_optimizer_errors = 21;
  void clear_fail_on_optimizer_errors() ;
  bool fail_on_optimizer_errors() const;
  void set_fail_on_optimizer_errors(bool value);

  private:
  bool _internal_fail_on_optimizer_errors() const;
  void _internal_set_fail_on_optimizer_errors(bool value);

  public:
  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
  void clear_auto_mixed_precision_mkl() ;
  ::tensorflow::RewriterConfig_Toggle auto_mixed_precision_mkl() const;
  void set_auto_mixed_precision_mkl(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_auto_mixed_precision_mkl() const;
  void _internal_set_auto_mixed_precision_mkl(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle use_plugin_optimizers = 28;
  void clear_use_plugin_optimizers() ;
  ::tensorflow::RewriterConfig_Toggle use_plugin_optimizers() const;
  void set_use_plugin_optimizers(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_use_plugin_optimizers() const;
  void _internal_set_use_plugin_optimizers(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision_cpu = 29;
  void clear_auto_mixed_precision_cpu() ;
  ::tensorflow::RewriterConfig_Toggle auto_mixed_precision_cpu() const;
  void set_auto_mixed_precision_cpu(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_auto_mixed_precision_cpu() const;
  void _internal_set_auto_mixed_precision_cpu(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle experimental_conditional_code_motion = 30;
  void clear_experimental_conditional_code_motion() ;
  ::tensorflow::RewriterConfig_Toggle experimental_conditional_code_motion() const;
  void set_experimental_conditional_code_motion(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_experimental_conditional_code_motion() const;
  void _internal_set_experimental_conditional_code_motion(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision_onednn_bfloat16 = 31;
  void clear_auto_mixed_precision_onednn_bfloat16() ;
  ::tensorflow::RewriterConfig_Toggle auto_mixed_precision_onednn_bfloat16() const;
  void set_auto_mixed_precision_onednn_bfloat16(::tensorflow::RewriterConfig_Toggle value);

  private:
  ::tensorflow::RewriterConfig_Toggle _internal_auto_mixed_precision_onednn_bfloat16() const;
  void _internal_set_auto_mixed_precision_onednn_bfloat16(::tensorflow::RewriterConfig_Toggle value);

  public:
  // .tensorflow.RewriterConfig.CpuLayout cpu_layout_conversion = 50;
  void clear_cpu_layout_conversion() ;
  ::tensorflow::RewriterConfig_CpuLayout cpu_layout_conversion() const;
  void set_cpu_layout_conversion(::tensorflow::RewriterConfig_CpuLayout value);

  private:
  ::tensorflow::RewriterConfig_CpuLayout _internal_cpu_layout_conversion() const;
  void _internal_set_cpu_layout_conversion(::tensorflow::RewriterConfig_CpuLayout value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.RewriterConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 37, 5,
      115, 23>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RewriterConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> optimizers_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer > custom_optimizers_;
    ::google::protobuf::internal::ArenaStringPtr memory_optimizer_target_node_name_scope_;
    ::tensorflow::AutoParallelOptions* auto_parallel_;
    ::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts_;
    ::tensorflow::VerifierConfig* inter_optimizer_verifier_config_;
    ::tensorflow::VerifierConfig* post_optimization_verifier_config_;
    int layout_optimizer_;
    int constant_folding_;
    int memory_optimization_;
    int arithmetic_optimization_;
    int dependency_optimization_;
    int loop_optimization_;
    int function_optimization_;
    int debug_stripper_;
    int meta_optimizer_iterations_;
    int shape_optimization_;
    int remapping_;
    int scoped_allocator_optimization_;
    ::int32_t min_graph_nodes_;
    int pin_to_host_optimization_;
    ::int64_t meta_optimizer_timeout_ms_;
    bool disable_model_pruning_;
    bool disable_meta_optimizer_;
    bool disable_tfg_optimizer_;
    bool experimental_disable_compressed_tensor_optimization_;
    int implementation_selector_;
    int auto_mixed_precision_;
    int common_subgraph_elimination_;
    bool experimental_disable_folding_quantization_emulation_;
    bool fail_on_optimizer_errors_;
    int auto_mixed_precision_mkl_;
    int use_plugin_optimizers_;
    int auto_mixed_precision_cpu_;
    int experimental_conditional_code_motion_;
    int auto_mixed_precision_onednn_bfloat16_;
    int cpu_layout_conversion_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AutoParallelOptions

// bool enable = 1;
inline void AutoParallelOptions::clear_enable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = false;
}
inline bool AutoParallelOptions::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.enable)
  return _internal_enable();
}
inline void AutoParallelOptions::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.enable)
}
inline bool AutoParallelOptions::_internal_enable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_;
}
inline void AutoParallelOptions::_internal_set_enable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_ = value;
}

// int32 num_replicas = 2;
inline void AutoParallelOptions::clear_num_replicas() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_replicas_ = 0;
}
inline ::int32_t AutoParallelOptions::num_replicas() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.num_replicas)
  return _internal_num_replicas();
}
inline void AutoParallelOptions::set_num_replicas(::int32_t value) {
  _internal_set_num_replicas(value);
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.num_replicas)
}
inline ::int32_t AutoParallelOptions::_internal_num_replicas() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_replicas_;
}
inline void AutoParallelOptions::_internal_set_num_replicas(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_replicas_ = value;
}

// -------------------------------------------------------------------

// ScopedAllocatorOptions

// repeated string enable_op = 1;
inline int ScopedAllocatorOptions::_internal_enable_op_size() const {
  return _internal_enable_op().size();
}
inline int ScopedAllocatorOptions::enable_op_size() const {
  return _internal_enable_op_size();
}
inline void ScopedAllocatorOptions::clear_enable_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_op_.Clear();
}
inline std::string* ScopedAllocatorOptions::add_enable_op() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_enable_op()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ScopedAllocatorOptions.enable_op)
  return _s;
}
inline const std::string& ScopedAllocatorOptions::enable_op(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ScopedAllocatorOptions.enable_op)
  return _internal_enable_op().Get(index);
}
inline std::string* ScopedAllocatorOptions::mutable_enable_op(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.ScopedAllocatorOptions.enable_op)
  return _internal_mutable_enable_op()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ScopedAllocatorOptions::set_enable_op(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_enable_op()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.ScopedAllocatorOptions.enable_op)
}
template <typename Arg_, typename... Args_>
inline void ScopedAllocatorOptions::add_enable_op(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_enable_op(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.ScopedAllocatorOptions.enable_op)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ScopedAllocatorOptions::enable_op() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.ScopedAllocatorOptions.enable_op)
  return _internal_enable_op();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ScopedAllocatorOptions::mutable_enable_op() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ScopedAllocatorOptions.enable_op)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_enable_op();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ScopedAllocatorOptions::_internal_enable_op() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_op_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ScopedAllocatorOptions::_internal_mutable_enable_op() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.enable_op_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RewriterConfig_CustomGraphOptimizer

// string name = 1;
inline void RewriterConfig_CustomGraphOptimizer::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RewriterConfig_CustomGraphOptimizer::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RewriterConfig_CustomGraphOptimizer::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
inline std::string* RewriterConfig_CustomGraphOptimizer::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return _s;
}
inline const std::string& RewriterConfig_CustomGraphOptimizer::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void RewriterConfig_CustomGraphOptimizer::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* RewriterConfig_CustomGraphOptimizer::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* RewriterConfig_CustomGraphOptimizer::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return _impl_.name_.Release();
}
inline void RewriterConfig_CustomGraphOptimizer::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}

// map<string, .tensorflow.AttrValue> parameter_map = 2;
inline int RewriterConfig_CustomGraphOptimizer::_internal_parameter_map_size() const {
  return _internal_parameter_map().size();
}
inline int RewriterConfig_CustomGraphOptimizer::parameter_map_size() const {
  return _internal_parameter_map_size();
}
inline const ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>& RewriterConfig_CustomGraphOptimizer::_internal_parameter_map() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parameter_map_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>& RewriterConfig_CustomGraphOptimizer::parameter_map() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.RewriterConfig.CustomGraphOptimizer.parameter_map)
  return _internal_parameter_map();
}
inline ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>* RewriterConfig_CustomGraphOptimizer::_internal_mutable_parameter_map() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parameter_map_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::tensorflow::AttrValue>* RewriterConfig_CustomGraphOptimizer::mutable_parameter_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.RewriterConfig.CustomGraphOptimizer.parameter_map)
  return _internal_mutable_parameter_map();
}

// -------------------------------------------------------------------

// RewriterConfig

// .tensorflow.RewriterConfig.CpuLayout cpu_layout_conversion = 50;
inline void RewriterConfig::clear_cpu_layout_conversion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_layout_conversion_ = 0;
}
inline ::tensorflow::RewriterConfig_CpuLayout RewriterConfig::cpu_layout_conversion() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.cpu_layout_conversion)
  return _internal_cpu_layout_conversion();
}
inline void RewriterConfig::set_cpu_layout_conversion(::tensorflow::RewriterConfig_CpuLayout value) {
  _internal_set_cpu_layout_conversion(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.cpu_layout_conversion)
}
inline ::tensorflow::RewriterConfig_CpuLayout RewriterConfig::_internal_cpu_layout_conversion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_CpuLayout>(_impl_.cpu_layout_conversion_);
}
inline void RewriterConfig::_internal_set_cpu_layout_conversion(::tensorflow::RewriterConfig_CpuLayout value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_layout_conversion_ = value;
}

// .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
inline void RewriterConfig::clear_layout_optimizer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layout_optimizer_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::layout_optimizer() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.layout_optimizer)
  return _internal_layout_optimizer();
}
inline void RewriterConfig::set_layout_optimizer(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_layout_optimizer(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.layout_optimizer)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_layout_optimizer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.layout_optimizer_);
}
inline void RewriterConfig::_internal_set_layout_optimizer(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layout_optimizer_ = value;
}

// .tensorflow.RewriterConfig.Toggle constant_folding = 3;
inline void RewriterConfig::clear_constant_folding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.constant_folding_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.constant_folding)
  return _internal_constant_folding();
}
inline void RewriterConfig::set_constant_folding(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_constant_folding(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.constant_folding)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_constant_folding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.constant_folding_);
}
inline void RewriterConfig::_internal_set_constant_folding(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.constant_folding_ = value;
}

// .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
inline void RewriterConfig::clear_shape_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shape_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::shape_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.shape_optimization)
  return _internal_shape_optimization();
}
inline void RewriterConfig::set_shape_optimization(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_shape_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.shape_optimization)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_shape_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.shape_optimization_);
}
inline void RewriterConfig::_internal_set_shape_optimization(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shape_optimization_ = value;
}

// .tensorflow.RewriterConfig.Toggle remapping = 14;
inline void RewriterConfig::clear_remapping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remapping_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::remapping() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.remapping)
  return _internal_remapping();
}
inline void RewriterConfig::set_remapping(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_remapping(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.remapping)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_remapping() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.remapping_);
}
inline void RewriterConfig::_internal_set_remapping(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remapping_ = value;
}

// .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
inline void RewriterConfig::clear_common_subgraph_elimination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_subgraph_elimination_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::common_subgraph_elimination() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.common_subgraph_elimination)
  return _internal_common_subgraph_elimination();
}
inline void RewriterConfig::set_common_subgraph_elimination(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_common_subgraph_elimination(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.common_subgraph_elimination)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_common_subgraph_elimination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.common_subgraph_elimination_);
}
inline void RewriterConfig::_internal_set_common_subgraph_elimination(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_subgraph_elimination_ = value;
}

// .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
inline void RewriterConfig::clear_arithmetic_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.arithmetic_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::arithmetic_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.arithmetic_optimization)
  return _internal_arithmetic_optimization();
}
inline void RewriterConfig::set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_arithmetic_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.arithmetic_optimization)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_arithmetic_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.arithmetic_optimization_);
}
inline void RewriterConfig::_internal_set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.arithmetic_optimization_ = value;
}

// .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
inline void RewriterConfig::clear_dependency_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependency_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::dependency_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.dependency_optimization)
  return _internal_dependency_optimization();
}
inline void RewriterConfig::set_dependency_optimization(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_dependency_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.dependency_optimization)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_dependency_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.dependency_optimization_);
}
inline void RewriterConfig::_internal_set_dependency_optimization(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependency_optimization_ = value;
}

// .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
inline void RewriterConfig::clear_loop_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loop_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::loop_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.loop_optimization)
  return _internal_loop_optimization();
}
inline void RewriterConfig::set_loop_optimization(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_loop_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.loop_optimization)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_loop_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.loop_optimization_);
}
inline void RewriterConfig::_internal_set_loop_optimization(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loop_optimization_ = value;
}

// .tensorflow.RewriterConfig.Toggle function_optimization = 10;
inline void RewriterConfig::clear_function_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::function_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.function_optimization)
  return _internal_function_optimization();
}
inline void RewriterConfig::set_function_optimization(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_function_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.function_optimization)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_function_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.function_optimization_);
}
inline void RewriterConfig::_internal_set_function_optimization(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_optimization_ = value;
}

// .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
inline void RewriterConfig::clear_debug_stripper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_stripper_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::debug_stripper() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.debug_stripper)
  return _internal_debug_stripper();
}
inline void RewriterConfig::set_debug_stripper(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_debug_stripper(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.debug_stripper)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_debug_stripper() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.debug_stripper_);
}
inline void RewriterConfig::_internal_set_debug_stripper(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_stripper_ = value;
}

// bool disable_model_pruning = 2;
inline void RewriterConfig::clear_disable_model_pruning() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_model_pruning_ = false;
}
inline bool RewriterConfig::disable_model_pruning() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_model_pruning)
  return _internal_disable_model_pruning();
}
inline void RewriterConfig::set_disable_model_pruning(bool value) {
  _internal_set_disable_model_pruning(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_model_pruning)
}
inline bool RewriterConfig::_internal_disable_model_pruning() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_model_pruning_;
}
inline void RewriterConfig::_internal_set_disable_model_pruning(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_model_pruning_ = value;
}

// .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
inline void RewriterConfig::clear_scoped_allocator_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scoped_allocator_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::scoped_allocator_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.scoped_allocator_optimization)
  return _internal_scoped_allocator_optimization();
}
inline void RewriterConfig::set_scoped_allocator_optimization(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_scoped_allocator_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.scoped_allocator_optimization)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_scoped_allocator_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.scoped_allocator_optimization_);
}
inline void RewriterConfig::_internal_set_scoped_allocator_optimization(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scoped_allocator_optimization_ = value;
}

// .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
inline void RewriterConfig::clear_pin_to_host_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pin_to_host_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::pin_to_host_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.pin_to_host_optimization)
  return _internal_pin_to_host_optimization();
}
inline void RewriterConfig::set_pin_to_host_optimization(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_pin_to_host_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.pin_to_host_optimization)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_pin_to_host_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.pin_to_host_optimization_);
}
inline void RewriterConfig::_internal_set_pin_to_host_optimization(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pin_to_host_optimization_ = value;
}

// .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
inline void RewriterConfig::clear_implementation_selector() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.implementation_selector_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::implementation_selector() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.implementation_selector)
  return _internal_implementation_selector();
}
inline void RewriterConfig::set_implementation_selector(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_implementation_selector(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.implementation_selector)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_implementation_selector() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.implementation_selector_);
}
inline void RewriterConfig::_internal_set_implementation_selector(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.implementation_selector_ = value;
}

// .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
inline void RewriterConfig::clear_auto_mixed_precision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_mixed_precision_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::auto_mixed_precision() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_mixed_precision)
  return _internal_auto_mixed_precision();
}
inline void RewriterConfig::set_auto_mixed_precision(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_auto_mixed_precision(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.auto_mixed_precision)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_auto_mixed_precision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.auto_mixed_precision_);
}
inline void RewriterConfig::_internal_set_auto_mixed_precision(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_mixed_precision_ = value;
}

// .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
inline void RewriterConfig::clear_auto_mixed_precision_mkl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_mixed_precision_mkl_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::auto_mixed_precision_mkl() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_mixed_precision_mkl)
  return _internal_auto_mixed_precision_mkl();
}
inline void RewriterConfig::set_auto_mixed_precision_mkl(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_auto_mixed_precision_mkl(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.auto_mixed_precision_mkl)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_auto_mixed_precision_mkl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.auto_mixed_precision_mkl_);
}
inline void RewriterConfig::_internal_set_auto_mixed_precision_mkl(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_mixed_precision_mkl_ = value;
}

// .tensorflow.RewriterConfig.Toggle auto_mixed_precision_onednn_bfloat16 = 31;
inline void RewriterConfig::clear_auto_mixed_precision_onednn_bfloat16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_mixed_precision_onednn_bfloat16_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::auto_mixed_precision_onednn_bfloat16() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_mixed_precision_onednn_bfloat16)
  return _internal_auto_mixed_precision_onednn_bfloat16();
}
inline void RewriterConfig::set_auto_mixed_precision_onednn_bfloat16(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_auto_mixed_precision_onednn_bfloat16(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.auto_mixed_precision_onednn_bfloat16)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_auto_mixed_precision_onednn_bfloat16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.auto_mixed_precision_onednn_bfloat16_);
}
inline void RewriterConfig::_internal_set_auto_mixed_precision_onednn_bfloat16(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_mixed_precision_onednn_bfloat16_ = value;
}

// .tensorflow.RewriterConfig.Toggle auto_mixed_precision_cpu = 29;
inline void RewriterConfig::clear_auto_mixed_precision_cpu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_mixed_precision_cpu_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::auto_mixed_precision_cpu() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_mixed_precision_cpu)
  return _internal_auto_mixed_precision_cpu();
}
inline void RewriterConfig::set_auto_mixed_precision_cpu(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_auto_mixed_precision_cpu(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.auto_mixed_precision_cpu)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_auto_mixed_precision_cpu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.auto_mixed_precision_cpu_);
}
inline void RewriterConfig::_internal_set_auto_mixed_precision_cpu(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_mixed_precision_cpu_ = value;
}

// bool disable_meta_optimizer = 19;
inline void RewriterConfig::clear_disable_meta_optimizer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_meta_optimizer_ = false;
}
inline bool RewriterConfig::disable_meta_optimizer() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_meta_optimizer)
  return _internal_disable_meta_optimizer();
}
inline void RewriterConfig::set_disable_meta_optimizer(bool value) {
  _internal_set_disable_meta_optimizer(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_meta_optimizer)
}
inline bool RewriterConfig::_internal_disable_meta_optimizer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_meta_optimizer_;
}
inline void RewriterConfig::_internal_set_disable_meta_optimizer(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_meta_optimizer_ = value;
}

// bool disable_tfg_optimizer = 32;
inline void RewriterConfig::clear_disable_tfg_optimizer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_tfg_optimizer_ = false;
}
inline bool RewriterConfig::disable_tfg_optimizer() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_tfg_optimizer)
  return _internal_disable_tfg_optimizer();
}
inline void RewriterConfig::set_disable_tfg_optimizer(bool value) {
  _internal_set_disable_tfg_optimizer(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_tfg_optimizer)
}
inline bool RewriterConfig::_internal_disable_tfg_optimizer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_tfg_optimizer_;
}
inline void RewriterConfig::_internal_set_disable_tfg_optimizer(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_tfg_optimizer_ = value;
}

// .tensorflow.RewriterConfig.Toggle use_plugin_optimizers = 28;
inline void RewriterConfig::clear_use_plugin_optimizers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_plugin_optimizers_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::use_plugin_optimizers() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.use_plugin_optimizers)
  return _internal_use_plugin_optimizers();
}
inline void RewriterConfig::set_use_plugin_optimizers(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_use_plugin_optimizers(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.use_plugin_optimizers)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_use_plugin_optimizers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.use_plugin_optimizers_);
}
inline void RewriterConfig::_internal_set_use_plugin_optimizers(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_plugin_optimizers_ = value;
}

// .tensorflow.RewriterConfig.Toggle experimental_conditional_code_motion = 30;
inline void RewriterConfig::clear_experimental_conditional_code_motion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.experimental_conditional_code_motion_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::experimental_conditional_code_motion() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.experimental_conditional_code_motion)
  return _internal_experimental_conditional_code_motion();
}
inline void RewriterConfig::set_experimental_conditional_code_motion(::tensorflow::RewriterConfig_Toggle value) {
  _internal_set_experimental_conditional_code_motion(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.experimental_conditional_code_motion)
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::_internal_experimental_conditional_code_motion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_Toggle>(_impl_.experimental_conditional_code_motion_);
}
inline void RewriterConfig::_internal_set_experimental_conditional_code_motion(::tensorflow::RewriterConfig_Toggle value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.experimental_conditional_code_motion_ = value;
}

// .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
inline void RewriterConfig::clear_meta_optimizer_iterations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meta_optimizer_iterations_ = 0;
}
inline ::tensorflow::RewriterConfig_NumIterationsType RewriterConfig::meta_optimizer_iterations() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.meta_optimizer_iterations)
  return _internal_meta_optimizer_iterations();
}
inline void RewriterConfig::set_meta_optimizer_iterations(::tensorflow::RewriterConfig_NumIterationsType value) {
  _internal_set_meta_optimizer_iterations(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.meta_optimizer_iterations)
}
inline ::tensorflow::RewriterConfig_NumIterationsType RewriterConfig::_internal_meta_optimizer_iterations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_NumIterationsType>(_impl_.meta_optimizer_iterations_);
}
inline void RewriterConfig::_internal_set_meta_optimizer_iterations(::tensorflow::RewriterConfig_NumIterationsType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meta_optimizer_iterations_ = value;
}

// int32 min_graph_nodes = 17;
inline void RewriterConfig::clear_min_graph_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_graph_nodes_ = 0;
}
inline ::int32_t RewriterConfig::min_graph_nodes() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.min_graph_nodes)
  return _internal_min_graph_nodes();
}
inline void RewriterConfig::set_min_graph_nodes(::int32_t value) {
  _internal_set_min_graph_nodes(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.min_graph_nodes)
}
inline ::int32_t RewriterConfig::_internal_min_graph_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_graph_nodes_;
}
inline void RewriterConfig::_internal_set_min_graph_nodes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_graph_nodes_ = value;
}

// bool experimental_disable_compressed_tensor_optimization = 26;
inline void RewriterConfig::clear_experimental_disable_compressed_tensor_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.experimental_disable_compressed_tensor_optimization_ = false;
}
inline bool RewriterConfig::experimental_disable_compressed_tensor_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.experimental_disable_compressed_tensor_optimization)
  return _internal_experimental_disable_compressed_tensor_optimization();
}
inline void RewriterConfig::set_experimental_disable_compressed_tensor_optimization(bool value) {
  _internal_set_experimental_disable_compressed_tensor_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.experimental_disable_compressed_tensor_optimization)
}
inline bool RewriterConfig::_internal_experimental_disable_compressed_tensor_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.experimental_disable_compressed_tensor_optimization_;
}
inline void RewriterConfig::_internal_set_experimental_disable_compressed_tensor_optimization(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.experimental_disable_compressed_tensor_optimization_ = value;
}

// bool experimental_disable_folding_quantization_emulation = 27;
inline void RewriterConfig::clear_experimental_disable_folding_quantization_emulation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.experimental_disable_folding_quantization_emulation_ = false;
}
inline bool RewriterConfig::experimental_disable_folding_quantization_emulation() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.experimental_disable_folding_quantization_emulation)
  return _internal_experimental_disable_folding_quantization_emulation();
}
inline void RewriterConfig::set_experimental_disable_folding_quantization_emulation(bool value) {
  _internal_set_experimental_disable_folding_quantization_emulation(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.experimental_disable_folding_quantization_emulation)
}
inline bool RewriterConfig::_internal_experimental_disable_folding_quantization_emulation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.experimental_disable_folding_quantization_emulation_;
}
inline void RewriterConfig::_internal_set_experimental_disable_folding_quantization_emulation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.experimental_disable_folding_quantization_emulation_ = value;
}

// .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
inline void RewriterConfig::clear_memory_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_MemOptType RewriterConfig::memory_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimization)
  return _internal_memory_optimization();
}
inline void RewriterConfig::set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value) {
  _internal_set_memory_optimization(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimization)
}
inline ::tensorflow::RewriterConfig_MemOptType RewriterConfig::_internal_memory_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::RewriterConfig_MemOptType>(_impl_.memory_optimization_);
}
inline void RewriterConfig::_internal_set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_optimization_ = value;
}

// string memory_optimizer_target_node_name_scope = 6;
inline void RewriterConfig::clear_memory_optimizer_target_node_name_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_optimizer_target_node_name_scope_.ClearToEmpty();
}
inline const std::string& RewriterConfig::memory_optimizer_target_node_name_scope() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return _internal_memory_optimizer_target_node_name_scope();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RewriterConfig::set_memory_optimizer_target_node_name_scope(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_optimizer_target_node_name_scope_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
inline std::string* RewriterConfig::mutable_memory_optimizer_target_node_name_scope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_memory_optimizer_target_node_name_scope();
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return _s;
}
inline const std::string& RewriterConfig::_internal_memory_optimizer_target_node_name_scope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_optimizer_target_node_name_scope_.Get();
}
inline void RewriterConfig::_internal_set_memory_optimizer_target_node_name_scope(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_optimizer_target_node_name_scope_.Set(value, GetArena());
}
inline std::string* RewriterConfig::_internal_mutable_memory_optimizer_target_node_name_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.memory_optimizer_target_node_name_scope_.Mutable( GetArena());
}
inline std::string* RewriterConfig::release_memory_optimizer_target_node_name_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return _impl_.memory_optimizer_target_node_name_scope_.Release();
}
inline void RewriterConfig::set_allocated_memory_optimizer_target_node_name_scope(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_optimizer_target_node_name_scope_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.memory_optimizer_target_node_name_scope_.IsDefault()) {
          _impl_.memory_optimizer_target_node_name_scope_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}

// int64 meta_optimizer_timeout_ms = 20;
inline void RewriterConfig::clear_meta_optimizer_timeout_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meta_optimizer_timeout_ms_ = ::int64_t{0};
}
inline ::int64_t RewriterConfig::meta_optimizer_timeout_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.meta_optimizer_timeout_ms)
  return _internal_meta_optimizer_timeout_ms();
}
inline void RewriterConfig::set_meta_optimizer_timeout_ms(::int64_t value) {
  _internal_set_meta_optimizer_timeout_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.meta_optimizer_timeout_ms)
}
inline ::int64_t RewriterConfig::_internal_meta_optimizer_timeout_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.meta_optimizer_timeout_ms_;
}
inline void RewriterConfig::_internal_set_meta_optimizer_timeout_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meta_optimizer_timeout_ms_ = value;
}

// .tensorflow.AutoParallelOptions auto_parallel = 5;
inline bool RewriterConfig::has_auto_parallel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.auto_parallel_ != nullptr);
  return value;
}
inline void RewriterConfig::clear_auto_parallel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.auto_parallel_ != nullptr) _impl_.auto_parallel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::AutoParallelOptions& RewriterConfig::_internal_auto_parallel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::AutoParallelOptions* p = _impl_.auto_parallel_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::AutoParallelOptions&>(::tensorflow::_AutoParallelOptions_default_instance_);
}
inline const ::tensorflow::AutoParallelOptions& RewriterConfig::auto_parallel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_parallel)
  return _internal_auto_parallel();
}
inline void RewriterConfig::unsafe_arena_set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.auto_parallel_);
  }
  _impl_.auto_parallel_ = reinterpret_cast<::tensorflow::AutoParallelOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}
inline ::tensorflow::AutoParallelOptions* RewriterConfig::release_auto_parallel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::AutoParallelOptions* released = _impl_.auto_parallel_;
  _impl_.auto_parallel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::AutoParallelOptions* RewriterConfig::unsafe_arena_release_auto_parallel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.auto_parallel)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::AutoParallelOptions* temp = _impl_.auto_parallel_;
  _impl_.auto_parallel_ = nullptr;
  return temp;
}
inline ::tensorflow::AutoParallelOptions* RewriterConfig::_internal_mutable_auto_parallel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.auto_parallel_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::AutoParallelOptions>(GetArena());
    _impl_.auto_parallel_ = reinterpret_cast<::tensorflow::AutoParallelOptions*>(p);
  }
  return _impl_.auto_parallel_;
}
inline ::tensorflow::AutoParallelOptions* RewriterConfig::mutable_auto_parallel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::AutoParallelOptions* _msg = _internal_mutable_auto_parallel();
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.auto_parallel)
  return _msg;
}
inline void RewriterConfig::set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.auto_parallel_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.auto_parallel_ = reinterpret_cast<::tensorflow::AutoParallelOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}

// bool fail_on_optimizer_errors = 21;
inline void RewriterConfig::clear_fail_on_optimizer_errors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fail_on_optimizer_errors_ = false;
}
inline bool RewriterConfig::fail_on_optimizer_errors() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.fail_on_optimizer_errors)
  return _internal_fail_on_optimizer_errors();
}
inline void RewriterConfig::set_fail_on_optimizer_errors(bool value) {
  _internal_set_fail_on_optimizer_errors(value);
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.fail_on_optimizer_errors)
}
inline bool RewriterConfig::_internal_fail_on_optimizer_errors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fail_on_optimizer_errors_;
}
inline void RewriterConfig::_internal_set_fail_on_optimizer_errors(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fail_on_optimizer_errors_ = value;
}

// .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
inline bool RewriterConfig::has_scoped_allocator_opts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scoped_allocator_opts_ != nullptr);
  return value;
}
inline void RewriterConfig::clear_scoped_allocator_opts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.scoped_allocator_opts_ != nullptr) _impl_.scoped_allocator_opts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::ScopedAllocatorOptions& RewriterConfig::_internal_scoped_allocator_opts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::ScopedAllocatorOptions* p = _impl_.scoped_allocator_opts_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::ScopedAllocatorOptions&>(::tensorflow::_ScopedAllocatorOptions_default_instance_);
}
inline const ::tensorflow::ScopedAllocatorOptions& RewriterConfig::scoped_allocator_opts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.scoped_allocator_opts)
  return _internal_scoped_allocator_opts();
}
inline void RewriterConfig::unsafe_arena_set_allocated_scoped_allocator_opts(::tensorflow::ScopedAllocatorOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scoped_allocator_opts_);
  }
  _impl_.scoped_allocator_opts_ = reinterpret_cast<::tensorflow::ScopedAllocatorOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.scoped_allocator_opts)
}
inline ::tensorflow::ScopedAllocatorOptions* RewriterConfig::release_scoped_allocator_opts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::ScopedAllocatorOptions* released = _impl_.scoped_allocator_opts_;
  _impl_.scoped_allocator_opts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::ScopedAllocatorOptions* RewriterConfig::unsafe_arena_release_scoped_allocator_opts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.scoped_allocator_opts)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::ScopedAllocatorOptions* temp = _impl_.scoped_allocator_opts_;
  _impl_.scoped_allocator_opts_ = nullptr;
  return temp;
}
inline ::tensorflow::ScopedAllocatorOptions* RewriterConfig::_internal_mutable_scoped_allocator_opts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.scoped_allocator_opts_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::ScopedAllocatorOptions>(GetArena());
    _impl_.scoped_allocator_opts_ = reinterpret_cast<::tensorflow::ScopedAllocatorOptions*>(p);
  }
  return _impl_.scoped_allocator_opts_;
}
inline ::tensorflow::ScopedAllocatorOptions* RewriterConfig::mutable_scoped_allocator_opts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::ScopedAllocatorOptions* _msg = _internal_mutable_scoped_allocator_opts();
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.scoped_allocator_opts)
  return _msg;
}
inline void RewriterConfig::set_allocated_scoped_allocator_opts(::tensorflow::ScopedAllocatorOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.scoped_allocator_opts_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.scoped_allocator_opts_ = reinterpret_cast<::tensorflow::ScopedAllocatorOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.scoped_allocator_opts)
}

// repeated string optimizers = 100;
inline int RewriterConfig::_internal_optimizers_size() const {
  return _internal_optimizers().size();
}
inline int RewriterConfig::optimizers_size() const {
  return _internal_optimizers_size();
}
inline void RewriterConfig::clear_optimizers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optimizers_.Clear();
}
inline std::string* RewriterConfig::add_optimizers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_optimizers()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RewriterConfig.optimizers)
  return _s;
}
inline const std::string& RewriterConfig::optimizers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.optimizers)
  return _internal_optimizers().Get(index);
}
inline std::string* RewriterConfig::mutable_optimizers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.optimizers)
  return _internal_mutable_optimizers()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RewriterConfig::set_optimizers(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_optimizers()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimizers)
}
template <typename Arg_, typename... Args_>
inline void RewriterConfig::add_optimizers(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_optimizers(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.optimizers)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RewriterConfig::optimizers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.optimizers)
  return _internal_optimizers();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RewriterConfig::mutable_optimizers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.optimizers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_optimizers();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RewriterConfig::_internal_optimizers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optimizers_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RewriterConfig::_internal_mutable_optimizers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.optimizers_;
}

// repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
inline int RewriterConfig::_internal_custom_optimizers_size() const {
  return _internal_custom_optimizers().size();
}
inline int RewriterConfig::custom_optimizers_size() const {
  return _internal_custom_optimizers_size();
}
inline void RewriterConfig::clear_custom_optimizers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_optimizers_.Clear();
}
inline ::tensorflow::RewriterConfig_CustomGraphOptimizer* RewriterConfig::mutable_custom_optimizers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.custom_optimizers)
  return _internal_mutable_custom_optimizers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::RewriterConfig_CustomGraphOptimizer>* RewriterConfig::mutable_custom_optimizers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.custom_optimizers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_custom_optimizers();
}
inline const ::tensorflow::RewriterConfig_CustomGraphOptimizer& RewriterConfig::custom_optimizers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.custom_optimizers)
  return _internal_custom_optimizers().Get(index);
}
inline ::tensorflow::RewriterConfig_CustomGraphOptimizer* RewriterConfig::add_custom_optimizers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::RewriterConfig_CustomGraphOptimizer* _add = _internal_mutable_custom_optimizers()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.custom_optimizers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::RewriterConfig_CustomGraphOptimizer>& RewriterConfig::custom_optimizers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.custom_optimizers)
  return _internal_custom_optimizers();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::RewriterConfig_CustomGraphOptimizer>&
RewriterConfig::_internal_custom_optimizers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.custom_optimizers_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::RewriterConfig_CustomGraphOptimizer>*
RewriterConfig::_internal_mutable_custom_optimizers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.custom_optimizers_;
}

// .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
inline bool RewriterConfig::has_inter_optimizer_verifier_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inter_optimizer_verifier_config_ != nullptr);
  return value;
}
inline const ::tensorflow::VerifierConfig& RewriterConfig::_internal_inter_optimizer_verifier_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::VerifierConfig* p = _impl_.inter_optimizer_verifier_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::VerifierConfig&>(::tensorflow::_VerifierConfig_default_instance_);
}
inline const ::tensorflow::VerifierConfig& RewriterConfig::inter_optimizer_verifier_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  return _internal_inter_optimizer_verifier_config();
}
inline void RewriterConfig::unsafe_arena_set_allocated_inter_optimizer_verifier_config(::tensorflow::VerifierConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.inter_optimizer_verifier_config_);
  }
  _impl_.inter_optimizer_verifier_config_ = reinterpret_cast<::tensorflow::VerifierConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
}
inline ::tensorflow::VerifierConfig* RewriterConfig::release_inter_optimizer_verifier_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::VerifierConfig* released = _impl_.inter_optimizer_verifier_config_;
  _impl_.inter_optimizer_verifier_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::unsafe_arena_release_inter_optimizer_verifier_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.inter_optimizer_verifier_config)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::VerifierConfig* temp = _impl_.inter_optimizer_verifier_config_;
  _impl_.inter_optimizer_verifier_config_ = nullptr;
  return temp;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::_internal_mutable_inter_optimizer_verifier_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.inter_optimizer_verifier_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::VerifierConfig>(GetArena());
    _impl_.inter_optimizer_verifier_config_ = reinterpret_cast<::tensorflow::VerifierConfig*>(p);
  }
  return _impl_.inter_optimizer_verifier_config_;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::mutable_inter_optimizer_verifier_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tensorflow::VerifierConfig* _msg = _internal_mutable_inter_optimizer_verifier_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  return _msg;
}
inline void RewriterConfig::set_allocated_inter_optimizer_verifier_config(::tensorflow::VerifierConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.inter_optimizer_verifier_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.inter_optimizer_verifier_config_ = reinterpret_cast<::tensorflow::VerifierConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
}

// .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
inline bool RewriterConfig::has_post_optimization_verifier_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_optimization_verifier_config_ != nullptr);
  return value;
}
inline const ::tensorflow::VerifierConfig& RewriterConfig::_internal_post_optimization_verifier_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::VerifierConfig* p = _impl_.post_optimization_verifier_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::VerifierConfig&>(::tensorflow::_VerifierConfig_default_instance_);
}
inline const ::tensorflow::VerifierConfig& RewriterConfig::post_optimization_verifier_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.post_optimization_verifier_config)
  return _internal_post_optimization_verifier_config();
}
inline void RewriterConfig::unsafe_arena_set_allocated_post_optimization_verifier_config(::tensorflow::VerifierConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_optimization_verifier_config_);
  }
  _impl_.post_optimization_verifier_config_ = reinterpret_cast<::tensorflow::VerifierConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.post_optimization_verifier_config)
}
inline ::tensorflow::VerifierConfig* RewriterConfig::release_post_optimization_verifier_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tensorflow::VerifierConfig* released = _impl_.post_optimization_verifier_config_;
  _impl_.post_optimization_verifier_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::unsafe_arena_release_post_optimization_verifier_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.post_optimization_verifier_config)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tensorflow::VerifierConfig* temp = _impl_.post_optimization_verifier_config_;
  _impl_.post_optimization_verifier_config_ = nullptr;
  return temp;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::_internal_mutable_post_optimization_verifier_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.post_optimization_verifier_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::VerifierConfig>(GetArena());
    _impl_.post_optimization_verifier_config_ = reinterpret_cast<::tensorflow::VerifierConfig*>(p);
  }
  return _impl_.post_optimization_verifier_config_;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::mutable_post_optimization_verifier_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tensorflow::VerifierConfig* _msg = _internal_mutable_post_optimization_verifier_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.post_optimization_verifier_config)
  return _msg;
}
inline void RewriterConfig::set_allocated_post_optimization_verifier_config(::tensorflow::VerifierConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_optimization_verifier_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.post_optimization_verifier_config_ = reinterpret_cast<::tensorflow::VerifierConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.post_optimization_verifier_config)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::RewriterConfig_Toggle> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::RewriterConfig_Toggle>() {
  return ::tensorflow::RewriterConfig_Toggle_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::RewriterConfig_CpuLayout> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::RewriterConfig_CpuLayout>() {
  return ::tensorflow::RewriterConfig_CpuLayout_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::RewriterConfig_NumIterationsType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::RewriterConfig_NumIterationsType>() {
  return ::tensorflow::RewriterConfig_NumIterationsType_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::RewriterConfig_MemOptType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::RewriterConfig_MemOptType>() {
  return ::tensorflow::RewriterConfig_MemOptType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_2epb_2eh
