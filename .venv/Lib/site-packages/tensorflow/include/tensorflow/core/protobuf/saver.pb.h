// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/saver.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto;
namespace tensorflow {
class SaverDef;
struct SaverDefDefaultTypeInternal;
PROTOBUF_EXPORT extern SaverDefDefaultTypeInternal _SaverDef_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
enum SaverDef_CheckpointFormatVersion : int {
  SaverDef_CheckpointFormatVersion_LEGACY = 0,
  SaverDef_CheckpointFormatVersion_V1 = 1,
  SaverDef_CheckpointFormatVersion_V2 = 2,
  SaverDef_CheckpointFormatVersion_SaverDef_CheckpointFormatVersion_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SaverDef_CheckpointFormatVersion_SaverDef_CheckpointFormatVersion_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool SaverDef_CheckpointFormatVersion_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t SaverDef_CheckpointFormatVersion_internal_data_[];
constexpr SaverDef_CheckpointFormatVersion SaverDef_CheckpointFormatVersion_CheckpointFormatVersion_MIN = static_cast<SaverDef_CheckpointFormatVersion>(0);
constexpr SaverDef_CheckpointFormatVersion SaverDef_CheckpointFormatVersion_CheckpointFormatVersion_MAX = static_cast<SaverDef_CheckpointFormatVersion>(2);
constexpr int SaverDef_CheckpointFormatVersion_CheckpointFormatVersion_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
SaverDef_CheckpointFormatVersion_descriptor();
template <typename T>
const std::string& SaverDef_CheckpointFormatVersion_Name(T value) {
  static_assert(std::is_same<T, SaverDef_CheckpointFormatVersion>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CheckpointFormatVersion_Name().");
  return SaverDef_CheckpointFormatVersion_Name(static_cast<SaverDef_CheckpointFormatVersion>(value));
}
template <>
inline const std::string& SaverDef_CheckpointFormatVersion_Name(SaverDef_CheckpointFormatVersion value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SaverDef_CheckpointFormatVersion_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SaverDef_CheckpointFormatVersion_Parse(absl::string_view name, SaverDef_CheckpointFormatVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaverDef_CheckpointFormatVersion>(
      SaverDef_CheckpointFormatVersion_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT SaverDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.SaverDef) */ {
 public:
  inline SaverDef() : SaverDef(nullptr) {}
  ~SaverDef() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SaverDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline SaverDef(const SaverDef& from) : SaverDef(nullptr, from) {}
  inline SaverDef(SaverDef&& from) noexcept
      : SaverDef(nullptr, std::move(from)) {}
  inline SaverDef& operator=(const SaverDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaverDef& operator=(SaverDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaverDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaverDef* internal_default_instance() {
    return reinterpret_cast<const SaverDef*>(
        &_SaverDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SaverDef& a, SaverDef& b) { a.Swap(&b); }
  inline void Swap(SaverDef* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaverDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaverDef* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SaverDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SaverDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SaverDef& from) { SaverDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SaverDef* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.SaverDef"; }

 protected:
  explicit SaverDef(::google::protobuf::Arena* arena);
  SaverDef(::google::protobuf::Arena* arena, const SaverDef& from);
  SaverDef(::google::protobuf::Arena* arena, SaverDef&& from) noexcept
      : SaverDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using CheckpointFormatVersion = SaverDef_CheckpointFormatVersion;
  static constexpr CheckpointFormatVersion LEGACY = SaverDef_CheckpointFormatVersion_LEGACY;
  static constexpr CheckpointFormatVersion V1 = SaverDef_CheckpointFormatVersion_V1;
  static constexpr CheckpointFormatVersion V2 = SaverDef_CheckpointFormatVersion_V2;
  static inline bool CheckpointFormatVersion_IsValid(int value) {
    return SaverDef_CheckpointFormatVersion_IsValid(value);
  }
  static constexpr CheckpointFormatVersion CheckpointFormatVersion_MIN = SaverDef_CheckpointFormatVersion_CheckpointFormatVersion_MIN;
  static constexpr CheckpointFormatVersion CheckpointFormatVersion_MAX = SaverDef_CheckpointFormatVersion_CheckpointFormatVersion_MAX;
  static constexpr int CheckpointFormatVersion_ARRAYSIZE = SaverDef_CheckpointFormatVersion_CheckpointFormatVersion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* CheckpointFormatVersion_descriptor() {
    return SaverDef_CheckpointFormatVersion_descriptor();
  }
  template <typename T>
  static inline const std::string& CheckpointFormatVersion_Name(T value) {
    return SaverDef_CheckpointFormatVersion_Name(value);
  }
  static inline bool CheckpointFormatVersion_Parse(absl::string_view name, CheckpointFormatVersion* value) {
    return SaverDef_CheckpointFormatVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameTensorNameFieldNumber = 1,
    kSaveTensorNameFieldNumber = 2,
    kRestoreOpNameFieldNumber = 3,
    kMaxToKeepFieldNumber = 4,
    kShardedFieldNumber = 5,
    kKeepCheckpointEveryNHoursFieldNumber = 6,
    kVersionFieldNumber = 7,
  };
  // string filename_tensor_name = 1;
  void clear_filename_tensor_name() ;
  const std::string& filename_tensor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename_tensor_name(Arg_&& arg, Args_... args);
  std::string* mutable_filename_tensor_name();
  PROTOBUF_NODISCARD std::string* release_filename_tensor_name();
  void set_allocated_filename_tensor_name(std::string* value);

  private:
  const std::string& _internal_filename_tensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename_tensor_name(
      const std::string& value);
  std::string* _internal_mutable_filename_tensor_name();

  public:
  // string save_tensor_name = 2;
  void clear_save_tensor_name() ;
  const std::string& save_tensor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_save_tensor_name(Arg_&& arg, Args_... args);
  std::string* mutable_save_tensor_name();
  PROTOBUF_NODISCARD std::string* release_save_tensor_name();
  void set_allocated_save_tensor_name(std::string* value);

  private:
  const std::string& _internal_save_tensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_tensor_name(
      const std::string& value);
  std::string* _internal_mutable_save_tensor_name();

  public:
  // string restore_op_name = 3;
  void clear_restore_op_name() ;
  const std::string& restore_op_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_restore_op_name(Arg_&& arg, Args_... args);
  std::string* mutable_restore_op_name();
  PROTOBUF_NODISCARD std::string* release_restore_op_name();
  void set_allocated_restore_op_name(std::string* value);

  private:
  const std::string& _internal_restore_op_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_restore_op_name(
      const std::string& value);
  std::string* _internal_mutable_restore_op_name();

  public:
  // int32 max_to_keep = 4;
  void clear_max_to_keep() ;
  ::int32_t max_to_keep() const;
  void set_max_to_keep(::int32_t value);

  private:
  ::int32_t _internal_max_to_keep() const;
  void _internal_set_max_to_keep(::int32_t value);

  public:
  // bool sharded = 5;
  void clear_sharded() ;
  bool sharded() const;
  void set_sharded(bool value);

  private:
  bool _internal_sharded() const;
  void _internal_set_sharded(bool value);

  public:
  // float keep_checkpoint_every_n_hours = 6;
  void clear_keep_checkpoint_every_n_hours() ;
  float keep_checkpoint_every_n_hours() const;
  void set_keep_checkpoint_every_n_hours(float value);

  private:
  float _internal_keep_checkpoint_every_n_hours() const;
  void _internal_set_keep_checkpoint_every_n_hours(float value);

  public:
  // .tensorflow.SaverDef.CheckpointFormatVersion version = 7;
  void clear_version() ;
  ::tensorflow::SaverDef_CheckpointFormatVersion version() const;
  void set_version(::tensorflow::SaverDef_CheckpointFormatVersion value);

  private:
  ::tensorflow::SaverDef_CheckpointFormatVersion _internal_version() const;
  void _internal_set_version(::tensorflow::SaverDef_CheckpointFormatVersion value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.SaverDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      79, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SaverDef& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_tensor_name_;
    ::google::protobuf::internal::ArenaStringPtr save_tensor_name_;
    ::google::protobuf::internal::ArenaStringPtr restore_op_name_;
    ::int32_t max_to_keep_;
    bool sharded_;
    float keep_checkpoint_every_n_hours_;
    int version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SaverDef

// string filename_tensor_name = 1;
inline void SaverDef::clear_filename_tensor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_tensor_name_.ClearToEmpty();
}
inline const std::string& SaverDef::filename_tensor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.filename_tensor_name)
  return _internal_filename_tensor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaverDef::set_filename_tensor_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_tensor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.filename_tensor_name)
}
inline std::string* SaverDef::mutable_filename_tensor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename_tensor_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.SaverDef.filename_tensor_name)
  return _s;
}
inline const std::string& SaverDef::_internal_filename_tensor_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_tensor_name_.Get();
}
inline void SaverDef::_internal_set_filename_tensor_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_tensor_name_.Set(value, GetArena());
}
inline std::string* SaverDef::_internal_mutable_filename_tensor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_tensor_name_.Mutable( GetArena());
}
inline std::string* SaverDef::release_filename_tensor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.SaverDef.filename_tensor_name)
  return _impl_.filename_tensor_name_.Release();
}
inline void SaverDef::set_allocated_filename_tensor_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_tensor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_tensor_name_.IsDefault()) {
          _impl_.filename_tensor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SaverDef.filename_tensor_name)
}

// string save_tensor_name = 2;
inline void SaverDef::clear_save_tensor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.save_tensor_name_.ClearToEmpty();
}
inline const std::string& SaverDef::save_tensor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.save_tensor_name)
  return _internal_save_tensor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaverDef::set_save_tensor_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.save_tensor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.save_tensor_name)
}
inline std::string* SaverDef::mutable_save_tensor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_save_tensor_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.SaverDef.save_tensor_name)
  return _s;
}
inline const std::string& SaverDef::_internal_save_tensor_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.save_tensor_name_.Get();
}
inline void SaverDef::_internal_set_save_tensor_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.save_tensor_name_.Set(value, GetArena());
}
inline std::string* SaverDef::_internal_mutable_save_tensor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.save_tensor_name_.Mutable( GetArena());
}
inline std::string* SaverDef::release_save_tensor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.SaverDef.save_tensor_name)
  return _impl_.save_tensor_name_.Release();
}
inline void SaverDef::set_allocated_save_tensor_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.save_tensor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.save_tensor_name_.IsDefault()) {
          _impl_.save_tensor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SaverDef.save_tensor_name)
}

// string restore_op_name = 3;
inline void SaverDef::clear_restore_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restore_op_name_.ClearToEmpty();
}
inline const std::string& SaverDef::restore_op_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.restore_op_name)
  return _internal_restore_op_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaverDef::set_restore_op_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restore_op_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.restore_op_name)
}
inline std::string* SaverDef::mutable_restore_op_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_restore_op_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.SaverDef.restore_op_name)
  return _s;
}
inline const std::string& SaverDef::_internal_restore_op_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.restore_op_name_.Get();
}
inline void SaverDef::_internal_set_restore_op_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restore_op_name_.Set(value, GetArena());
}
inline std::string* SaverDef::_internal_mutable_restore_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.restore_op_name_.Mutable( GetArena());
}
inline std::string* SaverDef::release_restore_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.SaverDef.restore_op_name)
  return _impl_.restore_op_name_.Release();
}
inline void SaverDef::set_allocated_restore_op_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restore_op_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.restore_op_name_.IsDefault()) {
          _impl_.restore_op_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SaverDef.restore_op_name)
}

// int32 max_to_keep = 4;
inline void SaverDef::clear_max_to_keep() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_to_keep_ = 0;
}
inline ::int32_t SaverDef::max_to_keep() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.max_to_keep)
  return _internal_max_to_keep();
}
inline void SaverDef::set_max_to_keep(::int32_t value) {
  _internal_set_max_to_keep(value);
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.max_to_keep)
}
inline ::int32_t SaverDef::_internal_max_to_keep() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_to_keep_;
}
inline void SaverDef::_internal_set_max_to_keep(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_to_keep_ = value;
}

// bool sharded = 5;
inline void SaverDef::clear_sharded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sharded_ = false;
}
inline bool SaverDef::sharded() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.sharded)
  return _internal_sharded();
}
inline void SaverDef::set_sharded(bool value) {
  _internal_set_sharded(value);
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.sharded)
}
inline bool SaverDef::_internal_sharded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sharded_;
}
inline void SaverDef::_internal_set_sharded(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sharded_ = value;
}

// float keep_checkpoint_every_n_hours = 6;
inline void SaverDef::clear_keep_checkpoint_every_n_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keep_checkpoint_every_n_hours_ = 0;
}
inline float SaverDef::keep_checkpoint_every_n_hours() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.keep_checkpoint_every_n_hours)
  return _internal_keep_checkpoint_every_n_hours();
}
inline void SaverDef::set_keep_checkpoint_every_n_hours(float value) {
  _internal_set_keep_checkpoint_every_n_hours(value);
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.keep_checkpoint_every_n_hours)
}
inline float SaverDef::_internal_keep_checkpoint_every_n_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keep_checkpoint_every_n_hours_;
}
inline void SaverDef::_internal_set_keep_checkpoint_every_n_hours(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keep_checkpoint_every_n_hours_ = value;
}

// .tensorflow.SaverDef.CheckpointFormatVersion version = 7;
inline void SaverDef::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0;
}
inline ::tensorflow::SaverDef_CheckpointFormatVersion SaverDef::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.SaverDef.version)
  return _internal_version();
}
inline void SaverDef::set_version(::tensorflow::SaverDef_CheckpointFormatVersion value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tensorflow.SaverDef.version)
}
inline ::tensorflow::SaverDef_CheckpointFormatVersion SaverDef::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::SaverDef_CheckpointFormatVersion>(_impl_.version_);
}
inline void SaverDef::_internal_set_version(::tensorflow::SaverDef_CheckpointFormatVersion value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::SaverDef_CheckpointFormatVersion> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::SaverDef_CheckpointFormatVersion>() {
  return ::tensorflow::SaverDef_CheckpointFormatVersion_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto_2epb_2eh
