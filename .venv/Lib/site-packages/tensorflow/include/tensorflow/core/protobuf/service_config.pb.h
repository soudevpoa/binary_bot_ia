// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/service_config.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/protobuf/data_service.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto;
namespace tensorflow {
namespace data {
namespace experimental {
class DispatcherConfig;
struct DispatcherConfigDefaultTypeInternal;
PROTOBUF_EXPORT extern DispatcherConfigDefaultTypeInternal _DispatcherConfig_default_instance_;
class WorkerConfig;
struct WorkerConfigDefaultTypeInternal;
PROTOBUF_EXPORT extern WorkerConfigDefaultTypeInternal _WorkerConfig_default_instance_;
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace data {
namespace experimental {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT WorkerConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.data.experimental.WorkerConfig) */ {
 public:
  inline WorkerConfig() : WorkerConfig(nullptr) {}
  ~WorkerConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkerConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorkerConfig(const WorkerConfig& from) : WorkerConfig(nullptr, from) {}
  inline WorkerConfig(WorkerConfig&& from) noexcept
      : WorkerConfig(nullptr, std::move(from)) {}
  inline WorkerConfig& operator=(const WorkerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerConfig& operator=(WorkerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkerConfig* internal_default_instance() {
    return reinterpret_cast<const WorkerConfig*>(
        &_WorkerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(WorkerConfig& a, WorkerConfig& b) { a.Swap(&b); }
  inline void Swap(WorkerConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkerConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<WorkerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorkerConfig& from) { WorkerConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WorkerConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.data.experimental.WorkerConfig"; }

 protected:
  explicit WorkerConfig(::google::protobuf::Arena* arena);
  WorkerConfig(::google::protobuf::Arena* arena, const WorkerConfig& from);
  WorkerConfig(::google::protobuf::Arena* arena, WorkerConfig&& from) noexcept
      : WorkerConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWorkerTagsFieldNumber = 10,
    kProtocolFieldNumber = 2,
    kDispatcherAddressFieldNumber = 3,
    kWorkerAddressFieldNumber = 4,
    kDataTransferProtocolFieldNumber = 7,
    kDataTransferAddressFieldNumber = 8,
    kPortFieldNumber = 1,
    kHeartbeatIntervalMsFieldNumber = 5,
    kDispatcherTimeoutMsFieldNumber = 6,
    kShutdownQuietPeriodMsFieldNumber = 9,
    kCrossTrainerCacheSizeBytesFieldNumber = 11,
    kSnapshotMaxChunkSizeBytesFieldNumber = 12,
    kDataTransferPortFieldNumber = 13,
  };
  // repeated string worker_tags = 10;
  int worker_tags_size() const;
  private:
  int _internal_worker_tags_size() const;

  public:
  void clear_worker_tags() ;
  const std::string& worker_tags(int index) const;
  std::string* mutable_worker_tags(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_worker_tags(int index, Arg_&& value, Args_... args);
  std::string* add_worker_tags();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_worker_tags(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& worker_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_worker_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_worker_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_worker_tags();

  public:
  // string protocol = 2;
  void clear_protocol() ;
  const std::string& protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* value);

  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(
      const std::string& value);
  std::string* _internal_mutable_protocol();

  public:
  // string dispatcher_address = 3;
  void clear_dispatcher_address() ;
  const std::string& dispatcher_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dispatcher_address(Arg_&& arg, Args_... args);
  std::string* mutable_dispatcher_address();
  PROTOBUF_NODISCARD std::string* release_dispatcher_address();
  void set_allocated_dispatcher_address(std::string* value);

  private:
  const std::string& _internal_dispatcher_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dispatcher_address(
      const std::string& value);
  std::string* _internal_mutable_dispatcher_address();

  public:
  // string worker_address = 4;
  void clear_worker_address() ;
  const std::string& worker_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_worker_address(Arg_&& arg, Args_... args);
  std::string* mutable_worker_address();
  PROTOBUF_NODISCARD std::string* release_worker_address();
  void set_allocated_worker_address(std::string* value);

  private:
  const std::string& _internal_worker_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worker_address(
      const std::string& value);
  std::string* _internal_mutable_worker_address();

  public:
  // string data_transfer_protocol = 7;
  void clear_data_transfer_protocol() ;
  const std::string& data_transfer_protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_transfer_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_data_transfer_protocol();
  PROTOBUF_NODISCARD std::string* release_data_transfer_protocol();
  void set_allocated_data_transfer_protocol(std::string* value);

  private:
  const std::string& _internal_data_transfer_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_transfer_protocol(
      const std::string& value);
  std::string* _internal_mutable_data_transfer_protocol();

  public:
  // string data_transfer_address = 8;
  void clear_data_transfer_address() ;
  const std::string& data_transfer_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_transfer_address(Arg_&& arg, Args_... args);
  std::string* mutable_data_transfer_address();
  PROTOBUF_NODISCARD std::string* release_data_transfer_address();
  void set_allocated_data_transfer_address(std::string* value);

  private:
  const std::string& _internal_data_transfer_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_transfer_address(
      const std::string& value);
  std::string* _internal_mutable_data_transfer_address();

  public:
  // int64 port = 1;
  void clear_port() ;
  ::int64_t port() const;
  void set_port(::int64_t value);

  private:
  ::int64_t _internal_port() const;
  void _internal_set_port(::int64_t value);

  public:
  // int64 heartbeat_interval_ms = 5;
  void clear_heartbeat_interval_ms() ;
  ::int64_t heartbeat_interval_ms() const;
  void set_heartbeat_interval_ms(::int64_t value);

  private:
  ::int64_t _internal_heartbeat_interval_ms() const;
  void _internal_set_heartbeat_interval_ms(::int64_t value);

  public:
  // int64 dispatcher_timeout_ms = 6;
  void clear_dispatcher_timeout_ms() ;
  ::int64_t dispatcher_timeout_ms() const;
  void set_dispatcher_timeout_ms(::int64_t value);

  private:
  ::int64_t _internal_dispatcher_timeout_ms() const;
  void _internal_set_dispatcher_timeout_ms(::int64_t value);

  public:
  // int64 shutdown_quiet_period_ms = 9;
  void clear_shutdown_quiet_period_ms() ;
  ::int64_t shutdown_quiet_period_ms() const;
  void set_shutdown_quiet_period_ms(::int64_t value);

  private:
  ::int64_t _internal_shutdown_quiet_period_ms() const;
  void _internal_set_shutdown_quiet_period_ms(::int64_t value);

  public:
  // int64 cross_trainer_cache_size_bytes = 11;
  void clear_cross_trainer_cache_size_bytes() ;
  ::int64_t cross_trainer_cache_size_bytes() const;
  void set_cross_trainer_cache_size_bytes(::int64_t value);

  private:
  ::int64_t _internal_cross_trainer_cache_size_bytes() const;
  void _internal_set_cross_trainer_cache_size_bytes(::int64_t value);

  public:
  // int64 snapshot_max_chunk_size_bytes = 12;
  void clear_snapshot_max_chunk_size_bytes() ;
  ::int64_t snapshot_max_chunk_size_bytes() const;
  void set_snapshot_max_chunk_size_bytes(::int64_t value);

  private:
  ::int64_t _internal_snapshot_max_chunk_size_bytes() const;
  void _internal_set_snapshot_max_chunk_size_bytes(::int64_t value);

  public:
  // int64 data_transfer_port = 13;
  void clear_data_transfer_port() ;
  ::int64_t data_transfer_port() const;
  void set_data_transfer_port(::int64_t value);

  private:
  ::int64_t _internal_data_transfer_port() const;
  void _internal_set_data_transfer_port(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.data.experimental.WorkerConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      152, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorkerConfig& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> worker_tags_;
    ::google::protobuf::internal::ArenaStringPtr protocol_;
    ::google::protobuf::internal::ArenaStringPtr dispatcher_address_;
    ::google::protobuf::internal::ArenaStringPtr worker_address_;
    ::google::protobuf::internal::ArenaStringPtr data_transfer_protocol_;
    ::google::protobuf::internal::ArenaStringPtr data_transfer_address_;
    ::int64_t port_;
    ::int64_t heartbeat_interval_ms_;
    ::int64_t dispatcher_timeout_ms_;
    ::int64_t shutdown_quiet_period_ms_;
    ::int64_t cross_trainer_cache_size_bytes_;
    ::int64_t snapshot_max_chunk_size_bytes_;
    ::int64_t data_transfer_port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DispatcherConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.data.experimental.DispatcherConfig) */ {
 public:
  inline DispatcherConfig() : DispatcherConfig(nullptr) {}
  ~DispatcherConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DispatcherConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline DispatcherConfig(const DispatcherConfig& from) : DispatcherConfig(nullptr, from) {}
  inline DispatcherConfig(DispatcherConfig&& from) noexcept
      : DispatcherConfig(nullptr, std::move(from)) {}
  inline DispatcherConfig& operator=(const DispatcherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DispatcherConfig& operator=(DispatcherConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DispatcherConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DispatcherConfig* internal_default_instance() {
    return reinterpret_cast<const DispatcherConfig*>(
        &_DispatcherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DispatcherConfig& a, DispatcherConfig& b) { a.Swap(&b); }
  inline void Swap(DispatcherConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DispatcherConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DispatcherConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DispatcherConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DispatcherConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DispatcherConfig& from) { DispatcherConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DispatcherConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.data.experimental.DispatcherConfig"; }

 protected:
  explicit DispatcherConfig(::google::protobuf::Arena* arena);
  DispatcherConfig(::google::protobuf::Arena* arena, const DispatcherConfig& from);
  DispatcherConfig(::google::protobuf::Arena* arena, DispatcherConfig&& from) noexcept
      : DispatcherConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWorkerAddressesFieldNumber = 7,
    kProtocolFieldNumber = 2,
    kWorkDirFieldNumber = 3,
    kPortFieldNumber = 1,
    kJobGcCheckIntervalMsFieldNumber = 5,
    kJobGcTimeoutMsFieldNumber = 6,
    kClientTimeoutMsFieldNumber = 8,
    kFaultTolerantModeFieldNumber = 4,
    kGcDynamicShardingJobsFieldNumber = 11,
    kDeploymentModeFieldNumber = 9,
    kWorkerTimeoutMsFieldNumber = 10,
    kWorkerMaxConcurrentSnapshotsFieldNumber = 12,
  };
  // repeated string worker_addresses = 7;
  int worker_addresses_size() const;
  private:
  int _internal_worker_addresses_size() const;

  public:
  void clear_worker_addresses() ;
  const std::string& worker_addresses(int index) const;
  std::string* mutable_worker_addresses(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_worker_addresses(int index, Arg_&& value, Args_... args);
  std::string* add_worker_addresses();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_worker_addresses(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& worker_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_worker_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_worker_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_worker_addresses();

  public:
  // string protocol = 2;
  void clear_protocol() ;
  const std::string& protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* value);

  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(
      const std::string& value);
  std::string* _internal_mutable_protocol();

  public:
  // string work_dir = 3;
  void clear_work_dir() ;
  const std::string& work_dir() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_work_dir(Arg_&& arg, Args_... args);
  std::string* mutable_work_dir();
  PROTOBUF_NODISCARD std::string* release_work_dir();
  void set_allocated_work_dir(std::string* value);

  private:
  const std::string& _internal_work_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_work_dir(
      const std::string& value);
  std::string* _internal_mutable_work_dir();

  public:
  // int64 port = 1;
  void clear_port() ;
  ::int64_t port() const;
  void set_port(::int64_t value);

  private:
  ::int64_t _internal_port() const;
  void _internal_set_port(::int64_t value);

  public:
  // int64 job_gc_check_interval_ms = 5;
  void clear_job_gc_check_interval_ms() ;
  ::int64_t job_gc_check_interval_ms() const;
  void set_job_gc_check_interval_ms(::int64_t value);

  private:
  ::int64_t _internal_job_gc_check_interval_ms() const;
  void _internal_set_job_gc_check_interval_ms(::int64_t value);

  public:
  // int64 job_gc_timeout_ms = 6;
  void clear_job_gc_timeout_ms() ;
  ::int64_t job_gc_timeout_ms() const;
  void set_job_gc_timeout_ms(::int64_t value);

  private:
  ::int64_t _internal_job_gc_timeout_ms() const;
  void _internal_set_job_gc_timeout_ms(::int64_t value);

  public:
  // int64 client_timeout_ms = 8;
  void clear_client_timeout_ms() ;
  ::int64_t client_timeout_ms() const;
  void set_client_timeout_ms(::int64_t value);

  private:
  ::int64_t _internal_client_timeout_ms() const;
  void _internal_set_client_timeout_ms(::int64_t value);

  public:
  // bool fault_tolerant_mode = 4;
  void clear_fault_tolerant_mode() ;
  bool fault_tolerant_mode() const;
  void set_fault_tolerant_mode(bool value);

  private:
  bool _internal_fault_tolerant_mode() const;
  void _internal_set_fault_tolerant_mode(bool value);

  public:
  // bool gc_dynamic_sharding_jobs = 11;
  void clear_gc_dynamic_sharding_jobs() ;
  bool gc_dynamic_sharding_jobs() const;
  void set_gc_dynamic_sharding_jobs(bool value);

  private:
  bool _internal_gc_dynamic_sharding_jobs() const;
  void _internal_set_gc_dynamic_sharding_jobs(bool value);

  public:
  // .tensorflow.data.DeploymentMode deployment_mode = 9;
  void clear_deployment_mode() ;
  ::tensorflow::data::DeploymentMode deployment_mode() const;
  void set_deployment_mode(::tensorflow::data::DeploymentMode value);

  private:
  ::tensorflow::data::DeploymentMode _internal_deployment_mode() const;
  void _internal_set_deployment_mode(::tensorflow::data::DeploymentMode value);

  public:
  // int64 worker_timeout_ms = 10;
  void clear_worker_timeout_ms() ;
  ::int64_t worker_timeout_ms() const;
  void set_worker_timeout_ms(::int64_t value);

  private:
  ::int64_t _internal_worker_timeout_ms() const;
  void _internal_set_worker_timeout_ms(::int64_t value);

  public:
  // int64 worker_max_concurrent_snapshots = 12;
  void clear_worker_max_concurrent_snapshots() ;
  ::int64_t worker_max_concurrent_snapshots() const;
  void set_worker_max_concurrent_snapshots(::int64_t value);

  private:
  ::int64_t _internal_worker_max_concurrent_snapshots() const;
  void _internal_set_worker_max_concurrent_snapshots(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.data.experimental.DispatcherConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      94, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DispatcherConfig& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> worker_addresses_;
    ::google::protobuf::internal::ArenaStringPtr protocol_;
    ::google::protobuf::internal::ArenaStringPtr work_dir_;
    ::int64_t port_;
    ::int64_t job_gc_check_interval_ms_;
    ::int64_t job_gc_timeout_ms_;
    ::int64_t client_timeout_ms_;
    bool fault_tolerant_mode_;
    bool gc_dynamic_sharding_jobs_;
    int deployment_mode_;
    ::int64_t worker_timeout_ms_;
    ::int64_t worker_max_concurrent_snapshots_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DispatcherConfig

// int64 port = 1;
inline void DispatcherConfig::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = ::int64_t{0};
}
inline ::int64_t DispatcherConfig::port() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.port)
  return _internal_port();
}
inline void DispatcherConfig::set_port(::int64_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.port)
}
inline ::int64_t DispatcherConfig::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void DispatcherConfig::_internal_set_port(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// string protocol = 2;
inline void DispatcherConfig::clear_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_.ClearToEmpty();
}
inline const std::string& DispatcherConfig::protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.protocol)
  return _internal_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DispatcherConfig::set_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.protocol)
}
inline std::string* DispatcherConfig::mutable_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.DispatcherConfig.protocol)
  return _s;
}
inline const std::string& DispatcherConfig::_internal_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_.Get();
}
inline void DispatcherConfig::_internal_set_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_.Set(value, GetArena());
}
inline std::string* DispatcherConfig::_internal_mutable_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.protocol_.Mutable( GetArena());
}
inline std::string* DispatcherConfig::release_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.DispatcherConfig.protocol)
  return _impl_.protocol_.Release();
}
inline void DispatcherConfig::set_allocated_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.protocol_.IsDefault()) {
          _impl_.protocol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.DispatcherConfig.protocol)
}

// string work_dir = 3;
inline void DispatcherConfig::clear_work_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.work_dir_.ClearToEmpty();
}
inline const std::string& DispatcherConfig::work_dir() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.work_dir)
  return _internal_work_dir();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DispatcherConfig::set_work_dir(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.work_dir_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.work_dir)
}
inline std::string* DispatcherConfig::mutable_work_dir() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_work_dir();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.DispatcherConfig.work_dir)
  return _s;
}
inline const std::string& DispatcherConfig::_internal_work_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.work_dir_.Get();
}
inline void DispatcherConfig::_internal_set_work_dir(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.work_dir_.Set(value, GetArena());
}
inline std::string* DispatcherConfig::_internal_mutable_work_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.work_dir_.Mutable( GetArena());
}
inline std::string* DispatcherConfig::release_work_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.DispatcherConfig.work_dir)
  return _impl_.work_dir_.Release();
}
inline void DispatcherConfig::set_allocated_work_dir(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.work_dir_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.work_dir_.IsDefault()) {
          _impl_.work_dir_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.DispatcherConfig.work_dir)
}

// bool fault_tolerant_mode = 4;
inline void DispatcherConfig::clear_fault_tolerant_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fault_tolerant_mode_ = false;
}
inline bool DispatcherConfig::fault_tolerant_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.fault_tolerant_mode)
  return _internal_fault_tolerant_mode();
}
inline void DispatcherConfig::set_fault_tolerant_mode(bool value) {
  _internal_set_fault_tolerant_mode(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.fault_tolerant_mode)
}
inline bool DispatcherConfig::_internal_fault_tolerant_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fault_tolerant_mode_;
}
inline void DispatcherConfig::_internal_set_fault_tolerant_mode(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fault_tolerant_mode_ = value;
}

// repeated string worker_addresses = 7;
inline int DispatcherConfig::_internal_worker_addresses_size() const {
  return _internal_worker_addresses().size();
}
inline int DispatcherConfig::worker_addresses_size() const {
  return _internal_worker_addresses_size();
}
inline void DispatcherConfig::clear_worker_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_addresses_.Clear();
}
inline std::string* DispatcherConfig::add_worker_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_worker_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.data.experimental.DispatcherConfig.worker_addresses)
  return _s;
}
inline const std::string& DispatcherConfig::worker_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.worker_addresses)
  return _internal_worker_addresses().Get(index);
}
inline std::string* DispatcherConfig::mutable_worker_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.DispatcherConfig.worker_addresses)
  return _internal_mutable_worker_addresses()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void DispatcherConfig::set_worker_addresses(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_worker_addresses()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.worker_addresses)
}
template <typename Arg_, typename... Args_>
inline void DispatcherConfig::add_worker_addresses(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_worker_addresses(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.data.experimental.DispatcherConfig.worker_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DispatcherConfig::worker_addresses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.data.experimental.DispatcherConfig.worker_addresses)
  return _internal_worker_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DispatcherConfig::mutable_worker_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.data.experimental.DispatcherConfig.worker_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_worker_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DispatcherConfig::_internal_worker_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.worker_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DispatcherConfig::_internal_mutable_worker_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.worker_addresses_;
}

// .tensorflow.data.DeploymentMode deployment_mode = 9;
inline void DispatcherConfig::clear_deployment_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deployment_mode_ = 0;
}
inline ::tensorflow::data::DeploymentMode DispatcherConfig::deployment_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.deployment_mode)
  return _internal_deployment_mode();
}
inline void DispatcherConfig::set_deployment_mode(::tensorflow::data::DeploymentMode value) {
  _internal_set_deployment_mode(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.deployment_mode)
}
inline ::tensorflow::data::DeploymentMode DispatcherConfig::_internal_deployment_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::data::DeploymentMode>(_impl_.deployment_mode_);
}
inline void DispatcherConfig::_internal_set_deployment_mode(::tensorflow::data::DeploymentMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deployment_mode_ = value;
}

// int64 job_gc_check_interval_ms = 5;
inline void DispatcherConfig::clear_job_gc_check_interval_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_gc_check_interval_ms_ = ::int64_t{0};
}
inline ::int64_t DispatcherConfig::job_gc_check_interval_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.job_gc_check_interval_ms)
  return _internal_job_gc_check_interval_ms();
}
inline void DispatcherConfig::set_job_gc_check_interval_ms(::int64_t value) {
  _internal_set_job_gc_check_interval_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.job_gc_check_interval_ms)
}
inline ::int64_t DispatcherConfig::_internal_job_gc_check_interval_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_gc_check_interval_ms_;
}
inline void DispatcherConfig::_internal_set_job_gc_check_interval_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_gc_check_interval_ms_ = value;
}

// int64 job_gc_timeout_ms = 6;
inline void DispatcherConfig::clear_job_gc_timeout_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_gc_timeout_ms_ = ::int64_t{0};
}
inline ::int64_t DispatcherConfig::job_gc_timeout_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.job_gc_timeout_ms)
  return _internal_job_gc_timeout_ms();
}
inline void DispatcherConfig::set_job_gc_timeout_ms(::int64_t value) {
  _internal_set_job_gc_timeout_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.job_gc_timeout_ms)
}
inline ::int64_t DispatcherConfig::_internal_job_gc_timeout_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_gc_timeout_ms_;
}
inline void DispatcherConfig::_internal_set_job_gc_timeout_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_gc_timeout_ms_ = value;
}

// bool gc_dynamic_sharding_jobs = 11;
inline void DispatcherConfig::clear_gc_dynamic_sharding_jobs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gc_dynamic_sharding_jobs_ = false;
}
inline bool DispatcherConfig::gc_dynamic_sharding_jobs() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.gc_dynamic_sharding_jobs)
  return _internal_gc_dynamic_sharding_jobs();
}
inline void DispatcherConfig::set_gc_dynamic_sharding_jobs(bool value) {
  _internal_set_gc_dynamic_sharding_jobs(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.gc_dynamic_sharding_jobs)
}
inline bool DispatcherConfig::_internal_gc_dynamic_sharding_jobs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gc_dynamic_sharding_jobs_;
}
inline void DispatcherConfig::_internal_set_gc_dynamic_sharding_jobs(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gc_dynamic_sharding_jobs_ = value;
}

// int64 client_timeout_ms = 8;
inline void DispatcherConfig::clear_client_timeout_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_timeout_ms_ = ::int64_t{0};
}
inline ::int64_t DispatcherConfig::client_timeout_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.client_timeout_ms)
  return _internal_client_timeout_ms();
}
inline void DispatcherConfig::set_client_timeout_ms(::int64_t value) {
  _internal_set_client_timeout_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.client_timeout_ms)
}
inline ::int64_t DispatcherConfig::_internal_client_timeout_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_timeout_ms_;
}
inline void DispatcherConfig::_internal_set_client_timeout_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_timeout_ms_ = value;
}

// int64 worker_timeout_ms = 10;
inline void DispatcherConfig::clear_worker_timeout_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_timeout_ms_ = ::int64_t{0};
}
inline ::int64_t DispatcherConfig::worker_timeout_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.worker_timeout_ms)
  return _internal_worker_timeout_ms();
}
inline void DispatcherConfig::set_worker_timeout_ms(::int64_t value) {
  _internal_set_worker_timeout_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.worker_timeout_ms)
}
inline ::int64_t DispatcherConfig::_internal_worker_timeout_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.worker_timeout_ms_;
}
inline void DispatcherConfig::_internal_set_worker_timeout_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_timeout_ms_ = value;
}

// int64 worker_max_concurrent_snapshots = 12;
inline void DispatcherConfig::clear_worker_max_concurrent_snapshots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_max_concurrent_snapshots_ = ::int64_t{0};
}
inline ::int64_t DispatcherConfig::worker_max_concurrent_snapshots() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.DispatcherConfig.worker_max_concurrent_snapshots)
  return _internal_worker_max_concurrent_snapshots();
}
inline void DispatcherConfig::set_worker_max_concurrent_snapshots(::int64_t value) {
  _internal_set_worker_max_concurrent_snapshots(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.DispatcherConfig.worker_max_concurrent_snapshots)
}
inline ::int64_t DispatcherConfig::_internal_worker_max_concurrent_snapshots() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.worker_max_concurrent_snapshots_;
}
inline void DispatcherConfig::_internal_set_worker_max_concurrent_snapshots(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_max_concurrent_snapshots_ = value;
}

// -------------------------------------------------------------------

// WorkerConfig

// int64 port = 1;
inline void WorkerConfig::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = ::int64_t{0};
}
inline ::int64_t WorkerConfig::port() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.port)
  return _internal_port();
}
inline void WorkerConfig::set_port(::int64_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.port)
}
inline ::int64_t WorkerConfig::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void WorkerConfig::_internal_set_port(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// string protocol = 2;
inline void WorkerConfig::clear_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_.ClearToEmpty();
}
inline const std::string& WorkerConfig::protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.protocol)
  return _internal_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkerConfig::set_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.protocol)
}
inline std::string* WorkerConfig::mutable_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.WorkerConfig.protocol)
  return _s;
}
inline const std::string& WorkerConfig::_internal_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_.Get();
}
inline void WorkerConfig::_internal_set_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_.Set(value, GetArena());
}
inline std::string* WorkerConfig::_internal_mutable_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.protocol_.Mutable( GetArena());
}
inline std::string* WorkerConfig::release_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.WorkerConfig.protocol)
  return _impl_.protocol_.Release();
}
inline void WorkerConfig::set_allocated_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.protocol_.IsDefault()) {
          _impl_.protocol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.WorkerConfig.protocol)
}

// string dispatcher_address = 3;
inline void WorkerConfig::clear_dispatcher_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dispatcher_address_.ClearToEmpty();
}
inline const std::string& WorkerConfig::dispatcher_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.dispatcher_address)
  return _internal_dispatcher_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkerConfig::set_dispatcher_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dispatcher_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.dispatcher_address)
}
inline std::string* WorkerConfig::mutable_dispatcher_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dispatcher_address();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.WorkerConfig.dispatcher_address)
  return _s;
}
inline const std::string& WorkerConfig::_internal_dispatcher_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dispatcher_address_.Get();
}
inline void WorkerConfig::_internal_set_dispatcher_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dispatcher_address_.Set(value, GetArena());
}
inline std::string* WorkerConfig::_internal_mutable_dispatcher_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dispatcher_address_.Mutable( GetArena());
}
inline std::string* WorkerConfig::release_dispatcher_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.WorkerConfig.dispatcher_address)
  return _impl_.dispatcher_address_.Release();
}
inline void WorkerConfig::set_allocated_dispatcher_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dispatcher_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dispatcher_address_.IsDefault()) {
          _impl_.dispatcher_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.WorkerConfig.dispatcher_address)
}

// string worker_address = 4;
inline void WorkerConfig::clear_worker_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_address_.ClearToEmpty();
}
inline const std::string& WorkerConfig::worker_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.worker_address)
  return _internal_worker_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkerConfig::set_worker_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.worker_address)
}
inline std::string* WorkerConfig::mutable_worker_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_worker_address();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.WorkerConfig.worker_address)
  return _s;
}
inline const std::string& WorkerConfig::_internal_worker_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.worker_address_.Get();
}
inline void WorkerConfig::_internal_set_worker_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_address_.Set(value, GetArena());
}
inline std::string* WorkerConfig::_internal_mutable_worker_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.worker_address_.Mutable( GetArena());
}
inline std::string* WorkerConfig::release_worker_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.WorkerConfig.worker_address)
  return _impl_.worker_address_.Release();
}
inline void WorkerConfig::set_allocated_worker_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.worker_address_.IsDefault()) {
          _impl_.worker_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.WorkerConfig.worker_address)
}

// repeated string worker_tags = 10;
inline int WorkerConfig::_internal_worker_tags_size() const {
  return _internal_worker_tags().size();
}
inline int WorkerConfig::worker_tags_size() const {
  return _internal_worker_tags_size();
}
inline void WorkerConfig::clear_worker_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_tags_.Clear();
}
inline std::string* WorkerConfig::add_worker_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_worker_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.data.experimental.WorkerConfig.worker_tags)
  return _s;
}
inline const std::string& WorkerConfig::worker_tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.worker_tags)
  return _internal_worker_tags().Get(index);
}
inline std::string* WorkerConfig::mutable_worker_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.WorkerConfig.worker_tags)
  return _internal_mutable_worker_tags()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void WorkerConfig::set_worker_tags(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_worker_tags()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.worker_tags)
}
template <typename Arg_, typename... Args_>
inline void WorkerConfig::add_worker_tags(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_worker_tags(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.data.experimental.WorkerConfig.worker_tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WorkerConfig::worker_tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.data.experimental.WorkerConfig.worker_tags)
  return _internal_worker_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WorkerConfig::mutable_worker_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.data.experimental.WorkerConfig.worker_tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_worker_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WorkerConfig::_internal_worker_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.worker_tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WorkerConfig::_internal_mutable_worker_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.worker_tags_;
}

// int64 heartbeat_interval_ms = 5;
inline void WorkerConfig::clear_heartbeat_interval_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heartbeat_interval_ms_ = ::int64_t{0};
}
inline ::int64_t WorkerConfig::heartbeat_interval_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.heartbeat_interval_ms)
  return _internal_heartbeat_interval_ms();
}
inline void WorkerConfig::set_heartbeat_interval_ms(::int64_t value) {
  _internal_set_heartbeat_interval_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.heartbeat_interval_ms)
}
inline ::int64_t WorkerConfig::_internal_heartbeat_interval_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heartbeat_interval_ms_;
}
inline void WorkerConfig::_internal_set_heartbeat_interval_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heartbeat_interval_ms_ = value;
}

// int64 dispatcher_timeout_ms = 6;
inline void WorkerConfig::clear_dispatcher_timeout_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dispatcher_timeout_ms_ = ::int64_t{0};
}
inline ::int64_t WorkerConfig::dispatcher_timeout_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.dispatcher_timeout_ms)
  return _internal_dispatcher_timeout_ms();
}
inline void WorkerConfig::set_dispatcher_timeout_ms(::int64_t value) {
  _internal_set_dispatcher_timeout_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.dispatcher_timeout_ms)
}
inline ::int64_t WorkerConfig::_internal_dispatcher_timeout_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dispatcher_timeout_ms_;
}
inline void WorkerConfig::_internal_set_dispatcher_timeout_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dispatcher_timeout_ms_ = value;
}

// string data_transfer_protocol = 7;
inline void WorkerConfig::clear_data_transfer_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_protocol_.ClearToEmpty();
}
inline const std::string& WorkerConfig::data_transfer_protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.data_transfer_protocol)
  return _internal_data_transfer_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkerConfig::set_data_transfer_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.data_transfer_protocol)
}
inline std::string* WorkerConfig::mutable_data_transfer_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_transfer_protocol();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.WorkerConfig.data_transfer_protocol)
  return _s;
}
inline const std::string& WorkerConfig::_internal_data_transfer_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_transfer_protocol_.Get();
}
inline void WorkerConfig::_internal_set_data_transfer_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_protocol_.Set(value, GetArena());
}
inline std::string* WorkerConfig::_internal_mutable_data_transfer_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_transfer_protocol_.Mutable( GetArena());
}
inline std::string* WorkerConfig::release_data_transfer_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.WorkerConfig.data_transfer_protocol)
  return _impl_.data_transfer_protocol_.Release();
}
inline void WorkerConfig::set_allocated_data_transfer_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_protocol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_transfer_protocol_.IsDefault()) {
          _impl_.data_transfer_protocol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.WorkerConfig.data_transfer_protocol)
}

// int64 data_transfer_port = 13;
inline void WorkerConfig::clear_data_transfer_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_port_ = ::int64_t{0};
}
inline ::int64_t WorkerConfig::data_transfer_port() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.data_transfer_port)
  return _internal_data_transfer_port();
}
inline void WorkerConfig::set_data_transfer_port(::int64_t value) {
  _internal_set_data_transfer_port(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.data_transfer_port)
}
inline ::int64_t WorkerConfig::_internal_data_transfer_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_transfer_port_;
}
inline void WorkerConfig::_internal_set_data_transfer_port(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_port_ = value;
}

// string data_transfer_address = 8;
inline void WorkerConfig::clear_data_transfer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_address_.ClearToEmpty();
}
inline const std::string& WorkerConfig::data_transfer_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.data_transfer_address)
  return _internal_data_transfer_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkerConfig::set_data_transfer_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.data_transfer_address)
}
inline std::string* WorkerConfig::mutable_data_transfer_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_transfer_address();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.WorkerConfig.data_transfer_address)
  return _s;
}
inline const std::string& WorkerConfig::_internal_data_transfer_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_transfer_address_.Get();
}
inline void WorkerConfig::_internal_set_data_transfer_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_address_.Set(value, GetArena());
}
inline std::string* WorkerConfig::_internal_mutable_data_transfer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_transfer_address_.Mutable( GetArena());
}
inline std::string* WorkerConfig::release_data_transfer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.WorkerConfig.data_transfer_address)
  return _impl_.data_transfer_address_.Release();
}
inline void WorkerConfig::set_allocated_data_transfer_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transfer_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_transfer_address_.IsDefault()) {
          _impl_.data_transfer_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.WorkerConfig.data_transfer_address)
}

// int64 cross_trainer_cache_size_bytes = 11;
inline void WorkerConfig::clear_cross_trainer_cache_size_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_trainer_cache_size_bytes_ = ::int64_t{0};
}
inline ::int64_t WorkerConfig::cross_trainer_cache_size_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.cross_trainer_cache_size_bytes)
  return _internal_cross_trainer_cache_size_bytes();
}
inline void WorkerConfig::set_cross_trainer_cache_size_bytes(::int64_t value) {
  _internal_set_cross_trainer_cache_size_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.cross_trainer_cache_size_bytes)
}
inline ::int64_t WorkerConfig::_internal_cross_trainer_cache_size_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cross_trainer_cache_size_bytes_;
}
inline void WorkerConfig::_internal_set_cross_trainer_cache_size_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_trainer_cache_size_bytes_ = value;
}

// int64 snapshot_max_chunk_size_bytes = 12;
inline void WorkerConfig::clear_snapshot_max_chunk_size_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_max_chunk_size_bytes_ = ::int64_t{0};
}
inline ::int64_t WorkerConfig::snapshot_max_chunk_size_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.snapshot_max_chunk_size_bytes)
  return _internal_snapshot_max_chunk_size_bytes();
}
inline void WorkerConfig::set_snapshot_max_chunk_size_bytes(::int64_t value) {
  _internal_set_snapshot_max_chunk_size_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.snapshot_max_chunk_size_bytes)
}
inline ::int64_t WorkerConfig::_internal_snapshot_max_chunk_size_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snapshot_max_chunk_size_bytes_;
}
inline void WorkerConfig::_internal_set_snapshot_max_chunk_size_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_max_chunk_size_bytes_ = value;
}

// int64 shutdown_quiet_period_ms = 9;
inline void WorkerConfig::clear_shutdown_quiet_period_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shutdown_quiet_period_ms_ = ::int64_t{0};
}
inline ::int64_t WorkerConfig::shutdown_quiet_period_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.WorkerConfig.shutdown_quiet_period_ms)
  return _internal_shutdown_quiet_period_ms();
}
inline void WorkerConfig::set_shutdown_quiet_period_ms(::int64_t value) {
  _internal_set_shutdown_quiet_period_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.WorkerConfig.shutdown_quiet_period_ms)
}
inline ::int64_t WorkerConfig::_internal_shutdown_quiet_period_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shutdown_quiet_period_ms_;
}
inline void WorkerConfig::_internal_set_shutdown_quiet_period_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shutdown_quiet_period_ms_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_2epb_2eh
