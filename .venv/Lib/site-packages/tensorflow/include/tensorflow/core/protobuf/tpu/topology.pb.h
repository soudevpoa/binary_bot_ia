// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/tpu/topology.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2ftopology_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2ftopology_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2ftpu_2ftopology_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2ftpu_2ftopology_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftopology_2eproto;
namespace tensorflow {
namespace tpu {
class TPUHardwareFeature;
struct TPUHardwareFeatureDefaultTypeInternal;
PROTOBUF_EXPORT extern TPUHardwareFeatureDefaultTypeInternal _TPUHardwareFeature_default_instance_;
class TopologyProto;
struct TopologyProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern TopologyProtoDefaultTypeInternal _TopologyProto_default_instance_;
}  // namespace tpu
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace tpu {
enum TPUHardwareFeature_EmbeddingFeature : int {
  TPUHardwareFeature_EmbeddingFeature_UNSUPPORTED = 0,
  TPUHardwareFeature_EmbeddingFeature_V1 = 1,
  TPUHardwareFeature_EmbeddingFeature_V2 = 2,
  TPUHardwareFeature_EmbeddingFeature_TPUHardwareFeature_EmbeddingFeature_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TPUHardwareFeature_EmbeddingFeature_TPUHardwareFeature_EmbeddingFeature_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool TPUHardwareFeature_EmbeddingFeature_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t TPUHardwareFeature_EmbeddingFeature_internal_data_[];
constexpr TPUHardwareFeature_EmbeddingFeature TPUHardwareFeature_EmbeddingFeature_EmbeddingFeature_MIN = static_cast<TPUHardwareFeature_EmbeddingFeature>(0);
constexpr TPUHardwareFeature_EmbeddingFeature TPUHardwareFeature_EmbeddingFeature_EmbeddingFeature_MAX = static_cast<TPUHardwareFeature_EmbeddingFeature>(2);
constexpr int TPUHardwareFeature_EmbeddingFeature_EmbeddingFeature_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
TPUHardwareFeature_EmbeddingFeature_descriptor();
template <typename T>
const std::string& TPUHardwareFeature_EmbeddingFeature_Name(T value) {
  static_assert(std::is_same<T, TPUHardwareFeature_EmbeddingFeature>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EmbeddingFeature_Name().");
  return TPUHardwareFeature_EmbeddingFeature_Name(static_cast<TPUHardwareFeature_EmbeddingFeature>(value));
}
template <>
inline const std::string& TPUHardwareFeature_EmbeddingFeature_Name(TPUHardwareFeature_EmbeddingFeature value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TPUHardwareFeature_EmbeddingFeature_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TPUHardwareFeature_EmbeddingFeature_Parse(absl::string_view name, TPUHardwareFeature_EmbeddingFeature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TPUHardwareFeature_EmbeddingFeature>(
      TPUHardwareFeature_EmbeddingFeature_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT TPUHardwareFeature final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tpu.TPUHardwareFeature) */ {
 public:
  inline TPUHardwareFeature() : TPUHardwareFeature(nullptr) {}
  ~TPUHardwareFeature() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TPUHardwareFeature(
      ::google::protobuf::internal::ConstantInitialized);

  inline TPUHardwareFeature(const TPUHardwareFeature& from) : TPUHardwareFeature(nullptr, from) {}
  inline TPUHardwareFeature(TPUHardwareFeature&& from) noexcept
      : TPUHardwareFeature(nullptr, std::move(from)) {}
  inline TPUHardwareFeature& operator=(const TPUHardwareFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPUHardwareFeature& operator=(TPUHardwareFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPUHardwareFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPUHardwareFeature* internal_default_instance() {
    return reinterpret_cast<const TPUHardwareFeature*>(
        &_TPUHardwareFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TPUHardwareFeature& a, TPUHardwareFeature& b) { a.Swap(&b); }
  inline void Swap(TPUHardwareFeature* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPUHardwareFeature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPUHardwareFeature* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TPUHardwareFeature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TPUHardwareFeature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TPUHardwareFeature& from) { TPUHardwareFeature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TPUHardwareFeature* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.tpu.TPUHardwareFeature"; }

 protected:
  explicit TPUHardwareFeature(::google::protobuf::Arena* arena);
  TPUHardwareFeature(::google::protobuf::Arena* arena, const TPUHardwareFeature& from);
  TPUHardwareFeature(::google::protobuf::Arena* arena, TPUHardwareFeature&& from) noexcept
      : TPUHardwareFeature(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using EmbeddingFeature = TPUHardwareFeature_EmbeddingFeature;
  static constexpr EmbeddingFeature UNSUPPORTED = TPUHardwareFeature_EmbeddingFeature_UNSUPPORTED;
  static constexpr EmbeddingFeature V1 = TPUHardwareFeature_EmbeddingFeature_V1;
  static constexpr EmbeddingFeature V2 = TPUHardwareFeature_EmbeddingFeature_V2;
  static inline bool EmbeddingFeature_IsValid(int value) {
    return TPUHardwareFeature_EmbeddingFeature_IsValid(value);
  }
  static constexpr EmbeddingFeature EmbeddingFeature_MIN = TPUHardwareFeature_EmbeddingFeature_EmbeddingFeature_MIN;
  static constexpr EmbeddingFeature EmbeddingFeature_MAX = TPUHardwareFeature_EmbeddingFeature_EmbeddingFeature_MAX;
  static constexpr int EmbeddingFeature_ARRAYSIZE = TPUHardwareFeature_EmbeddingFeature_EmbeddingFeature_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* EmbeddingFeature_descriptor() {
    return TPUHardwareFeature_EmbeddingFeature_descriptor();
  }
  template <typename T>
  static inline const std::string& EmbeddingFeature_Name(T value) {
    return TPUHardwareFeature_EmbeddingFeature_Name(value);
  }
  static inline bool EmbeddingFeature_Parse(absl::string_view name, EmbeddingFeature* value) {
    return TPUHardwareFeature_EmbeddingFeature_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kEmbeddingFeatureFieldNumber = 1,
    kNumEmbeddingDevicesPerChipFieldNumber = 2,
  };
  // .tensorflow.tpu.TPUHardwareFeature.EmbeddingFeature embedding_feature = 1;
  void clear_embedding_feature() ;
  ::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature embedding_feature() const;
  void set_embedding_feature(::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature value);

  private:
  ::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature _internal_embedding_feature() const;
  void _internal_set_embedding_feature(::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature value);

  public:
  // int32 num_embedding_devices_per_chip = 2;
  void clear_num_embedding_devices_per_chip() ;
  ::int32_t num_embedding_devices_per_chip() const;
  void set_num_embedding_devices_per_chip(::int32_t value);

  private:
  ::int32_t _internal_num_embedding_devices_per_chip() const;
  void _internal_set_num_embedding_devices_per_chip(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.tpu.TPUHardwareFeature)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TPUHardwareFeature& from_msg);
    int embedding_feature_;
    ::int32_t num_embedding_devices_per_chip_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2ftpu_2ftopology_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT TopologyProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tpu.TopologyProto) */ {
 public:
  inline TopologyProto() : TopologyProto(nullptr) {}
  ~TopologyProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TopologyProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline TopologyProto(const TopologyProto& from) : TopologyProto(nullptr, from) {}
  inline TopologyProto(TopologyProto&& from) noexcept
      : TopologyProto(nullptr, std::move(from)) {}
  inline TopologyProto& operator=(const TopologyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopologyProto& operator=(TopologyProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopologyProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopologyProto* internal_default_instance() {
    return reinterpret_cast<const TopologyProto*>(
        &_TopologyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TopologyProto& a, TopologyProto& b) { a.Swap(&b); }
  inline void Swap(TopologyProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopologyProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopologyProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TopologyProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopologyProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TopologyProto& from) { TopologyProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TopologyProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.tpu.TopologyProto"; }

 protected:
  explicit TopologyProto(::google::protobuf::Arena* arena);
  TopologyProto(::google::protobuf::Arena* arena, const TopologyProto& from);
  TopologyProto(::google::protobuf::Arena* arena, TopologyProto&& from) noexcept
      : TopologyProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMeshShapeFieldNumber = 1,
    kDeviceCoordinatesFieldNumber = 4,
    kTpuHardwareFeatureFieldNumber = 5,
    kNumTasksFieldNumber = 2,
    kNumTpuDevicesPerTaskFieldNumber = 3,
  };
  // repeated int32 mesh_shape = 1;
  int mesh_shape_size() const;
  private:
  int _internal_mesh_shape_size() const;

  public:
  void clear_mesh_shape() ;
  ::int32_t mesh_shape(int index) const;
  void set_mesh_shape(int index, ::int32_t value);
  void add_mesh_shape(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& mesh_shape() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_mesh_shape();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_mesh_shape() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_mesh_shape();

  public:
  // repeated int32 device_coordinates = 4;
  int device_coordinates_size() const;
  private:
  int _internal_device_coordinates_size() const;

  public:
  void clear_device_coordinates() ;
  ::int32_t device_coordinates(int index) const;
  void set_device_coordinates(int index, ::int32_t value);
  void add_device_coordinates(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& device_coordinates() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_device_coordinates();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_device_coordinates() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_device_coordinates();

  public:
  // .tensorflow.tpu.TPUHardwareFeature tpu_hardware_feature = 5;
  bool has_tpu_hardware_feature() const;
  void clear_tpu_hardware_feature() ;
  const ::tensorflow::tpu::TPUHardwareFeature& tpu_hardware_feature() const;
  PROTOBUF_NODISCARD ::tensorflow::tpu::TPUHardwareFeature* release_tpu_hardware_feature();
  ::tensorflow::tpu::TPUHardwareFeature* mutable_tpu_hardware_feature();
  void set_allocated_tpu_hardware_feature(::tensorflow::tpu::TPUHardwareFeature* value);
  void unsafe_arena_set_allocated_tpu_hardware_feature(::tensorflow::tpu::TPUHardwareFeature* value);
  ::tensorflow::tpu::TPUHardwareFeature* unsafe_arena_release_tpu_hardware_feature();

  private:
  const ::tensorflow::tpu::TPUHardwareFeature& _internal_tpu_hardware_feature() const;
  ::tensorflow::tpu::TPUHardwareFeature* _internal_mutable_tpu_hardware_feature();

  public:
  // int32 num_tasks = 2;
  void clear_num_tasks() ;
  ::int32_t num_tasks() const;
  void set_num_tasks(::int32_t value);

  private:
  ::int32_t _internal_num_tasks() const;
  void _internal_set_num_tasks(::int32_t value);

  public:
  // int32 num_tpu_devices_per_task = 3;
  void clear_num_tpu_devices_per_task() ;
  ::int32_t num_tpu_devices_per_task() const;
  void set_num_tpu_devices_per_task(::int32_t value);

  private:
  ::int32_t _internal_num_tpu_devices_per_task() const;
  void _internal_set_num_tpu_devices_per_task(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.tpu.TopologyProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TopologyProto& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> mesh_shape_;
    mutable ::google::protobuf::internal::CachedSize _mesh_shape_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> device_coordinates_;
    mutable ::google::protobuf::internal::CachedSize _device_coordinates_cached_byte_size_;
    ::tensorflow::tpu::TPUHardwareFeature* tpu_hardware_feature_;
    ::int32_t num_tasks_;
    ::int32_t num_tpu_devices_per_task_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2ftpu_2ftopology_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TPUHardwareFeature

// .tensorflow.tpu.TPUHardwareFeature.EmbeddingFeature embedding_feature = 1;
inline void TPUHardwareFeature::clear_embedding_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.embedding_feature_ = 0;
}
inline ::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature TPUHardwareFeature::embedding_feature() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUHardwareFeature.embedding_feature)
  return _internal_embedding_feature();
}
inline void TPUHardwareFeature::set_embedding_feature(::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature value) {
  _internal_set_embedding_feature(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUHardwareFeature.embedding_feature)
}
inline ::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature TPUHardwareFeature::_internal_embedding_feature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature>(_impl_.embedding_feature_);
}
inline void TPUHardwareFeature::_internal_set_embedding_feature(::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.embedding_feature_ = value;
}

// int32 num_embedding_devices_per_chip = 2;
inline void TPUHardwareFeature::clear_num_embedding_devices_per_chip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_embedding_devices_per_chip_ = 0;
}
inline ::int32_t TPUHardwareFeature::num_embedding_devices_per_chip() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TPUHardwareFeature.num_embedding_devices_per_chip)
  return _internal_num_embedding_devices_per_chip();
}
inline void TPUHardwareFeature::set_num_embedding_devices_per_chip(::int32_t value) {
  _internal_set_num_embedding_devices_per_chip(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TPUHardwareFeature.num_embedding_devices_per_chip)
}
inline ::int32_t TPUHardwareFeature::_internal_num_embedding_devices_per_chip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_embedding_devices_per_chip_;
}
inline void TPUHardwareFeature::_internal_set_num_embedding_devices_per_chip(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_embedding_devices_per_chip_ = value;
}

// -------------------------------------------------------------------

// TopologyProto

// repeated int32 mesh_shape = 1;
inline int TopologyProto::_internal_mesh_shape_size() const {
  return _internal_mesh_shape().size();
}
inline int TopologyProto::mesh_shape_size() const {
  return _internal_mesh_shape_size();
}
inline void TopologyProto::clear_mesh_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mesh_shape_.Clear();
}
inline ::int32_t TopologyProto::mesh_shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TopologyProto.mesh_shape)
  return _internal_mesh_shape().Get(index);
}
inline void TopologyProto::set_mesh_shape(int index, ::int32_t value) {
  _internal_mutable_mesh_shape()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TopologyProto.mesh_shape)
}
inline void TopologyProto::add_mesh_shape(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_mesh_shape()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tpu.TopologyProto.mesh_shape)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TopologyProto::mesh_shape() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.tpu.TopologyProto.mesh_shape)
  return _internal_mesh_shape();
}
inline ::google::protobuf::RepeatedField<::int32_t>* TopologyProto::mutable_mesh_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tpu.TopologyProto.mesh_shape)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mesh_shape();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
TopologyProto::_internal_mesh_shape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mesh_shape_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* TopologyProto::_internal_mutable_mesh_shape() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mesh_shape_;
}

// int32 num_tasks = 2;
inline void TopologyProto::clear_num_tasks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tasks_ = 0;
}
inline ::int32_t TopologyProto::num_tasks() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TopologyProto.num_tasks)
  return _internal_num_tasks();
}
inline void TopologyProto::set_num_tasks(::int32_t value) {
  _internal_set_num_tasks(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TopologyProto.num_tasks)
}
inline ::int32_t TopologyProto::_internal_num_tasks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_tasks_;
}
inline void TopologyProto::_internal_set_num_tasks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tasks_ = value;
}

// int32 num_tpu_devices_per_task = 3;
inline void TopologyProto::clear_num_tpu_devices_per_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tpu_devices_per_task_ = 0;
}
inline ::int32_t TopologyProto::num_tpu_devices_per_task() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TopologyProto.num_tpu_devices_per_task)
  return _internal_num_tpu_devices_per_task();
}
inline void TopologyProto::set_num_tpu_devices_per_task(::int32_t value) {
  _internal_set_num_tpu_devices_per_task(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TopologyProto.num_tpu_devices_per_task)
}
inline ::int32_t TopologyProto::_internal_num_tpu_devices_per_task() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_tpu_devices_per_task_;
}
inline void TopologyProto::_internal_set_num_tpu_devices_per_task(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tpu_devices_per_task_ = value;
}

// repeated int32 device_coordinates = 4;
inline int TopologyProto::_internal_device_coordinates_size() const {
  return _internal_device_coordinates().size();
}
inline int TopologyProto::device_coordinates_size() const {
  return _internal_device_coordinates_size();
}
inline void TopologyProto::clear_device_coordinates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_coordinates_.Clear();
}
inline ::int32_t TopologyProto::device_coordinates(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TopologyProto.device_coordinates)
  return _internal_device_coordinates().Get(index);
}
inline void TopologyProto::set_device_coordinates(int index, ::int32_t value) {
  _internal_mutable_device_coordinates()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TopologyProto.device_coordinates)
}
inline void TopologyProto::add_device_coordinates(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_device_coordinates()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tpu.TopologyProto.device_coordinates)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TopologyProto::device_coordinates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.tpu.TopologyProto.device_coordinates)
  return _internal_device_coordinates();
}
inline ::google::protobuf::RepeatedField<::int32_t>* TopologyProto::mutable_device_coordinates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tpu.TopologyProto.device_coordinates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_device_coordinates();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
TopologyProto::_internal_device_coordinates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_coordinates_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* TopologyProto::_internal_mutable_device_coordinates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.device_coordinates_;
}

// .tensorflow.tpu.TPUHardwareFeature tpu_hardware_feature = 5;
inline bool TopologyProto::has_tpu_hardware_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tpu_hardware_feature_ != nullptr);
  return value;
}
inline void TopologyProto::clear_tpu_hardware_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tpu_hardware_feature_ != nullptr) _impl_.tpu_hardware_feature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::tpu::TPUHardwareFeature& TopologyProto::_internal_tpu_hardware_feature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::tpu::TPUHardwareFeature* p = _impl_.tpu_hardware_feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::tpu::TPUHardwareFeature&>(::tensorflow::tpu::_TPUHardwareFeature_default_instance_);
}
inline const ::tensorflow::tpu::TPUHardwareFeature& TopologyProto::tpu_hardware_feature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TopologyProto.tpu_hardware_feature)
  return _internal_tpu_hardware_feature();
}
inline void TopologyProto::unsafe_arena_set_allocated_tpu_hardware_feature(::tensorflow::tpu::TPUHardwareFeature* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tpu_hardware_feature_);
  }
  _impl_.tpu_hardware_feature_ = reinterpret_cast<::tensorflow::tpu::TPUHardwareFeature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TopologyProto.tpu_hardware_feature)
}
inline ::tensorflow::tpu::TPUHardwareFeature* TopologyProto::release_tpu_hardware_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::tpu::TPUHardwareFeature* released = _impl_.tpu_hardware_feature_;
  _impl_.tpu_hardware_feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::tpu::TPUHardwareFeature* TopologyProto::unsafe_arena_release_tpu_hardware_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TopologyProto.tpu_hardware_feature)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::tpu::TPUHardwareFeature* temp = _impl_.tpu_hardware_feature_;
  _impl_.tpu_hardware_feature_ = nullptr;
  return temp;
}
inline ::tensorflow::tpu::TPUHardwareFeature* TopologyProto::_internal_mutable_tpu_hardware_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tpu_hardware_feature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::tpu::TPUHardwareFeature>(GetArena());
    _impl_.tpu_hardware_feature_ = reinterpret_cast<::tensorflow::tpu::TPUHardwareFeature*>(p);
  }
  return _impl_.tpu_hardware_feature_;
}
inline ::tensorflow::tpu::TPUHardwareFeature* TopologyProto::mutable_tpu_hardware_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::tpu::TPUHardwareFeature* _msg = _internal_mutable_tpu_hardware_feature();
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TopologyProto.tpu_hardware_feature)
  return _msg;
}
inline void TopologyProto::set_allocated_tpu_hardware_feature(::tensorflow::tpu::TPUHardwareFeature* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.tpu_hardware_feature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tpu_hardware_feature_ = reinterpret_cast<::tensorflow::tpu::TPUHardwareFeature*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TopologyProto.tpu_hardware_feature)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tpu
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature>() {
  return ::tensorflow::tpu::TPUHardwareFeature_EmbeddingFeature_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2ftopology_2eproto_2epb_2eh
