// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/util/event.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2futil_2fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2futil_2fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/framework/summary.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2fevent_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto;
namespace tensorflow {
class Event;
struct EventDefaultTypeInternal;
PROTOBUF_EXPORT extern EventDefaultTypeInternal _Event_default_instance_;
class LogMessage;
struct LogMessageDefaultTypeInternal;
PROTOBUF_EXPORT extern LogMessageDefaultTypeInternal _LogMessage_default_instance_;
class RequestedExitCode;
struct RequestedExitCodeDefaultTypeInternal;
PROTOBUF_EXPORT extern RequestedExitCodeDefaultTypeInternal _RequestedExitCode_default_instance_;
class SessionLog;
struct SessionLogDefaultTypeInternal;
PROTOBUF_EXPORT extern SessionLogDefaultTypeInternal _SessionLog_default_instance_;
class SourceMetadata;
struct SourceMetadataDefaultTypeInternal;
PROTOBUF_EXPORT extern SourceMetadataDefaultTypeInternal _SourceMetadata_default_instance_;
class TaggedRunMetadata;
struct TaggedRunMetadataDefaultTypeInternal;
PROTOBUF_EXPORT extern TaggedRunMetadataDefaultTypeInternal _TaggedRunMetadata_default_instance_;
class WatchdogConfig;
struct WatchdogConfigDefaultTypeInternal;
PROTOBUF_EXPORT extern WatchdogConfigDefaultTypeInternal _WatchdogConfig_default_instance_;
class WorkerHeartbeatRequest;
struct WorkerHeartbeatRequestDefaultTypeInternal;
PROTOBUF_EXPORT extern WorkerHeartbeatRequestDefaultTypeInternal _WorkerHeartbeatRequest_default_instance_;
class WorkerHeartbeatResponse;
struct WorkerHeartbeatResponseDefaultTypeInternal;
PROTOBUF_EXPORT extern WorkerHeartbeatResponseDefaultTypeInternal _WorkerHeartbeatResponse_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
enum LogMessage_Level : int {
  LogMessage_Level_UNKNOWN = 0,
  LogMessage_Level_DEBUGGING = 10,
  LogMessage_Level_INFO = 20,
  LogMessage_Level_WARN = 30,
  LogMessage_Level_ERROR = 40,
  LogMessage_Level_FATAL = 50,
  LogMessage_Level_LogMessage_Level_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogMessage_Level_LogMessage_Level_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool LogMessage_Level_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t LogMessage_Level_internal_data_[];
constexpr LogMessage_Level LogMessage_Level_Level_MIN = static_cast<LogMessage_Level>(0);
constexpr LogMessage_Level LogMessage_Level_Level_MAX = static_cast<LogMessage_Level>(50);
constexpr int LogMessage_Level_Level_ARRAYSIZE = 50 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
LogMessage_Level_descriptor();
template <typename T>
const std::string& LogMessage_Level_Name(T value) {
  static_assert(std::is_same<T, LogMessage_Level>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Level_Name().");
  return ::google::protobuf::internal::NameOfEnum(LogMessage_Level_descriptor(), value);
}
inline bool LogMessage_Level_Parse(absl::string_view name, LogMessage_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogMessage_Level>(
      LogMessage_Level_descriptor(), name, value);
}
enum SessionLog_SessionStatus : int {
  SessionLog_SessionStatus_STATUS_UNSPECIFIED = 0,
  SessionLog_SessionStatus_START = 1,
  SessionLog_SessionStatus_STOP = 2,
  SessionLog_SessionStatus_CHECKPOINT = 3,
  SessionLog_SessionStatus_SessionLog_SessionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SessionLog_SessionStatus_SessionLog_SessionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool SessionLog_SessionStatus_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t SessionLog_SessionStatus_internal_data_[];
constexpr SessionLog_SessionStatus SessionLog_SessionStatus_SessionStatus_MIN = static_cast<SessionLog_SessionStatus>(0);
constexpr SessionLog_SessionStatus SessionLog_SessionStatus_SessionStatus_MAX = static_cast<SessionLog_SessionStatus>(3);
constexpr int SessionLog_SessionStatus_SessionStatus_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
SessionLog_SessionStatus_descriptor();
template <typename T>
const std::string& SessionLog_SessionStatus_Name(T value) {
  static_assert(std::is_same<T, SessionLog_SessionStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SessionStatus_Name().");
  return SessionLog_SessionStatus_Name(static_cast<SessionLog_SessionStatus>(value));
}
template <>
inline const std::string& SessionLog_SessionStatus_Name(SessionLog_SessionStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SessionLog_SessionStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SessionLog_SessionStatus_Parse(absl::string_view name, SessionLog_SessionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionLog_SessionStatus>(
      SessionLog_SessionStatus_descriptor(), name, value);
}
enum WorkerHealth : int {
  OK = 0,
  RECEIVED_SHUTDOWN_SIGNAL = 1,
  INTERNAL_ERROR = 2,
  SHUTTING_DOWN = 3,
  WorkerHealth_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WorkerHealth_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool WorkerHealth_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t WorkerHealth_internal_data_[];
constexpr WorkerHealth WorkerHealth_MIN = static_cast<WorkerHealth>(0);
constexpr WorkerHealth WorkerHealth_MAX = static_cast<WorkerHealth>(3);
constexpr int WorkerHealth_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
WorkerHealth_descriptor();
template <typename T>
const std::string& WorkerHealth_Name(T value) {
  static_assert(std::is_same<T, WorkerHealth>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WorkerHealth_Name().");
  return WorkerHealth_Name(static_cast<WorkerHealth>(value));
}
template <>
inline const std::string& WorkerHealth_Name(WorkerHealth value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WorkerHealth_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool WorkerHealth_Parse(absl::string_view name, WorkerHealth* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkerHealth>(
      WorkerHealth_descriptor(), name, value);
}
enum WorkerShutdownMode : int {
  DEFAULT = 0,
  NOT_CONFIGURED = 1,
  WAIT_FOR_COORDINATOR = 2,
  SHUTDOWN_AFTER_TIMEOUT = 3,
  WorkerShutdownMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WorkerShutdownMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool WorkerShutdownMode_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t WorkerShutdownMode_internal_data_[];
constexpr WorkerShutdownMode WorkerShutdownMode_MIN = static_cast<WorkerShutdownMode>(0);
constexpr WorkerShutdownMode WorkerShutdownMode_MAX = static_cast<WorkerShutdownMode>(3);
constexpr int WorkerShutdownMode_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
WorkerShutdownMode_descriptor();
template <typename T>
const std::string& WorkerShutdownMode_Name(T value) {
  static_assert(std::is_same<T, WorkerShutdownMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WorkerShutdownMode_Name().");
  return WorkerShutdownMode_Name(static_cast<WorkerShutdownMode>(value));
}
template <>
inline const std::string& WorkerShutdownMode_Name(WorkerShutdownMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WorkerShutdownMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool WorkerShutdownMode_Parse(absl::string_view name, WorkerShutdownMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkerShutdownMode>(
      WorkerShutdownMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT WatchdogConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.WatchdogConfig) */ {
 public:
  inline WatchdogConfig() : WatchdogConfig(nullptr) {}
  ~WatchdogConfig() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WatchdogConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline WatchdogConfig(const WatchdogConfig& from) : WatchdogConfig(nullptr, from) {}
  inline WatchdogConfig(WatchdogConfig&& from) noexcept
      : WatchdogConfig(nullptr, std::move(from)) {}
  inline WatchdogConfig& operator=(const WatchdogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogConfig& operator=(WatchdogConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogConfig* internal_default_instance() {
    return reinterpret_cast<const WatchdogConfig*>(
        &_WatchdogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(WatchdogConfig& a, WatchdogConfig& b) { a.Swap(&b); }
  inline void Swap(WatchdogConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchdogConfig* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<WatchdogConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WatchdogConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WatchdogConfig& from) { WatchdogConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WatchdogConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.WatchdogConfig"; }

 protected:
  explicit WatchdogConfig(::google::protobuf::Arena* arena);
  WatchdogConfig(::google::protobuf::Arena* arena, const WatchdogConfig& from);
  WatchdogConfig(::google::protobuf::Arena* arena, WatchdogConfig&& from) noexcept
      : WatchdogConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeoutMsFieldNumber = 1,
  };
  // int64 timeout_ms = 1;
  void clear_timeout_ms() ;
  ::int64_t timeout_ms() const;
  void set_timeout_ms(::int64_t value);

  private:
  ::int64_t _internal_timeout_ms() const;
  void _internal_set_timeout_ms(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.WatchdogConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WatchdogConfig& from_msg);
    ::int64_t timeout_ms_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT TaggedRunMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.TaggedRunMetadata) */ {
 public:
  inline TaggedRunMetadata() : TaggedRunMetadata(nullptr) {}
  ~TaggedRunMetadata() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaggedRunMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaggedRunMetadata(const TaggedRunMetadata& from) : TaggedRunMetadata(nullptr, from) {}
  inline TaggedRunMetadata(TaggedRunMetadata&& from) noexcept
      : TaggedRunMetadata(nullptr, std::move(from)) {}
  inline TaggedRunMetadata& operator=(const TaggedRunMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaggedRunMetadata& operator=(TaggedRunMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaggedRunMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaggedRunMetadata* internal_default_instance() {
    return reinterpret_cast<const TaggedRunMetadata*>(
        &_TaggedRunMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TaggedRunMetadata& a, TaggedRunMetadata& b) { a.Swap(&b); }
  inline void Swap(TaggedRunMetadata* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaggedRunMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaggedRunMetadata* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TaggedRunMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaggedRunMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaggedRunMetadata& from) { TaggedRunMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaggedRunMetadata* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.TaggedRunMetadata"; }

 protected:
  explicit TaggedRunMetadata(::google::protobuf::Arena* arena);
  TaggedRunMetadata(::google::protobuf::Arena* arena, const TaggedRunMetadata& from);
  TaggedRunMetadata(::google::protobuf::Arena* arena, TaggedRunMetadata&& from) noexcept
      : TaggedRunMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagFieldNumber = 1,
    kRunMetadataFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag() ;
  const std::string& tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* value);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // bytes run_metadata = 2;
  void clear_run_metadata() ;
  const std::string& run_metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_run_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_run_metadata();
  PROTOBUF_NODISCARD std::string* release_run_metadata();
  void set_allocated_run_metadata(std::string* value);

  private:
  const std::string& _internal_run_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_metadata(
      const std::string& value);
  std::string* _internal_mutable_run_metadata();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.TaggedRunMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaggedRunMetadata& from_msg);
    ::google::protobuf::internal::ArenaStringPtr tag_;
    ::google::protobuf::internal::ArenaStringPtr run_metadata_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT SourceMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.SourceMetadata) */ {
 public:
  inline SourceMetadata() : SourceMetadata(nullptr) {}
  ~SourceMetadata() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SourceMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline SourceMetadata(const SourceMetadata& from) : SourceMetadata(nullptr, from) {}
  inline SourceMetadata(SourceMetadata&& from) noexcept
      : SourceMetadata(nullptr, std::move(from)) {}
  inline SourceMetadata& operator=(const SourceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceMetadata& operator=(SourceMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceMetadata* internal_default_instance() {
    return reinterpret_cast<const SourceMetadata*>(
        &_SourceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SourceMetadata& a, SourceMetadata& b) { a.Swap(&b); }
  inline void Swap(SourceMetadata* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceMetadata* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SourceMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SourceMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SourceMetadata& from) { SourceMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SourceMetadata* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.SourceMetadata"; }

 protected:
  explicit SourceMetadata(::google::protobuf::Arena* arena);
  SourceMetadata(::google::protobuf::Arena* arena, const SourceMetadata& from);
  SourceMetadata(::google::protobuf::Arena* arena, SourceMetadata&& from) noexcept
      : SourceMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWriterFieldNumber = 1,
  };
  // string writer = 1;
  void clear_writer() ;
  const std::string& writer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_writer(Arg_&& arg, Args_... args);
  std::string* mutable_writer();
  PROTOBUF_NODISCARD std::string* release_writer();
  void set_allocated_writer(std::string* value);

  private:
  const std::string& _internal_writer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_writer(
      const std::string& value);
  std::string* _internal_mutable_writer();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.SourceMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SourceMetadata& from_msg);
    ::google::protobuf::internal::ArenaStringPtr writer_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT SessionLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.SessionLog) */ {
 public:
  inline SessionLog() : SessionLog(nullptr) {}
  ~SessionLog() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SessionLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline SessionLog(const SessionLog& from) : SessionLog(nullptr, from) {}
  inline SessionLog(SessionLog&& from) noexcept
      : SessionLog(nullptr, std::move(from)) {}
  inline SessionLog& operator=(const SessionLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionLog& operator=(SessionLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionLog* internal_default_instance() {
    return reinterpret_cast<const SessionLog*>(
        &_SessionLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SessionLog& a, SessionLog& b) { a.Swap(&b); }
  inline void Swap(SessionLog* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionLog* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SessionLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SessionLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SessionLog& from) { SessionLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SessionLog* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.SessionLog"; }

 protected:
  explicit SessionLog(::google::protobuf::Arena* arena);
  SessionLog(::google::protobuf::Arena* arena, const SessionLog& from);
  SessionLog(::google::protobuf::Arena* arena, SessionLog&& from) noexcept
      : SessionLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using SessionStatus = SessionLog_SessionStatus;
  static constexpr SessionStatus STATUS_UNSPECIFIED = SessionLog_SessionStatus_STATUS_UNSPECIFIED;
  static constexpr SessionStatus START = SessionLog_SessionStatus_START;
  static constexpr SessionStatus STOP = SessionLog_SessionStatus_STOP;
  static constexpr SessionStatus CHECKPOINT = SessionLog_SessionStatus_CHECKPOINT;
  static inline bool SessionStatus_IsValid(int value) {
    return SessionLog_SessionStatus_IsValid(value);
  }
  static constexpr SessionStatus SessionStatus_MIN = SessionLog_SessionStatus_SessionStatus_MIN;
  static constexpr SessionStatus SessionStatus_MAX = SessionLog_SessionStatus_SessionStatus_MAX;
  static constexpr int SessionStatus_ARRAYSIZE = SessionLog_SessionStatus_SessionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SessionStatus_descriptor() {
    return SessionLog_SessionStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& SessionStatus_Name(T value) {
    return SessionLog_SessionStatus_Name(value);
  }
  static inline bool SessionStatus_Parse(absl::string_view name, SessionStatus* value) {
    return SessionLog_SessionStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kCheckpointPathFieldNumber = 2,
    kMsgFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string checkpoint_path = 2;
  void clear_checkpoint_path() ;
  const std::string& checkpoint_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_checkpoint_path(Arg_&& arg, Args_... args);
  std::string* mutable_checkpoint_path();
  PROTOBUF_NODISCARD std::string* release_checkpoint_path();
  void set_allocated_checkpoint_path(std::string* value);

  private:
  const std::string& _internal_checkpoint_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checkpoint_path(
      const std::string& value);
  std::string* _internal_mutable_checkpoint_path();

  public:
  // string msg = 3;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // .tensorflow.SessionLog.SessionStatus status = 1;
  void clear_status() ;
  ::tensorflow::SessionLog_SessionStatus status() const;
  void set_status(::tensorflow::SessionLog_SessionStatus value);

  private:
  ::tensorflow::SessionLog_SessionStatus _internal_status() const;
  void _internal_set_status(::tensorflow::SessionLog_SessionStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.SessionLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      48, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SessionLog& from_msg);
    ::google::protobuf::internal::ArenaStringPtr checkpoint_path_;
    ::google::protobuf::internal::ArenaStringPtr msg_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT RequestedExitCode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.RequestedExitCode) */ {
 public:
  inline RequestedExitCode() : RequestedExitCode(nullptr) {}
  ~RequestedExitCode() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestedExitCode(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestedExitCode(const RequestedExitCode& from) : RequestedExitCode(nullptr, from) {}
  inline RequestedExitCode(RequestedExitCode&& from) noexcept
      : RequestedExitCode(nullptr, std::move(from)) {}
  inline RequestedExitCode& operator=(const RequestedExitCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestedExitCode& operator=(RequestedExitCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestedExitCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestedExitCode* internal_default_instance() {
    return reinterpret_cast<const RequestedExitCode*>(
        &_RequestedExitCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RequestedExitCode& a, RequestedExitCode& b) { a.Swap(&b); }
  inline void Swap(RequestedExitCode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestedExitCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestedExitCode* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RequestedExitCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestedExitCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestedExitCode& from) { RequestedExitCode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestedExitCode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.RequestedExitCode"; }

 protected:
  explicit RequestedExitCode(::google::protobuf::Arena* arena);
  RequestedExitCode(::google::protobuf::Arena* arena, const RequestedExitCode& from);
  RequestedExitCode(::google::protobuf::Arena* arena, RequestedExitCode&& from) noexcept
      : RequestedExitCode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExitCodeFieldNumber = 1,
  };
  // int32 exit_code = 1;
  void clear_exit_code() ;
  ::int32_t exit_code() const;
  void set_exit_code(::int32_t value);

  private:
  ::int32_t _internal_exit_code() const;
  void _internal_set_exit_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.RequestedExitCode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestedExitCode& from_msg);
    ::int32_t exit_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT LogMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.LogMessage) */ {
 public:
  inline LogMessage() : LogMessage(nullptr) {}
  ~LogMessage() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogMessage(const LogMessage& from) : LogMessage(nullptr, from) {}
  inline LogMessage(LogMessage&& from) noexcept
      : LogMessage(nullptr, std::move(from)) {}
  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMessage& operator=(LogMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogMessage* internal_default_instance() {
    return reinterpret_cast<const LogMessage*>(
        &_LogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LogMessage& a, LogMessage& b) { a.Swap(&b); }
  inline void Swap(LogMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogMessage* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LogMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogMessage& from) { LogMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.LogMessage"; }

 protected:
  explicit LogMessage(::google::protobuf::Arena* arena);
  LogMessage(::google::protobuf::Arena* arena, const LogMessage& from);
  LogMessage(::google::protobuf::Arena* arena, LogMessage&& from) noexcept
      : LogMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Level = LogMessage_Level;
  static constexpr Level UNKNOWN = LogMessage_Level_UNKNOWN;
  static constexpr Level DEBUGGING = LogMessage_Level_DEBUGGING;
  static constexpr Level INFO = LogMessage_Level_INFO;
  static constexpr Level WARN = LogMessage_Level_WARN;
  static constexpr Level ERROR = LogMessage_Level_ERROR;
  static constexpr Level FATAL = LogMessage_Level_FATAL;
  static inline bool Level_IsValid(int value) {
    return LogMessage_Level_IsValid(value);
  }
  static constexpr Level Level_MIN = LogMessage_Level_Level_MIN;
  static constexpr Level Level_MAX = LogMessage_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE = LogMessage_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Level_descriptor() {
    return LogMessage_Level_descriptor();
  }
  template <typename T>
  static inline const std::string& Level_Name(T value) {
    return LogMessage_Level_Name(value);
  }
  static inline bool Level_Parse(absl::string_view name, Level* value) {
    return LogMessage_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .tensorflow.LogMessage.Level level = 1;
  void clear_level() ;
  ::tensorflow::LogMessage_Level level() const;
  void set_level(::tensorflow::LogMessage_Level value);

  private:
  ::tensorflow::LogMessage_Level _internal_level() const;
  void _internal_set_level(::tensorflow::LogMessage_Level value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.LogMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogMessage& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    int level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT WorkerHeartbeatRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.WorkerHeartbeatRequest) */ {
 public:
  inline WorkerHeartbeatRequest() : WorkerHeartbeatRequest(nullptr) {}
  ~WorkerHeartbeatRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkerHeartbeatRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorkerHeartbeatRequest(const WorkerHeartbeatRequest& from) : WorkerHeartbeatRequest(nullptr, from) {}
  inline WorkerHeartbeatRequest(WorkerHeartbeatRequest&& from) noexcept
      : WorkerHeartbeatRequest(nullptr, std::move(from)) {}
  inline WorkerHeartbeatRequest& operator=(const WorkerHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerHeartbeatRequest& operator=(WorkerHeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkerHeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkerHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const WorkerHeartbeatRequest*>(
        &_WorkerHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(WorkerHeartbeatRequest& a, WorkerHeartbeatRequest& b) { a.Swap(&b); }
  inline void Swap(WorkerHeartbeatRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerHeartbeatRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkerHeartbeatRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<WorkerHeartbeatRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkerHeartbeatRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorkerHeartbeatRequest& from) { WorkerHeartbeatRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WorkerHeartbeatRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.WorkerHeartbeatRequest"; }

 protected:
  explicit WorkerHeartbeatRequest(::google::protobuf::Arena* arena);
  WorkerHeartbeatRequest(::google::protobuf::Arena* arena, const WorkerHeartbeatRequest& from);
  WorkerHeartbeatRequest(::google::protobuf::Arena* arena, WorkerHeartbeatRequest&& from) noexcept
      : WorkerHeartbeatRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWatchdogConfigFieldNumber = 2,
    kExitCodeFieldNumber = 3,
    kShutdownModeFieldNumber = 1,
  };
  // .tensorflow.WatchdogConfig watchdog_config = 2;
  bool has_watchdog_config() const;
  void clear_watchdog_config() ;
  const ::tensorflow::WatchdogConfig& watchdog_config() const;
  PROTOBUF_NODISCARD ::tensorflow::WatchdogConfig* release_watchdog_config();
  ::tensorflow::WatchdogConfig* mutable_watchdog_config();
  void set_allocated_watchdog_config(::tensorflow::WatchdogConfig* value);
  void unsafe_arena_set_allocated_watchdog_config(::tensorflow::WatchdogConfig* value);
  ::tensorflow::WatchdogConfig* unsafe_arena_release_watchdog_config();

  private:
  const ::tensorflow::WatchdogConfig& _internal_watchdog_config() const;
  ::tensorflow::WatchdogConfig* _internal_mutable_watchdog_config();

  public:
  // .tensorflow.RequestedExitCode exit_code = 3;
  bool has_exit_code() const;
  void clear_exit_code() ;
  const ::tensorflow::RequestedExitCode& exit_code() const;
  PROTOBUF_NODISCARD ::tensorflow::RequestedExitCode* release_exit_code();
  ::tensorflow::RequestedExitCode* mutable_exit_code();
  void set_allocated_exit_code(::tensorflow::RequestedExitCode* value);
  void unsafe_arena_set_allocated_exit_code(::tensorflow::RequestedExitCode* value);
  ::tensorflow::RequestedExitCode* unsafe_arena_release_exit_code();

  private:
  const ::tensorflow::RequestedExitCode& _internal_exit_code() const;
  ::tensorflow::RequestedExitCode* _internal_mutable_exit_code();

  public:
  // .tensorflow.WorkerShutdownMode shutdown_mode = 1;
  void clear_shutdown_mode() ;
  ::tensorflow::WorkerShutdownMode shutdown_mode() const;
  void set_shutdown_mode(::tensorflow::WorkerShutdownMode value);

  private:
  ::tensorflow::WorkerShutdownMode _internal_shutdown_mode() const;
  void _internal_set_shutdown_mode(::tensorflow::WorkerShutdownMode value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.WorkerHeartbeatRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorkerHeartbeatRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::WatchdogConfig* watchdog_config_;
    ::tensorflow::RequestedExitCode* exit_code_;
    int shutdown_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT Event final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(
      ::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  enum WhatCase {
    kFileVersion = 3,
    kGraphDef = 4,
    kSummary = 5,
    kLogMessage = 6,
    kSessionLog = 7,
    kTaggedRunMetadata = 8,
    kMetaGraphDef = 9,
    WHAT_NOT_SET = 0,
  };
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Event* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  Event(::google::protobuf::Arena* arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceMetadataFieldNumber = 10,
    kWallTimeFieldNumber = 1,
    kStepFieldNumber = 2,
    kFileVersionFieldNumber = 3,
    kGraphDefFieldNumber = 4,
    kSummaryFieldNumber = 5,
    kLogMessageFieldNumber = 6,
    kSessionLogFieldNumber = 7,
    kTaggedRunMetadataFieldNumber = 8,
    kMetaGraphDefFieldNumber = 9,
  };
  // .tensorflow.SourceMetadata source_metadata = 10;
  bool has_source_metadata() const;
  void clear_source_metadata() ;
  const ::tensorflow::SourceMetadata& source_metadata() const;
  PROTOBUF_NODISCARD ::tensorflow::SourceMetadata* release_source_metadata();
  ::tensorflow::SourceMetadata* mutable_source_metadata();
  void set_allocated_source_metadata(::tensorflow::SourceMetadata* value);
  void unsafe_arena_set_allocated_source_metadata(::tensorflow::SourceMetadata* value);
  ::tensorflow::SourceMetadata* unsafe_arena_release_source_metadata();

  private:
  const ::tensorflow::SourceMetadata& _internal_source_metadata() const;
  ::tensorflow::SourceMetadata* _internal_mutable_source_metadata();

  public:
  // double wall_time = 1;
  void clear_wall_time() ;
  double wall_time() const;
  void set_wall_time(double value);

  private:
  double _internal_wall_time() const;
  void _internal_set_wall_time(double value);

  public:
  // int64 step = 2;
  void clear_step() ;
  ::int64_t step() const;
  void set_step(::int64_t value);

  private:
  ::int64_t _internal_step() const;
  void _internal_set_step(::int64_t value);

  public:
  // string file_version = 3;
  bool has_file_version() const;
  void clear_file_version() ;
  const std::string& file_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_version(Arg_&& arg, Args_... args);
  std::string* mutable_file_version();
  PROTOBUF_NODISCARD std::string* release_file_version();
  void set_allocated_file_version(std::string* value);

  private:
  const std::string& _internal_file_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_version(
      const std::string& value);
  std::string* _internal_mutable_file_version();

  public:
  // bytes graph_def = 4;
  bool has_graph_def() const;
  void clear_graph_def() ;
  const std::string& graph_def() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_graph_def(Arg_&& arg, Args_... args);
  std::string* mutable_graph_def();
  PROTOBUF_NODISCARD std::string* release_graph_def();
  void set_allocated_graph_def(std::string* value);

  private:
  const std::string& _internal_graph_def() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_graph_def(
      const std::string& value);
  std::string* _internal_mutable_graph_def();

  public:
  // .tensorflow.Summary summary = 5;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;

  public:
  void clear_summary() ;
  const ::tensorflow::Summary& summary() const;
  PROTOBUF_NODISCARD ::tensorflow::Summary* release_summary();
  ::tensorflow::Summary* mutable_summary();
  void set_allocated_summary(::tensorflow::Summary* value);
  void unsafe_arena_set_allocated_summary(::tensorflow::Summary* value);
  ::tensorflow::Summary* unsafe_arena_release_summary();

  private:
  const ::tensorflow::Summary& _internal_summary() const;
  ::tensorflow::Summary* _internal_mutable_summary();

  public:
  // .tensorflow.LogMessage log_message = 6 [deprecated = true];
  [[deprecated]]  bool has_log_message() const;
  private:
  bool _internal_has_log_message() const;

  public:
  [[deprecated]]  void clear_log_message() ;
  [[deprecated]] const ::tensorflow::LogMessage& log_message() const;
  [[deprecated]] PROTOBUF_NODISCARD ::tensorflow::LogMessage* release_log_message();
  [[deprecated]] ::tensorflow::LogMessage* mutable_log_message();
  [[deprecated]] void set_allocated_log_message(::tensorflow::LogMessage* value);
  [[deprecated]] void unsafe_arena_set_allocated_log_message(::tensorflow::LogMessage* value);
  [[deprecated]] ::tensorflow::LogMessage* unsafe_arena_release_log_message();

  private:
  const ::tensorflow::LogMessage& _internal_log_message() const;
  ::tensorflow::LogMessage* _internal_mutable_log_message();

  public:
  // .tensorflow.SessionLog session_log = 7;
  bool has_session_log() const;
  private:
  bool _internal_has_session_log() const;

  public:
  void clear_session_log() ;
  const ::tensorflow::SessionLog& session_log() const;
  PROTOBUF_NODISCARD ::tensorflow::SessionLog* release_session_log();
  ::tensorflow::SessionLog* mutable_session_log();
  void set_allocated_session_log(::tensorflow::SessionLog* value);
  void unsafe_arena_set_allocated_session_log(::tensorflow::SessionLog* value);
  ::tensorflow::SessionLog* unsafe_arena_release_session_log();

  private:
  const ::tensorflow::SessionLog& _internal_session_log() const;
  ::tensorflow::SessionLog* _internal_mutable_session_log();

  public:
  // .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;
  bool has_tagged_run_metadata() const;
  private:
  bool _internal_has_tagged_run_metadata() const;

  public:
  void clear_tagged_run_metadata() ;
  const ::tensorflow::TaggedRunMetadata& tagged_run_metadata() const;
  PROTOBUF_NODISCARD ::tensorflow::TaggedRunMetadata* release_tagged_run_metadata();
  ::tensorflow::TaggedRunMetadata* mutable_tagged_run_metadata();
  void set_allocated_tagged_run_metadata(::tensorflow::TaggedRunMetadata* value);
  void unsafe_arena_set_allocated_tagged_run_metadata(::tensorflow::TaggedRunMetadata* value);
  ::tensorflow::TaggedRunMetadata* unsafe_arena_release_tagged_run_metadata();

  private:
  const ::tensorflow::TaggedRunMetadata& _internal_tagged_run_metadata() const;
  ::tensorflow::TaggedRunMetadata* _internal_mutable_tagged_run_metadata();

  public:
  // bytes meta_graph_def = 9;
  bool has_meta_graph_def() const;
  void clear_meta_graph_def() ;
  const std::string& meta_graph_def() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_meta_graph_def(Arg_&& arg, Args_... args);
  std::string* mutable_meta_graph_def();
  PROTOBUF_NODISCARD std::string* release_meta_graph_def();
  void set_allocated_meta_graph_def(std::string* value);

  private:
  const std::string& _internal_meta_graph_def() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meta_graph_def(
      const std::string& value);
  std::string* _internal_mutable_meta_graph_def();

  public:
  void clear_what();
  WhatCase what_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.Event)
 private:
  class _Internal;
  void set_has_file_version();
  void set_has_graph_def();
  void set_has_summary();
  void set_has_log_message();
  void set_has_session_log();
  void set_has_tagged_run_metadata();
  void set_has_meta_graph_def();
  inline bool has_what() const;
  inline void clear_has_what();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 5,
      45, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Event& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::SourceMetadata* source_metadata_;
    double wall_time_;
    ::int64_t step_;
    union WhatUnion {
      constexpr WhatUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr file_version_;
      ::google::protobuf::internal::ArenaStringPtr graph_def_;
      ::tensorflow::Summary* summary_;
      ::tensorflow::LogMessage* log_message_;
      ::tensorflow::SessionLog* session_log_;
      ::tensorflow::TaggedRunMetadata* tagged_run_metadata_;
      ::google::protobuf::internal::ArenaStringPtr meta_graph_def_;
    } what_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT WorkerHeartbeatResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.WorkerHeartbeatResponse) */ {
 public:
  inline WorkerHeartbeatResponse() : WorkerHeartbeatResponse(nullptr) {}
  ~WorkerHeartbeatResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkerHeartbeatResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorkerHeartbeatResponse(const WorkerHeartbeatResponse& from) : WorkerHeartbeatResponse(nullptr, from) {}
  inline WorkerHeartbeatResponse(WorkerHeartbeatResponse&& from) noexcept
      : WorkerHeartbeatResponse(nullptr, std::move(from)) {}
  inline WorkerHeartbeatResponse& operator=(const WorkerHeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerHeartbeatResponse& operator=(WorkerHeartbeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkerHeartbeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkerHeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const WorkerHeartbeatResponse*>(
        &_WorkerHeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(WorkerHeartbeatResponse& a, WorkerHeartbeatResponse& b) { a.Swap(&b); }
  inline void Swap(WorkerHeartbeatResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerHeartbeatResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkerHeartbeatResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<WorkerHeartbeatResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkerHeartbeatResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorkerHeartbeatResponse& from) { WorkerHeartbeatResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WorkerHeartbeatResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.WorkerHeartbeatResponse"; }

 protected:
  explicit WorkerHeartbeatResponse(::google::protobuf::Arena* arena);
  WorkerHeartbeatResponse(::google::protobuf::Arena* arena, const WorkerHeartbeatResponse& from);
  WorkerHeartbeatResponse(::google::protobuf::Arena* arena, WorkerHeartbeatResponse&& from) noexcept
      : WorkerHeartbeatResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWorkerLogFieldNumber = 2,
    kHostnameFieldNumber = 3,
    kHealthStatusFieldNumber = 1,
  };
  // repeated .tensorflow.Event worker_log = 2;
  int worker_log_size() const;
  private:
  int _internal_worker_log_size() const;

  public:
  void clear_worker_log() ;
  ::tensorflow::Event* mutable_worker_log(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::Event>* mutable_worker_log();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::Event>& _internal_worker_log() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::Event>* _internal_mutable_worker_log();
  public:
  const ::tensorflow::Event& worker_log(int index) const;
  ::tensorflow::Event* add_worker_log();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::Event>& worker_log() const;
  // string hostname = 3;
  void clear_hostname() ;
  const std::string& hostname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hostname(Arg_&& arg, Args_... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* value);

  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(
      const std::string& value);
  std::string* _internal_mutable_hostname();

  public:
  // .tensorflow.WorkerHealth health_status = 1;
  void clear_health_status() ;
  ::tensorflow::WorkerHealth health_status() const;
  void set_health_status(::tensorflow::WorkerHealth value);

  private:
  ::tensorflow::WorkerHealth _internal_health_status() const;
  void _internal_set_health_status(::tensorflow::WorkerHealth value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.WorkerHeartbeatResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      51, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorkerHeartbeatResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::Event > worker_log_;
    ::google::protobuf::internal::ArenaStringPtr hostname_;
    int health_status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Event

// double wall_time = 1;
inline void Event::clear_wall_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wall_time_ = 0;
}
inline double Event::wall_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.wall_time)
  return _internal_wall_time();
}
inline void Event::set_wall_time(double value) {
  _internal_set_wall_time(value);
  // @@protoc_insertion_point(field_set:tensorflow.Event.wall_time)
}
inline double Event::_internal_wall_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wall_time_;
}
inline void Event::_internal_set_wall_time(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wall_time_ = value;
}

// int64 step = 2;
inline void Event::clear_step() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_ = ::int64_t{0};
}
inline ::int64_t Event::step() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.step)
  return _internal_step();
}
inline void Event::set_step(::int64_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:tensorflow.Event.step)
}
inline ::int64_t Event::_internal_step() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.step_;
}
inline void Event::_internal_set_step(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_ = value;
}

// string file_version = 3;
inline bool Event::has_file_version() const {
  return what_case() == kFileVersion;
}
inline void Event::set_has_file_version() {
  _impl_._oneof_case_[0] = kFileVersion;
}
inline void Event::clear_file_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() == kFileVersion) {
    _impl_.what_.file_version_.Destroy();
    clear_has_what();
  }
}
inline const std::string& Event::file_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.Event.file_version)
  return _internal_file_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_file_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kFileVersion) {
    clear_what();

    set_has_file_version();
    _impl_.what_.file_version_.InitDefault();
  }
  _impl_.what_.file_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.Event.file_version)
}
inline std::string* Event::mutable_file_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_version();
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.file_version)
  return _s;
}
inline const std::string& Event::_internal_file_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (what_case() != kFileVersion) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.what_.file_version_.Get();
}
inline void Event::_internal_set_file_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kFileVersion) {
    clear_what();

    set_has_file_version();
    _impl_.what_.file_version_.InitDefault();
  }
  _impl_.what_.file_version_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_file_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kFileVersion) {
    clear_what();

    set_has_file_version();
    _impl_.what_.file_version_.InitDefault();
  }
  return _impl_.what_.file_version_.Mutable( GetArena());
}
inline std::string* Event::release_file_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.Event.file_version)
  if (what_case() != kFileVersion) {
    return nullptr;
  }
  clear_has_what();
  return _impl_.what_.file_version_.Release();
}
inline void Event::set_allocated_file_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_what()) {
    clear_what();
  }
  if (value != nullptr) {
    set_has_file_version();
    _impl_.what_.file_version_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.file_version)
}

// bytes graph_def = 4;
inline bool Event::has_graph_def() const {
  return what_case() == kGraphDef;
}
inline void Event::set_has_graph_def() {
  _impl_._oneof_case_[0] = kGraphDef;
}
inline void Event::clear_graph_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() == kGraphDef) {
    _impl_.what_.graph_def_.Destroy();
    clear_has_what();
  }
}
inline const std::string& Event::graph_def() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.Event.graph_def)
  return _internal_graph_def();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_graph_def(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kGraphDef) {
    clear_what();

    set_has_graph_def();
    _impl_.what_.graph_def_.InitDefault();
  }
  _impl_.what_.graph_def_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.Event.graph_def)
}
inline std::string* Event::mutable_graph_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_graph_def();
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.graph_def)
  return _s;
}
inline const std::string& Event::_internal_graph_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (what_case() != kGraphDef) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.what_.graph_def_.Get();
}
inline void Event::_internal_set_graph_def(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kGraphDef) {
    clear_what();

    set_has_graph_def();
    _impl_.what_.graph_def_.InitDefault();
  }
  _impl_.what_.graph_def_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_graph_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kGraphDef) {
    clear_what();

    set_has_graph_def();
    _impl_.what_.graph_def_.InitDefault();
  }
  return _impl_.what_.graph_def_.Mutable( GetArena());
}
inline std::string* Event::release_graph_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.Event.graph_def)
  if (what_case() != kGraphDef) {
    return nullptr;
  }
  clear_has_what();
  return _impl_.what_.graph_def_.Release();
}
inline void Event::set_allocated_graph_def(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_what()) {
    clear_what();
  }
  if (value != nullptr) {
    set_has_graph_def();
    _impl_.what_.graph_def_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.graph_def)
}

// .tensorflow.Summary summary = 5;
inline bool Event::has_summary() const {
  return what_case() == kSummary;
}
inline bool Event::_internal_has_summary() const {
  return what_case() == kSummary;
}
inline void Event::set_has_summary() {
  _impl_._oneof_case_[0] = kSummary;
}
inline ::tensorflow::Summary* Event::release_summary() {
  // @@protoc_insertion_point(field_release:tensorflow.Event.summary)
  if (what_case() == kSummary) {
    clear_has_what();
    auto* temp = _impl_.what_.summary_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.what_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::Summary& Event::_internal_summary() const {
  return what_case() == kSummary ? *_impl_.what_.summary_ : reinterpret_cast<::tensorflow::Summary&>(::tensorflow::_Summary_default_instance_);
}
inline const ::tensorflow::Summary& Event::summary() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.Event.summary)
  return _internal_summary();
}
inline ::tensorflow::Summary* Event::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Event.summary)
  if (what_case() == kSummary) {
    clear_has_what();
    auto* temp = _impl_.what_.summary_;
    _impl_.what_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_summary(::tensorflow::Summary* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_what();
  if (value) {
    set_has_summary();
    _impl_.what_.summary_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Event.summary)
}
inline ::tensorflow::Summary* Event::_internal_mutable_summary() {
  if (what_case() != kSummary) {
    clear_what();
    set_has_summary();
    _impl_.what_.summary_ =
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::Summary>(GetArena());
  }
  return _impl_.what_.summary_;
}
inline ::tensorflow::Summary* Event::mutable_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::Summary* _msg = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.summary)
  return _msg;
}

// .tensorflow.LogMessage log_message = 6 [deprecated = true];
inline bool Event::has_log_message() const {
  return what_case() == kLogMessage;
}
inline bool Event::_internal_has_log_message() const {
  return what_case() == kLogMessage;
}
inline void Event::set_has_log_message() {
  _impl_._oneof_case_[0] = kLogMessage;
}
inline void Event::clear_log_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() == kLogMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.what_.log_message_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.what_.log_message_);
    }
    clear_has_what();
  }
}
inline ::tensorflow::LogMessage* Event::release_log_message() {
  // @@protoc_insertion_point(field_release:tensorflow.Event.log_message)
  if (what_case() == kLogMessage) {
    clear_has_what();
    auto* temp = _impl_.what_.log_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.what_.log_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::LogMessage& Event::_internal_log_message() const {
  return what_case() == kLogMessage ? *_impl_.what_.log_message_ : reinterpret_cast<::tensorflow::LogMessage&>(::tensorflow::_LogMessage_default_instance_);
}
inline const ::tensorflow::LogMessage& Event::log_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.Event.log_message)
  return _internal_log_message();
}
inline ::tensorflow::LogMessage* Event::unsafe_arena_release_log_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Event.log_message)
  if (what_case() == kLogMessage) {
    clear_has_what();
    auto* temp = _impl_.what_.log_message_;
    _impl_.what_.log_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_log_message(::tensorflow::LogMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_what();
  if (value) {
    set_has_log_message();
    _impl_.what_.log_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Event.log_message)
}
inline ::tensorflow::LogMessage* Event::_internal_mutable_log_message() {
  if (what_case() != kLogMessage) {
    clear_what();
    set_has_log_message();
    _impl_.what_.log_message_ =
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::LogMessage>(GetArena());
  }
  return _impl_.what_.log_message_;
}
inline ::tensorflow::LogMessage* Event::mutable_log_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::LogMessage* _msg = _internal_mutable_log_message();
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.log_message)
  return _msg;
}

// .tensorflow.SessionLog session_log = 7;
inline bool Event::has_session_log() const {
  return what_case() == kSessionLog;
}
inline bool Event::_internal_has_session_log() const {
  return what_case() == kSessionLog;
}
inline void Event::set_has_session_log() {
  _impl_._oneof_case_[0] = kSessionLog;
}
inline void Event::clear_session_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() == kSessionLog) {
    if (GetArena() == nullptr) {
      delete _impl_.what_.session_log_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.what_.session_log_);
    }
    clear_has_what();
  }
}
inline ::tensorflow::SessionLog* Event::release_session_log() {
  // @@protoc_insertion_point(field_release:tensorflow.Event.session_log)
  if (what_case() == kSessionLog) {
    clear_has_what();
    auto* temp = _impl_.what_.session_log_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.what_.session_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::SessionLog& Event::_internal_session_log() const {
  return what_case() == kSessionLog ? *_impl_.what_.session_log_ : reinterpret_cast<::tensorflow::SessionLog&>(::tensorflow::_SessionLog_default_instance_);
}
inline const ::tensorflow::SessionLog& Event::session_log() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.Event.session_log)
  return _internal_session_log();
}
inline ::tensorflow::SessionLog* Event::unsafe_arena_release_session_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Event.session_log)
  if (what_case() == kSessionLog) {
    clear_has_what();
    auto* temp = _impl_.what_.session_log_;
    _impl_.what_.session_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_session_log(::tensorflow::SessionLog* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_what();
  if (value) {
    set_has_session_log();
    _impl_.what_.session_log_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Event.session_log)
}
inline ::tensorflow::SessionLog* Event::_internal_mutable_session_log() {
  if (what_case() != kSessionLog) {
    clear_what();
    set_has_session_log();
    _impl_.what_.session_log_ =
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::SessionLog>(GetArena());
  }
  return _impl_.what_.session_log_;
}
inline ::tensorflow::SessionLog* Event::mutable_session_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::SessionLog* _msg = _internal_mutable_session_log();
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.session_log)
  return _msg;
}

// .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;
inline bool Event::has_tagged_run_metadata() const {
  return what_case() == kTaggedRunMetadata;
}
inline bool Event::_internal_has_tagged_run_metadata() const {
  return what_case() == kTaggedRunMetadata;
}
inline void Event::set_has_tagged_run_metadata() {
  _impl_._oneof_case_[0] = kTaggedRunMetadata;
}
inline void Event::clear_tagged_run_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() == kTaggedRunMetadata) {
    if (GetArena() == nullptr) {
      delete _impl_.what_.tagged_run_metadata_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.what_.tagged_run_metadata_);
    }
    clear_has_what();
  }
}
inline ::tensorflow::TaggedRunMetadata* Event::release_tagged_run_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.Event.tagged_run_metadata)
  if (what_case() == kTaggedRunMetadata) {
    clear_has_what();
    auto* temp = _impl_.what_.tagged_run_metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.what_.tagged_run_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::TaggedRunMetadata& Event::_internal_tagged_run_metadata() const {
  return what_case() == kTaggedRunMetadata ? *_impl_.what_.tagged_run_metadata_ : reinterpret_cast<::tensorflow::TaggedRunMetadata&>(::tensorflow::_TaggedRunMetadata_default_instance_);
}
inline const ::tensorflow::TaggedRunMetadata& Event::tagged_run_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.Event.tagged_run_metadata)
  return _internal_tagged_run_metadata();
}
inline ::tensorflow::TaggedRunMetadata* Event::unsafe_arena_release_tagged_run_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Event.tagged_run_metadata)
  if (what_case() == kTaggedRunMetadata) {
    clear_has_what();
    auto* temp = _impl_.what_.tagged_run_metadata_;
    _impl_.what_.tagged_run_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_tagged_run_metadata(::tensorflow::TaggedRunMetadata* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_what();
  if (value) {
    set_has_tagged_run_metadata();
    _impl_.what_.tagged_run_metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Event.tagged_run_metadata)
}
inline ::tensorflow::TaggedRunMetadata* Event::_internal_mutable_tagged_run_metadata() {
  if (what_case() != kTaggedRunMetadata) {
    clear_what();
    set_has_tagged_run_metadata();
    _impl_.what_.tagged_run_metadata_ =
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::TaggedRunMetadata>(GetArena());
  }
  return _impl_.what_.tagged_run_metadata_;
}
inline ::tensorflow::TaggedRunMetadata* Event::mutable_tagged_run_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::TaggedRunMetadata* _msg = _internal_mutable_tagged_run_metadata();
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.tagged_run_metadata)
  return _msg;
}

// bytes meta_graph_def = 9;
inline bool Event::has_meta_graph_def() const {
  return what_case() == kMetaGraphDef;
}
inline void Event::set_has_meta_graph_def() {
  _impl_._oneof_case_[0] = kMetaGraphDef;
}
inline void Event::clear_meta_graph_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() == kMetaGraphDef) {
    _impl_.what_.meta_graph_def_.Destroy();
    clear_has_what();
  }
}
inline const std::string& Event::meta_graph_def() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.Event.meta_graph_def)
  return _internal_meta_graph_def();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_meta_graph_def(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kMetaGraphDef) {
    clear_what();

    set_has_meta_graph_def();
    _impl_.what_.meta_graph_def_.InitDefault();
  }
  _impl_.what_.meta_graph_def_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.Event.meta_graph_def)
}
inline std::string* Event::mutable_meta_graph_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_meta_graph_def();
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.meta_graph_def)
  return _s;
}
inline const std::string& Event::_internal_meta_graph_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (what_case() != kMetaGraphDef) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.what_.meta_graph_def_.Get();
}
inline void Event::_internal_set_meta_graph_def(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kMetaGraphDef) {
    clear_what();

    set_has_meta_graph_def();
    _impl_.what_.meta_graph_def_.InitDefault();
  }
  _impl_.what_.meta_graph_def_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_meta_graph_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (what_case() != kMetaGraphDef) {
    clear_what();

    set_has_meta_graph_def();
    _impl_.what_.meta_graph_def_.InitDefault();
  }
  return _impl_.what_.meta_graph_def_.Mutable( GetArena());
}
inline std::string* Event::release_meta_graph_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.Event.meta_graph_def)
  if (what_case() != kMetaGraphDef) {
    return nullptr;
  }
  clear_has_what();
  return _impl_.what_.meta_graph_def_.Release();
}
inline void Event::set_allocated_meta_graph_def(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_what()) {
    clear_what();
  }
  if (value != nullptr) {
    set_has_meta_graph_def();
    _impl_.what_.meta_graph_def_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.meta_graph_def)
}

// .tensorflow.SourceMetadata source_metadata = 10;
inline bool Event::has_source_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_metadata_ != nullptr);
  return value;
}
inline void Event::clear_source_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_metadata_ != nullptr) _impl_.source_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::SourceMetadata& Event::_internal_source_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::SourceMetadata* p = _impl_.source_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::SourceMetadata&>(::tensorflow::_SourceMetadata_default_instance_);
}
inline const ::tensorflow::SourceMetadata& Event::source_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.Event.source_metadata)
  return _internal_source_metadata();
}
inline void Event::unsafe_arena_set_allocated_source_metadata(::tensorflow::SourceMetadata* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_metadata_);
  }
  _impl_.source_metadata_ = reinterpret_cast<::tensorflow::SourceMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Event.source_metadata)
}
inline ::tensorflow::SourceMetadata* Event::release_source_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::SourceMetadata* released = _impl_.source_metadata_;
  _impl_.source_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::SourceMetadata* Event::unsafe_arena_release_source_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.Event.source_metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::SourceMetadata* temp = _impl_.source_metadata_;
  _impl_.source_metadata_ = nullptr;
  return temp;
}
inline ::tensorflow::SourceMetadata* Event::_internal_mutable_source_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::SourceMetadata>(GetArena());
    _impl_.source_metadata_ = reinterpret_cast<::tensorflow::SourceMetadata*>(p);
  }
  return _impl_.source_metadata_;
}
inline ::tensorflow::SourceMetadata* Event::mutable_source_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::SourceMetadata* _msg = _internal_mutable_source_metadata();
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.source_metadata)
  return _msg;
}
inline void Event::set_allocated_source_metadata(::tensorflow::SourceMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.source_metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.source_metadata_ = reinterpret_cast<::tensorflow::SourceMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.source_metadata)
}

inline bool Event::has_what() const {
  return what_case() != WHAT_NOT_SET;
}
inline void Event::clear_has_what() {
  _impl_._oneof_case_[0] = WHAT_NOT_SET;
}
inline Event::WhatCase Event::what_case() const {
  return Event::WhatCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SourceMetadata

// string writer = 1;
inline void SourceMetadata::clear_writer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.writer_.ClearToEmpty();
}
inline const std::string& SourceMetadata::writer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.SourceMetadata.writer)
  return _internal_writer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SourceMetadata::set_writer(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.writer_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.SourceMetadata.writer)
}
inline std::string* SourceMetadata::mutable_writer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_writer();
  // @@protoc_insertion_point(field_mutable:tensorflow.SourceMetadata.writer)
  return _s;
}
inline const std::string& SourceMetadata::_internal_writer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.writer_.Get();
}
inline void SourceMetadata::_internal_set_writer(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.writer_.Set(value, GetArena());
}
inline std::string* SourceMetadata::_internal_mutable_writer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.writer_.Mutable( GetArena());
}
inline std::string* SourceMetadata::release_writer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.SourceMetadata.writer)
  return _impl_.writer_.Release();
}
inline void SourceMetadata::set_allocated_writer(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.writer_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.writer_.IsDefault()) {
          _impl_.writer_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SourceMetadata.writer)
}

// -------------------------------------------------------------------

// LogMessage

// .tensorflow.LogMessage.Level level = 1;
inline void LogMessage::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0;
}
inline ::tensorflow::LogMessage_Level LogMessage::level() const {
  // @@protoc_insertion_point(field_get:tensorflow.LogMessage.level)
  return _internal_level();
}
inline void LogMessage::set_level(::tensorflow::LogMessage_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:tensorflow.LogMessage.level)
}
inline ::tensorflow::LogMessage_Level LogMessage::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::LogMessage_Level>(_impl_.level_);
}
inline void LogMessage::_internal_set_level(::tensorflow::LogMessage_Level value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// string message = 2;
inline void LogMessage::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogMessage::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.LogMessage.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogMessage::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.LogMessage.message)
}
inline std::string* LogMessage::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tensorflow.LogMessage.message)
  return _s;
}
inline const std::string& LogMessage::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void LogMessage::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* LogMessage::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* LogMessage::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.LogMessage.message)
  return _impl_.message_.Release();
}
inline void LogMessage::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.LogMessage.message)
}

// -------------------------------------------------------------------

// SessionLog

// .tensorflow.SessionLog.SessionStatus status = 1;
inline void SessionLog::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::tensorflow::SessionLog_SessionStatus SessionLog::status() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionLog.status)
  return _internal_status();
}
inline void SessionLog::set_status(::tensorflow::SessionLog_SessionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tensorflow.SessionLog.status)
}
inline ::tensorflow::SessionLog_SessionStatus SessionLog::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::SessionLog_SessionStatus>(_impl_.status_);
}
inline void SessionLog::_internal_set_status(::tensorflow::SessionLog_SessionStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string checkpoint_path = 2;
inline void SessionLog::clear_checkpoint_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checkpoint_path_.ClearToEmpty();
}
inline const std::string& SessionLog::checkpoint_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.SessionLog.checkpoint_path)
  return _internal_checkpoint_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionLog::set_checkpoint_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checkpoint_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.SessionLog.checkpoint_path)
}
inline std::string* SessionLog::mutable_checkpoint_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_checkpoint_path();
  // @@protoc_insertion_point(field_mutable:tensorflow.SessionLog.checkpoint_path)
  return _s;
}
inline const std::string& SessionLog::_internal_checkpoint_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.checkpoint_path_.Get();
}
inline void SessionLog::_internal_set_checkpoint_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checkpoint_path_.Set(value, GetArena());
}
inline std::string* SessionLog::_internal_mutable_checkpoint_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.checkpoint_path_.Mutable( GetArena());
}
inline std::string* SessionLog::release_checkpoint_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.SessionLog.checkpoint_path)
  return _impl_.checkpoint_path_.Release();
}
inline void SessionLog::set_allocated_checkpoint_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checkpoint_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.checkpoint_path_.IsDefault()) {
          _impl_.checkpoint_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SessionLog.checkpoint_path)
}

// string msg = 3;
inline void SessionLog::clear_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& SessionLog::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.SessionLog.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionLog::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.SessionLog.msg)
}
inline std::string* SessionLog::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:tensorflow.SessionLog.msg)
  return _s;
}
inline const std::string& SessionLog::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_.Get();
}
inline void SessionLog::_internal_set_msg(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* SessionLog::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* SessionLog::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.SessionLog.msg)
  return _impl_.msg_.Release();
}
inline void SessionLog::set_allocated_msg(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SessionLog.msg)
}

// -------------------------------------------------------------------

// TaggedRunMetadata

// string tag = 1;
inline void TaggedRunMetadata::clear_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& TaggedRunMetadata::tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.TaggedRunMetadata.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaggedRunMetadata::set_tag(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.TaggedRunMetadata.tag)
}
inline std::string* TaggedRunMetadata::mutable_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:tensorflow.TaggedRunMetadata.tag)
  return _s;
}
inline const std::string& TaggedRunMetadata::_internal_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tag_.Get();
}
inline void TaggedRunMetadata::_internal_set_tag(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_.Set(value, GetArena());
}
inline std::string* TaggedRunMetadata::_internal_mutable_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tag_.Mutable( GetArena());
}
inline std::string* TaggedRunMetadata::release_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.TaggedRunMetadata.tag)
  return _impl_.tag_.Release();
}
inline void TaggedRunMetadata::set_allocated_tag(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TaggedRunMetadata.tag)
}

// bytes run_metadata = 2;
inline void TaggedRunMetadata::clear_run_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.run_metadata_.ClearToEmpty();
}
inline const std::string& TaggedRunMetadata::run_metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.TaggedRunMetadata.run_metadata)
  return _internal_run_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaggedRunMetadata::set_run_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.run_metadata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.TaggedRunMetadata.run_metadata)
}
inline std::string* TaggedRunMetadata::mutable_run_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_run_metadata();
  // @@protoc_insertion_point(field_mutable:tensorflow.TaggedRunMetadata.run_metadata)
  return _s;
}
inline const std::string& TaggedRunMetadata::_internal_run_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.run_metadata_.Get();
}
inline void TaggedRunMetadata::_internal_set_run_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.run_metadata_.Set(value, GetArena());
}
inline std::string* TaggedRunMetadata::_internal_mutable_run_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.run_metadata_.Mutable( GetArena());
}
inline std::string* TaggedRunMetadata::release_run_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.TaggedRunMetadata.run_metadata)
  return _impl_.run_metadata_.Release();
}
inline void TaggedRunMetadata::set_allocated_run_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.run_metadata_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.run_metadata_.IsDefault()) {
          _impl_.run_metadata_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TaggedRunMetadata.run_metadata)
}

// -------------------------------------------------------------------

// WatchdogConfig

// int64 timeout_ms = 1;
inline void WatchdogConfig::clear_timeout_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_ms_ = ::int64_t{0};
}
inline ::int64_t WatchdogConfig::timeout_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.WatchdogConfig.timeout_ms)
  return _internal_timeout_ms();
}
inline void WatchdogConfig::set_timeout_ms(::int64_t value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:tensorflow.WatchdogConfig.timeout_ms)
}
inline ::int64_t WatchdogConfig::_internal_timeout_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeout_ms_;
}
inline void WatchdogConfig::_internal_set_timeout_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_ms_ = value;
}

// -------------------------------------------------------------------

// RequestedExitCode

// int32 exit_code = 1;
inline void RequestedExitCode::clear_exit_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exit_code_ = 0;
}
inline ::int32_t RequestedExitCode::exit_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.RequestedExitCode.exit_code)
  return _internal_exit_code();
}
inline void RequestedExitCode::set_exit_code(::int32_t value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:tensorflow.RequestedExitCode.exit_code)
}
inline ::int32_t RequestedExitCode::_internal_exit_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exit_code_;
}
inline void RequestedExitCode::_internal_set_exit_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exit_code_ = value;
}

// -------------------------------------------------------------------

// WorkerHeartbeatRequest

// .tensorflow.WorkerShutdownMode shutdown_mode = 1;
inline void WorkerHeartbeatRequest::clear_shutdown_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shutdown_mode_ = 0;
}
inline ::tensorflow::WorkerShutdownMode WorkerHeartbeatRequest::shutdown_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.WorkerHeartbeatRequest.shutdown_mode)
  return _internal_shutdown_mode();
}
inline void WorkerHeartbeatRequest::set_shutdown_mode(::tensorflow::WorkerShutdownMode value) {
  _internal_set_shutdown_mode(value);
  // @@protoc_insertion_point(field_set:tensorflow.WorkerHeartbeatRequest.shutdown_mode)
}
inline ::tensorflow::WorkerShutdownMode WorkerHeartbeatRequest::_internal_shutdown_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::WorkerShutdownMode>(_impl_.shutdown_mode_);
}
inline void WorkerHeartbeatRequest::_internal_set_shutdown_mode(::tensorflow::WorkerShutdownMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shutdown_mode_ = value;
}

// .tensorflow.WatchdogConfig watchdog_config = 2;
inline bool WorkerHeartbeatRequest::has_watchdog_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.watchdog_config_ != nullptr);
  return value;
}
inline void WorkerHeartbeatRequest::clear_watchdog_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.watchdog_config_ != nullptr) _impl_.watchdog_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::WatchdogConfig& WorkerHeartbeatRequest::_internal_watchdog_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::WatchdogConfig* p = _impl_.watchdog_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::WatchdogConfig&>(::tensorflow::_WatchdogConfig_default_instance_);
}
inline const ::tensorflow::WatchdogConfig& WorkerHeartbeatRequest::watchdog_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.WorkerHeartbeatRequest.watchdog_config)
  return _internal_watchdog_config();
}
inline void WorkerHeartbeatRequest::unsafe_arena_set_allocated_watchdog_config(::tensorflow::WatchdogConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.watchdog_config_);
  }
  _impl_.watchdog_config_ = reinterpret_cast<::tensorflow::WatchdogConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.WorkerHeartbeatRequest.watchdog_config)
}
inline ::tensorflow::WatchdogConfig* WorkerHeartbeatRequest::release_watchdog_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::WatchdogConfig* released = _impl_.watchdog_config_;
  _impl_.watchdog_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::WatchdogConfig* WorkerHeartbeatRequest::unsafe_arena_release_watchdog_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.WorkerHeartbeatRequest.watchdog_config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::WatchdogConfig* temp = _impl_.watchdog_config_;
  _impl_.watchdog_config_ = nullptr;
  return temp;
}
inline ::tensorflow::WatchdogConfig* WorkerHeartbeatRequest::_internal_mutable_watchdog_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.watchdog_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::WatchdogConfig>(GetArena());
    _impl_.watchdog_config_ = reinterpret_cast<::tensorflow::WatchdogConfig*>(p);
  }
  return _impl_.watchdog_config_;
}
inline ::tensorflow::WatchdogConfig* WorkerHeartbeatRequest::mutable_watchdog_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::WatchdogConfig* _msg = _internal_mutable_watchdog_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.WorkerHeartbeatRequest.watchdog_config)
  return _msg;
}
inline void WorkerHeartbeatRequest::set_allocated_watchdog_config(::tensorflow::WatchdogConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.watchdog_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.watchdog_config_ = reinterpret_cast<::tensorflow::WatchdogConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.WorkerHeartbeatRequest.watchdog_config)
}

// .tensorflow.RequestedExitCode exit_code = 3;
inline bool WorkerHeartbeatRequest::has_exit_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exit_code_ != nullptr);
  return value;
}
inline void WorkerHeartbeatRequest::clear_exit_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.exit_code_ != nullptr) _impl_.exit_code_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::RequestedExitCode& WorkerHeartbeatRequest::_internal_exit_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::RequestedExitCode* p = _impl_.exit_code_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::RequestedExitCode&>(::tensorflow::_RequestedExitCode_default_instance_);
}
inline const ::tensorflow::RequestedExitCode& WorkerHeartbeatRequest::exit_code() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.WorkerHeartbeatRequest.exit_code)
  return _internal_exit_code();
}
inline void WorkerHeartbeatRequest::unsafe_arena_set_allocated_exit_code(::tensorflow::RequestedExitCode* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exit_code_);
  }
  _impl_.exit_code_ = reinterpret_cast<::tensorflow::RequestedExitCode*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.WorkerHeartbeatRequest.exit_code)
}
inline ::tensorflow::RequestedExitCode* WorkerHeartbeatRequest::release_exit_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::RequestedExitCode* released = _impl_.exit_code_;
  _impl_.exit_code_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::RequestedExitCode* WorkerHeartbeatRequest::unsafe_arena_release_exit_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.WorkerHeartbeatRequest.exit_code)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::RequestedExitCode* temp = _impl_.exit_code_;
  _impl_.exit_code_ = nullptr;
  return temp;
}
inline ::tensorflow::RequestedExitCode* WorkerHeartbeatRequest::_internal_mutable_exit_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.exit_code_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::RequestedExitCode>(GetArena());
    _impl_.exit_code_ = reinterpret_cast<::tensorflow::RequestedExitCode*>(p);
  }
  return _impl_.exit_code_;
}
inline ::tensorflow::RequestedExitCode* WorkerHeartbeatRequest::mutable_exit_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::RequestedExitCode* _msg = _internal_mutable_exit_code();
  // @@protoc_insertion_point(field_mutable:tensorflow.WorkerHeartbeatRequest.exit_code)
  return _msg;
}
inline void WorkerHeartbeatRequest::set_allocated_exit_code(::tensorflow::RequestedExitCode* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.exit_code_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.exit_code_ = reinterpret_cast<::tensorflow::RequestedExitCode*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.WorkerHeartbeatRequest.exit_code)
}

// -------------------------------------------------------------------

// WorkerHeartbeatResponse

// .tensorflow.WorkerHealth health_status = 1;
inline void WorkerHeartbeatResponse::clear_health_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_ = 0;
}
inline ::tensorflow::WorkerHealth WorkerHeartbeatResponse::health_status() const {
  // @@protoc_insertion_point(field_get:tensorflow.WorkerHeartbeatResponse.health_status)
  return _internal_health_status();
}
inline void WorkerHeartbeatResponse::set_health_status(::tensorflow::WorkerHealth value) {
  _internal_set_health_status(value);
  // @@protoc_insertion_point(field_set:tensorflow.WorkerHeartbeatResponse.health_status)
}
inline ::tensorflow::WorkerHealth WorkerHeartbeatResponse::_internal_health_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::WorkerHealth>(_impl_.health_status_);
}
inline void WorkerHeartbeatResponse::_internal_set_health_status(::tensorflow::WorkerHealth value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_ = value;
}

// repeated .tensorflow.Event worker_log = 2;
inline int WorkerHeartbeatResponse::_internal_worker_log_size() const {
  return _internal_worker_log().size();
}
inline int WorkerHeartbeatResponse::worker_log_size() const {
  return _internal_worker_log_size();
}
inline void WorkerHeartbeatResponse::clear_worker_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_log_.Clear();
}
inline ::tensorflow::Event* WorkerHeartbeatResponse::mutable_worker_log(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.WorkerHeartbeatResponse.worker_log)
  return _internal_mutable_worker_log()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::Event>* WorkerHeartbeatResponse::mutable_worker_log()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.WorkerHeartbeatResponse.worker_log)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_worker_log();
}
inline const ::tensorflow::Event& WorkerHeartbeatResponse::worker_log(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.WorkerHeartbeatResponse.worker_log)
  return _internal_worker_log().Get(index);
}
inline ::tensorflow::Event* WorkerHeartbeatResponse::add_worker_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::Event* _add = _internal_mutable_worker_log()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.WorkerHeartbeatResponse.worker_log)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::Event>& WorkerHeartbeatResponse::worker_log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.WorkerHeartbeatResponse.worker_log)
  return _internal_worker_log();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::Event>&
WorkerHeartbeatResponse::_internal_worker_log() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.worker_log_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::Event>*
WorkerHeartbeatResponse::_internal_mutable_worker_log() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.worker_log_;
}

// string hostname = 3;
inline void WorkerHeartbeatResponse::clear_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& WorkerHeartbeatResponse::hostname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.WorkerHeartbeatResponse.hostname)
  return _internal_hostname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkerHeartbeatResponse::set_hostname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.WorkerHeartbeatResponse.hostname)
}
inline std::string* WorkerHeartbeatResponse::mutable_hostname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:tensorflow.WorkerHeartbeatResponse.hostname)
  return _s;
}
inline const std::string& WorkerHeartbeatResponse::_internal_hostname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hostname_.Get();
}
inline void WorkerHeartbeatResponse::_internal_set_hostname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.Set(value, GetArena());
}
inline std::string* WorkerHeartbeatResponse::_internal_mutable_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hostname_.Mutable( GetArena());
}
inline std::string* WorkerHeartbeatResponse::release_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.WorkerHeartbeatResponse.hostname)
  return _impl_.hostname_.Release();
}
inline void WorkerHeartbeatResponse::set_allocated_hostname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hostname_.IsDefault()) {
          _impl_.hostname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.WorkerHeartbeatResponse.hostname)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::LogMessage_Level> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::LogMessage_Level>() {
  return ::tensorflow::LogMessage_Level_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::SessionLog_SessionStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::SessionLog_SessionStatus>() {
  return ::tensorflow::SessionLog_SessionStatus_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::WorkerHealth> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::WorkerHealth>() {
  return ::tensorflow::WorkerHealth_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::WorkerShutdownMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::WorkerShutdownMode>() {
  return ::tensorflow::WorkerShutdownMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2futil_2fevent_2eproto_2epb_2eh
