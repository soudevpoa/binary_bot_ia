// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/python/framework/kythe_metadata.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto;
namespace tensorflow {
class GeneratedCodeInfo;
struct GeneratedCodeInfoDefaultTypeInternal;
PROTOBUF_EXPORT extern GeneratedCodeInfoDefaultTypeInternal _GeneratedCodeInfo_default_instance_;
class MappingRule;
struct MappingRuleDefaultTypeInternal;
PROTOBUF_EXPORT extern MappingRuleDefaultTypeInternal _MappingRule_default_instance_;
class VName;
struct VNameDefaultTypeInternal;
PROTOBUF_EXPORT extern VNameDefaultTypeInternal _VName_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
enum GeneratedCodeInfo_Type : int {
  GeneratedCodeInfo_Type_NONE = 0,
  GeneratedCodeInfo_Type_KYTHE0 = 1,
  GeneratedCodeInfo_Type_GeneratedCodeInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GeneratedCodeInfo_Type_GeneratedCodeInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool GeneratedCodeInfo_Type_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t GeneratedCodeInfo_Type_internal_data_[];
constexpr GeneratedCodeInfo_Type GeneratedCodeInfo_Type_Type_MIN = static_cast<GeneratedCodeInfo_Type>(0);
constexpr GeneratedCodeInfo_Type GeneratedCodeInfo_Type_Type_MAX = static_cast<GeneratedCodeInfo_Type>(1);
constexpr int GeneratedCodeInfo_Type_Type_ARRAYSIZE = 1 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
GeneratedCodeInfo_Type_descriptor();
template <typename T>
const std::string& GeneratedCodeInfo_Type_Name(T value) {
  static_assert(std::is_same<T, GeneratedCodeInfo_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return GeneratedCodeInfo_Type_Name(static_cast<GeneratedCodeInfo_Type>(value));
}
template <>
inline const std::string& GeneratedCodeInfo_Type_Name(GeneratedCodeInfo_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GeneratedCodeInfo_Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GeneratedCodeInfo_Type_Parse(absl::string_view name, GeneratedCodeInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeneratedCodeInfo_Type>(
      GeneratedCodeInfo_Type_descriptor(), name, value);
}
enum MappingRule_Type : int {
  MappingRule_Type_NONE = 0,
  MappingRule_Type_NOP = 1,
  MappingRule_Type_ANCHOR_DEFINES = 2,
  MappingRule_Type_ANCHOR_ANCHOR = 3,
  MappingRule_Type_MappingRule_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MappingRule_Type_MappingRule_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool MappingRule_Type_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t MappingRule_Type_internal_data_[];
constexpr MappingRule_Type MappingRule_Type_Type_MIN = static_cast<MappingRule_Type>(0);
constexpr MappingRule_Type MappingRule_Type_Type_MAX = static_cast<MappingRule_Type>(3);
constexpr int MappingRule_Type_Type_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
MappingRule_Type_descriptor();
template <typename T>
const std::string& MappingRule_Type_Name(T value) {
  static_assert(std::is_same<T, MappingRule_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return MappingRule_Type_Name(static_cast<MappingRule_Type>(value));
}
template <>
inline const std::string& MappingRule_Type_Name(MappingRule_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MappingRule_Type_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MappingRule_Type_Parse(absl::string_view name, MappingRule_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MappingRule_Type>(
      MappingRule_Type_descriptor(), name, value);
}
enum MappingRule_Semantic : int {
  MappingRule_Semantic_SEMA_NONE = 0,
  MappingRule_Semantic_SEMA_WRITE = 1,
  MappingRule_Semantic_SEMA_READ_WRITE = 2,
  MappingRule_Semantic_MappingRule_Semantic_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MappingRule_Semantic_MappingRule_Semantic_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT bool MappingRule_Semantic_IsValid(int value);
PROTOBUF_EXPORT extern const uint32_t MappingRule_Semantic_internal_data_[];
constexpr MappingRule_Semantic MappingRule_Semantic_Semantic_MIN = static_cast<MappingRule_Semantic>(0);
constexpr MappingRule_Semantic MappingRule_Semantic_Semantic_MAX = static_cast<MappingRule_Semantic>(2);
constexpr int MappingRule_Semantic_Semantic_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor*
MappingRule_Semantic_descriptor();
template <typename T>
const std::string& MappingRule_Semantic_Name(T value) {
  static_assert(std::is_same<T, MappingRule_Semantic>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Semantic_Name().");
  return MappingRule_Semantic_Name(static_cast<MappingRule_Semantic>(value));
}
template <>
inline const std::string& MappingRule_Semantic_Name(MappingRule_Semantic value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MappingRule_Semantic_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MappingRule_Semantic_Parse(absl::string_view name, MappingRule_Semantic* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MappingRule_Semantic>(
      MappingRule_Semantic_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT VName final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.VName) */ {
 public:
  inline VName() : VName(nullptr) {}
  ~VName() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VName(
      ::google::protobuf::internal::ConstantInitialized);

  inline VName(const VName& from) : VName(nullptr, from) {}
  inline VName(VName&& from) noexcept
      : VName(nullptr, std::move(from)) {}
  inline VName& operator=(const VName& from) {
    CopyFrom(from);
    return *this;
  }
  inline VName& operator=(VName&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VName& default_instance() {
    return *internal_default_instance();
  }
  static inline const VName* internal_default_instance() {
    return reinterpret_cast<const VName*>(
        &_VName_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(VName& a, VName& b) { a.Swap(&b); }
  inline void Swap(VName* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VName* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VName* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<VName>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VName& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VName& from) { VName::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VName* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.VName"; }

 protected:
  explicit VName(::google::protobuf::Arena* arena);
  VName(::google::protobuf::Arena* arena, const VName& from);
  VName(::google::protobuf::Arena* arena, VName&& from) noexcept
      : VName(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignatureFieldNumber = 1,
    kCorpusFieldNumber = 2,
    kRootFieldNumber = 3,
    kPathFieldNumber = 4,
    kLanguageFieldNumber = 5,
  };
  // string signature = 1;
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // string corpus = 2;
  void clear_corpus() ;
  const std::string& corpus() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_corpus(Arg_&& arg, Args_... args);
  std::string* mutable_corpus();
  PROTOBUF_NODISCARD std::string* release_corpus();
  void set_allocated_corpus(std::string* value);

  private:
  const std::string& _internal_corpus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_corpus(
      const std::string& value);
  std::string* _internal_mutable_corpus();

  public:
  // string root = 3;
  void clear_root() ;
  const std::string& root() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_root(Arg_&& arg, Args_... args);
  std::string* mutable_root();
  PROTOBUF_NODISCARD std::string* release_root();
  void set_allocated_root(std::string* value);

  private:
  const std::string& _internal_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root(
      const std::string& value);
  std::string* _internal_mutable_root();

  public:
  // string path = 4;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string language = 5;
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* value);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.VName)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      56, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VName& from_msg);
    ::google::protobuf::internal::ArenaStringPtr signature_;
    ::google::protobuf::internal::ArenaStringPtr corpus_;
    ::google::protobuf::internal::ArenaStringPtr root_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr language_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MappingRule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MappingRule) */ {
 public:
  inline MappingRule() : MappingRule(nullptr) {}
  ~MappingRule() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MappingRule(
      ::google::protobuf::internal::ConstantInitialized);

  inline MappingRule(const MappingRule& from) : MappingRule(nullptr, from) {}
  inline MappingRule(MappingRule&& from) noexcept
      : MappingRule(nullptr, std::move(from)) {}
  inline MappingRule& operator=(const MappingRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline MappingRule& operator=(MappingRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MappingRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const MappingRule* internal_default_instance() {
    return reinterpret_cast<const MappingRule*>(
        &_MappingRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MappingRule& a, MappingRule& b) { a.Swap(&b); }
  inline void Swap(MappingRule* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MappingRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MappingRule* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MappingRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MappingRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MappingRule& from) { MappingRule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MappingRule* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.MappingRule"; }

 protected:
  explicit MappingRule(::google::protobuf::Arena* arena);
  MappingRule(::google::protobuf::Arena* arena, const MappingRule& from);
  MappingRule(::google::protobuf::Arena* arena, MappingRule&& from) noexcept
      : MappingRule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = MappingRule_Type;
  static constexpr Type NONE = MappingRule_Type_NONE;
  static constexpr Type NOP = MappingRule_Type_NOP;
  static constexpr Type ANCHOR_DEFINES = MappingRule_Type_ANCHOR_DEFINES;
  static constexpr Type ANCHOR_ANCHOR = MappingRule_Type_ANCHOR_ANCHOR;
  static inline bool Type_IsValid(int value) {
    return MappingRule_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = MappingRule_Type_Type_MIN;
  static constexpr Type Type_MAX = MappingRule_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = MappingRule_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return MappingRule_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return MappingRule_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return MappingRule_Type_Parse(name, value);
  }
  using Semantic = MappingRule_Semantic;
  static constexpr Semantic SEMA_NONE = MappingRule_Semantic_SEMA_NONE;
  static constexpr Semantic SEMA_WRITE = MappingRule_Semantic_SEMA_WRITE;
  static constexpr Semantic SEMA_READ_WRITE = MappingRule_Semantic_SEMA_READ_WRITE;
  static inline bool Semantic_IsValid(int value) {
    return MappingRule_Semantic_IsValid(value);
  }
  static constexpr Semantic Semantic_MIN = MappingRule_Semantic_Semantic_MIN;
  static constexpr Semantic Semantic_MAX = MappingRule_Semantic_Semantic_MAX;
  static constexpr int Semantic_ARRAYSIZE = MappingRule_Semantic_Semantic_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Semantic_descriptor() {
    return MappingRule_Semantic_descriptor();
  }
  template <typename T>
  static inline const std::string& Semantic_Name(T value) {
    return MappingRule_Semantic_Name(value);
  }
  static inline bool Semantic_Parse(absl::string_view name, Semantic* value) {
    return MappingRule_Semantic_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kEdgeFieldNumber = 2,
    kVnameFieldNumber = 3,
    kSourceVnameFieldNumber = 6,
    kTypeFieldNumber = 1,
    kBeginFieldNumber = 4,
    kEndFieldNumber = 5,
    kSourceBeginFieldNumber = 7,
    kSourceEndFieldNumber = 8,
    kTargetBeginFieldNumber = 9,
    kTargetEndFieldNumber = 10,
    kSemanticFieldNumber = 11,
  };
  // string edge = 2;
  void clear_edge() ;
  const std::string& edge() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_edge(Arg_&& arg, Args_... args);
  std::string* mutable_edge();
  PROTOBUF_NODISCARD std::string* release_edge();
  void set_allocated_edge(std::string* value);

  private:
  const std::string& _internal_edge() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edge(
      const std::string& value);
  std::string* _internal_mutable_edge();

  public:
  // .tensorflow.VName vname = 3;
  bool has_vname() const;
  void clear_vname() ;
  const ::tensorflow::VName& vname() const;
  PROTOBUF_NODISCARD ::tensorflow::VName* release_vname();
  ::tensorflow::VName* mutable_vname();
  void set_allocated_vname(::tensorflow::VName* value);
  void unsafe_arena_set_allocated_vname(::tensorflow::VName* value);
  ::tensorflow::VName* unsafe_arena_release_vname();

  private:
  const ::tensorflow::VName& _internal_vname() const;
  ::tensorflow::VName* _internal_mutable_vname();

  public:
  // .tensorflow.VName source_vname = 6;
  bool has_source_vname() const;
  void clear_source_vname() ;
  const ::tensorflow::VName& source_vname() const;
  PROTOBUF_NODISCARD ::tensorflow::VName* release_source_vname();
  ::tensorflow::VName* mutable_source_vname();
  void set_allocated_source_vname(::tensorflow::VName* value);
  void unsafe_arena_set_allocated_source_vname(::tensorflow::VName* value);
  ::tensorflow::VName* unsafe_arena_release_source_vname();

  private:
  const ::tensorflow::VName& _internal_source_vname() const;
  ::tensorflow::VName* _internal_mutable_source_vname();

  public:
  // .tensorflow.MappingRule.Type type = 1;
  void clear_type() ;
  ::tensorflow::MappingRule_Type type() const;
  void set_type(::tensorflow::MappingRule_Type value);

  private:
  ::tensorflow::MappingRule_Type _internal_type() const;
  void _internal_set_type(::tensorflow::MappingRule_Type value);

  public:
  // uint32 begin = 4;
  void clear_begin() ;
  ::uint32_t begin() const;
  void set_begin(::uint32_t value);

  private:
  ::uint32_t _internal_begin() const;
  void _internal_set_begin(::uint32_t value);

  public:
  // uint32 end = 5;
  void clear_end() ;
  ::uint32_t end() const;
  void set_end(::uint32_t value);

  private:
  ::uint32_t _internal_end() const;
  void _internal_set_end(::uint32_t value);

  public:
  // uint32 source_begin = 7;
  void clear_source_begin() ;
  ::uint32_t source_begin() const;
  void set_source_begin(::uint32_t value);

  private:
  ::uint32_t _internal_source_begin() const;
  void _internal_set_source_begin(::uint32_t value);

  public:
  // uint32 source_end = 8;
  void clear_source_end() ;
  ::uint32_t source_end() const;
  void set_source_end(::uint32_t value);

  private:
  ::uint32_t _internal_source_end() const;
  void _internal_set_source_end(::uint32_t value);

  public:
  // uint32 target_begin = 9;
  void clear_target_begin() ;
  ::uint32_t target_begin() const;
  void set_target_begin(::uint32_t value);

  private:
  ::uint32_t _internal_target_begin() const;
  void _internal_set_target_begin(::uint32_t value);

  public:
  // uint32 target_end = 10;
  void clear_target_end() ;
  ::uint32_t target_end() const;
  void set_target_end(::uint32_t value);

  private:
  ::uint32_t _internal_target_end() const;
  void _internal_set_target_end(::uint32_t value);

  public:
  // .tensorflow.MappingRule.Semantic semantic = 11;
  void clear_semantic() ;
  ::tensorflow::MappingRule_Semantic semantic() const;
  void set_semantic(::tensorflow::MappingRule_Semantic value);

  private:
  ::tensorflow::MappingRule_Semantic _internal_semantic() const;
  void _internal_set_semantic(::tensorflow::MappingRule_Semantic value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MappingRule)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      43, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MappingRule& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr edge_;
    ::tensorflow::VName* vname_;
    ::tensorflow::VName* source_vname_;
    int type_;
    ::uint32_t begin_;
    ::uint32_t end_;
    ::uint32_t source_begin_;
    ::uint32_t source_end_;
    ::uint32_t target_begin_;
    ::uint32_t target_end_;
    int semantic_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GeneratedCodeInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.GeneratedCodeInfo) */ {
 public:
  inline GeneratedCodeInfo() : GeneratedCodeInfo(nullptr) {}
  ~GeneratedCodeInfo() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GeneratedCodeInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GeneratedCodeInfo(const GeneratedCodeInfo& from) : GeneratedCodeInfo(nullptr, from) {}
  inline GeneratedCodeInfo(GeneratedCodeInfo&& from) noexcept
      : GeneratedCodeInfo(nullptr, std::move(from)) {}
  inline GeneratedCodeInfo& operator=(const GeneratedCodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratedCodeInfo& operator=(GeneratedCodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeneratedCodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneratedCodeInfo* internal_default_instance() {
    return reinterpret_cast<const GeneratedCodeInfo*>(
        &_GeneratedCodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GeneratedCodeInfo& a, GeneratedCodeInfo& b) { a.Swap(&b); }
  inline void Swap(GeneratedCodeInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneratedCodeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneratedCodeInfo* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GeneratedCodeInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GeneratedCodeInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GeneratedCodeInfo& from) { GeneratedCodeInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GeneratedCodeInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.GeneratedCodeInfo"; }

 protected:
  explicit GeneratedCodeInfo(::google::protobuf::Arena* arena);
  GeneratedCodeInfo(::google::protobuf::Arena* arena, const GeneratedCodeInfo& from);
  GeneratedCodeInfo(::google::protobuf::Arena* arena, GeneratedCodeInfo&& from) noexcept
      : GeneratedCodeInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = GeneratedCodeInfo_Type;
  static constexpr Type NONE = GeneratedCodeInfo_Type_NONE;
  static constexpr Type KYTHE0 = GeneratedCodeInfo_Type_KYTHE0;
  static inline bool Type_IsValid(int value) {
    return GeneratedCodeInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = GeneratedCodeInfo_Type_Type_MIN;
  static constexpr Type Type_MAX = GeneratedCodeInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = GeneratedCodeInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return GeneratedCodeInfo_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return GeneratedCodeInfo_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return GeneratedCodeInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kMetaFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .tensorflow.MappingRule meta = 2;
  int meta_size() const;
  private:
  int _internal_meta_size() const;

  public:
  void clear_meta() ;
  ::tensorflow::MappingRule* mutable_meta(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::MappingRule>* mutable_meta();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::MappingRule>& _internal_meta() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::MappingRule>* _internal_mutable_meta();
  public:
  const ::tensorflow::MappingRule& meta(int index) const;
  ::tensorflow::MappingRule* add_meta();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::MappingRule>& meta() const;
  // .tensorflow.GeneratedCodeInfo.Type type = 1;
  void clear_type() ;
  ::tensorflow::GeneratedCodeInfo_Type type() const;
  void set_type(::tensorflow::GeneratedCodeInfo_Type value);

  private:
  ::tensorflow::GeneratedCodeInfo_Type _internal_type() const;
  void _internal_set_type(::tensorflow::GeneratedCodeInfo_Type value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.GeneratedCodeInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GeneratedCodeInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::MappingRule > meta_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GeneratedCodeInfo

// .tensorflow.GeneratedCodeInfo.Type type = 1;
inline void GeneratedCodeInfo::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::tensorflow::GeneratedCodeInfo_Type GeneratedCodeInfo::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.GeneratedCodeInfo.type)
  return _internal_type();
}
inline void GeneratedCodeInfo::set_type(::tensorflow::GeneratedCodeInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.GeneratedCodeInfo.type)
}
inline ::tensorflow::GeneratedCodeInfo_Type GeneratedCodeInfo::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::GeneratedCodeInfo_Type>(_impl_.type_);
}
inline void GeneratedCodeInfo::_internal_set_type(::tensorflow::GeneratedCodeInfo_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// repeated .tensorflow.MappingRule meta = 2;
inline int GeneratedCodeInfo::_internal_meta_size() const {
  return _internal_meta().size();
}
inline int GeneratedCodeInfo::meta_size() const {
  return _internal_meta_size();
}
inline void GeneratedCodeInfo::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meta_.Clear();
}
inline ::tensorflow::MappingRule* GeneratedCodeInfo::mutable_meta(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.GeneratedCodeInfo.meta)
  return _internal_mutable_meta()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::MappingRule>* GeneratedCodeInfo::mutable_meta()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GeneratedCodeInfo.meta)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_meta();
}
inline const ::tensorflow::MappingRule& GeneratedCodeInfo::meta(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.GeneratedCodeInfo.meta)
  return _internal_meta().Get(index);
}
inline ::tensorflow::MappingRule* GeneratedCodeInfo::add_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::MappingRule* _add = _internal_mutable_meta()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.GeneratedCodeInfo.meta)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::MappingRule>& GeneratedCodeInfo::meta() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.GeneratedCodeInfo.meta)
  return _internal_meta();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::MappingRule>&
GeneratedCodeInfo::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.meta_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::MappingRule>*
GeneratedCodeInfo::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.meta_;
}

// -------------------------------------------------------------------

// MappingRule

// .tensorflow.MappingRule.Type type = 1;
inline void MappingRule::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::tensorflow::MappingRule_Type MappingRule::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.type)
  return _internal_type();
}
inline void MappingRule::set_type(::tensorflow::MappingRule_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.type)
}
inline ::tensorflow::MappingRule_Type MappingRule::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::MappingRule_Type>(_impl_.type_);
}
inline void MappingRule::_internal_set_type(::tensorflow::MappingRule_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string edge = 2;
inline void MappingRule::clear_edge() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_.ClearToEmpty();
}
inline const std::string& MappingRule::edge() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.edge)
  return _internal_edge();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MappingRule::set_edge(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.edge)
}
inline std::string* MappingRule::mutable_edge() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_edge();
  // @@protoc_insertion_point(field_mutable:tensorflow.MappingRule.edge)
  return _s;
}
inline const std::string& MappingRule::_internal_edge() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.edge_.Get();
}
inline void MappingRule::_internal_set_edge(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_.Set(value, GetArena());
}
inline std::string* MappingRule::_internal_mutable_edge() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.edge_.Mutable( GetArena());
}
inline std::string* MappingRule::release_edge() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MappingRule.edge)
  return _impl_.edge_.Release();
}
inline void MappingRule::set_allocated_edge(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.edge_.IsDefault()) {
          _impl_.edge_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MappingRule.edge)
}

// .tensorflow.VName vname = 3;
inline bool MappingRule::has_vname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vname_ != nullptr);
  return value;
}
inline void MappingRule::clear_vname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vname_ != nullptr) _impl_.vname_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::VName& MappingRule::_internal_vname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::VName* p = _impl_.vname_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::VName&>(::tensorflow::_VName_default_instance_);
}
inline const ::tensorflow::VName& MappingRule::vname() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.vname)
  return _internal_vname();
}
inline void MappingRule::unsafe_arena_set_allocated_vname(::tensorflow::VName* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vname_);
  }
  _impl_.vname_ = reinterpret_cast<::tensorflow::VName*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MappingRule.vname)
}
inline ::tensorflow::VName* MappingRule::release_vname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::VName* released = _impl_.vname_;
  _impl_.vname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::VName* MappingRule::unsafe_arena_release_vname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MappingRule.vname)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::VName* temp = _impl_.vname_;
  _impl_.vname_ = nullptr;
  return temp;
}
inline ::tensorflow::VName* MappingRule::_internal_mutable_vname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vname_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::VName>(GetArena());
    _impl_.vname_ = reinterpret_cast<::tensorflow::VName*>(p);
  }
  return _impl_.vname_;
}
inline ::tensorflow::VName* MappingRule::mutable_vname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::VName* _msg = _internal_mutable_vname();
  // @@protoc_insertion_point(field_mutable:tensorflow.MappingRule.vname)
  return _msg;
}
inline void MappingRule::set_allocated_vname(::tensorflow::VName* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.vname_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vname_ = reinterpret_cast<::tensorflow::VName*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MappingRule.vname)
}

// uint32 begin = 4;
inline void MappingRule::clear_begin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.begin_ = 0u;
}
inline ::uint32_t MappingRule::begin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.begin)
  return _internal_begin();
}
inline void MappingRule::set_begin(::uint32_t value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.begin)
}
inline ::uint32_t MappingRule::_internal_begin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.begin_;
}
inline void MappingRule::_internal_set_begin(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.begin_ = value;
}

// uint32 end = 5;
inline void MappingRule::clear_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_ = 0u;
}
inline ::uint32_t MappingRule::end() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.end)
  return _internal_end();
}
inline void MappingRule::set_end(::uint32_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.end)
}
inline ::uint32_t MappingRule::_internal_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_;
}
inline void MappingRule::_internal_set_end(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_ = value;
}

// .tensorflow.MappingRule.Semantic semantic = 11;
inline void MappingRule::clear_semantic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.semantic_ = 0;
}
inline ::tensorflow::MappingRule_Semantic MappingRule::semantic() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.semantic)
  return _internal_semantic();
}
inline void MappingRule::set_semantic(::tensorflow::MappingRule_Semantic value) {
  _internal_set_semantic(value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.semantic)
}
inline ::tensorflow::MappingRule_Semantic MappingRule::_internal_semantic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::MappingRule_Semantic>(_impl_.semantic_);
}
inline void MappingRule::_internal_set_semantic(::tensorflow::MappingRule_Semantic value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.semantic_ = value;
}

// .tensorflow.VName source_vname = 6;
inline bool MappingRule::has_source_vname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_vname_ != nullptr);
  return value;
}
inline void MappingRule::clear_source_vname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_vname_ != nullptr) _impl_.source_vname_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::VName& MappingRule::_internal_source_vname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::VName* p = _impl_.source_vname_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::VName&>(::tensorflow::_VName_default_instance_);
}
inline const ::tensorflow::VName& MappingRule::source_vname() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.source_vname)
  return _internal_source_vname();
}
inline void MappingRule::unsafe_arena_set_allocated_source_vname(::tensorflow::VName* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_vname_);
  }
  _impl_.source_vname_ = reinterpret_cast<::tensorflow::VName*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MappingRule.source_vname)
}
inline ::tensorflow::VName* MappingRule::release_source_vname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::VName* released = _impl_.source_vname_;
  _impl_.source_vname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::VName* MappingRule::unsafe_arena_release_source_vname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MappingRule.source_vname)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::VName* temp = _impl_.source_vname_;
  _impl_.source_vname_ = nullptr;
  return temp;
}
inline ::tensorflow::VName* MappingRule::_internal_mutable_source_vname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_vname_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::VName>(GetArena());
    _impl_.source_vname_ = reinterpret_cast<::tensorflow::VName*>(p);
  }
  return _impl_.source_vname_;
}
inline ::tensorflow::VName* MappingRule::mutable_source_vname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::VName* _msg = _internal_mutable_source_vname();
  // @@protoc_insertion_point(field_mutable:tensorflow.MappingRule.source_vname)
  return _msg;
}
inline void MappingRule::set_allocated_source_vname(::tensorflow::VName* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.source_vname_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.source_vname_ = reinterpret_cast<::tensorflow::VName*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MappingRule.source_vname)
}

// uint32 source_begin = 7;
inline void MappingRule::clear_source_begin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_begin_ = 0u;
}
inline ::uint32_t MappingRule::source_begin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.source_begin)
  return _internal_source_begin();
}
inline void MappingRule::set_source_begin(::uint32_t value) {
  _internal_set_source_begin(value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.source_begin)
}
inline ::uint32_t MappingRule::_internal_source_begin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_begin_;
}
inline void MappingRule::_internal_set_source_begin(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_begin_ = value;
}

// uint32 source_end = 8;
inline void MappingRule::clear_source_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_end_ = 0u;
}
inline ::uint32_t MappingRule::source_end() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.source_end)
  return _internal_source_end();
}
inline void MappingRule::set_source_end(::uint32_t value) {
  _internal_set_source_end(value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.source_end)
}
inline ::uint32_t MappingRule::_internal_source_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_end_;
}
inline void MappingRule::_internal_set_source_end(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_end_ = value;
}

// uint32 target_begin = 9;
inline void MappingRule::clear_target_begin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_begin_ = 0u;
}
inline ::uint32_t MappingRule::target_begin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.target_begin)
  return _internal_target_begin();
}
inline void MappingRule::set_target_begin(::uint32_t value) {
  _internal_set_target_begin(value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.target_begin)
}
inline ::uint32_t MappingRule::_internal_target_begin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_begin_;
}
inline void MappingRule::_internal_set_target_begin(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_begin_ = value;
}

// uint32 target_end = 10;
inline void MappingRule::clear_target_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_end_ = 0u;
}
inline ::uint32_t MappingRule::target_end() const {
  // @@protoc_insertion_point(field_get:tensorflow.MappingRule.target_end)
  return _internal_target_end();
}
inline void MappingRule::set_target_end(::uint32_t value) {
  _internal_set_target_end(value);
  // @@protoc_insertion_point(field_set:tensorflow.MappingRule.target_end)
}
inline ::uint32_t MappingRule::_internal_target_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_end_;
}
inline void MappingRule::_internal_set_target_end(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_end_ = value;
}

// -------------------------------------------------------------------

// VName

// string signature = 1;
inline void VName::clear_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& VName::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.VName.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VName::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.VName.signature)
}
inline std::string* VName::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.signature)
  return _s;
}
inline const std::string& VName::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_.Get();
}
inline void VName::_internal_set_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* VName::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* VName::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.VName.signature)
  return _impl_.signature_.Release();
}
inline void VName::set_allocated_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.signature)
}

// string corpus = 2;
inline void VName::clear_corpus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.corpus_.ClearToEmpty();
}
inline const std::string& VName::corpus() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.VName.corpus)
  return _internal_corpus();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VName::set_corpus(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.corpus_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.VName.corpus)
}
inline std::string* VName::mutable_corpus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_corpus();
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.corpus)
  return _s;
}
inline const std::string& VName::_internal_corpus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.corpus_.Get();
}
inline void VName::_internal_set_corpus(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.corpus_.Set(value, GetArena());
}
inline std::string* VName::_internal_mutable_corpus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.corpus_.Mutable( GetArena());
}
inline std::string* VName::release_corpus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.VName.corpus)
  return _impl_.corpus_.Release();
}
inline void VName::set_allocated_corpus(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.corpus_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.corpus_.IsDefault()) {
          _impl_.corpus_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.corpus)
}

// string root = 3;
inline void VName::clear_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_.ClearToEmpty();
}
inline const std::string& VName::root() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.VName.root)
  return _internal_root();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VName::set_root(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.VName.root)
}
inline std::string* VName::mutable_root() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.root)
  return _s;
}
inline const std::string& VName::_internal_root() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.root_.Get();
}
inline void VName::_internal_set_root(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_.Set(value, GetArena());
}
inline std::string* VName::_internal_mutable_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.root_.Mutable( GetArena());
}
inline std::string* VName::release_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.VName.root)
  return _impl_.root_.Release();
}
inline void VName::set_allocated_root(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.root_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.root_.IsDefault()) {
          _impl_.root_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.root)
}

// string path = 4;
inline void VName::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& VName::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.VName.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VName::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.VName.path)
}
inline std::string* VName::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.path)
  return _s;
}
inline const std::string& VName::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void VName::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* VName::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* VName::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.VName.path)
  return _impl_.path_.Release();
}
inline void VName::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.path)
}

// string language = 5;
inline void VName::clear_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.ClearToEmpty();
}
inline const std::string& VName::language() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.VName.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VName::set_language(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.VName.language)
}
inline std::string* VName::mutable_language() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:tensorflow.VName.language)
  return _s;
}
inline const std::string& VName::_internal_language() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.language_.Get();
}
inline void VName::_internal_set_language(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.Set(value, GetArena());
}
inline std::string* VName::_internal_mutable_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.language_.Mutable( GetArena());
}
inline std::string* VName::release_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.VName.language)
  return _impl_.language_.Release();
}
inline void VName::set_allocated_language(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_.IsDefault()) {
          _impl_.language_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VName.language)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::GeneratedCodeInfo_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::GeneratedCodeInfo_Type>() {
  return ::tensorflow::GeneratedCodeInfo_Type_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::MappingRule_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::MappingRule_Type>() {
  return ::tensorflow::MappingRule_Type_descriptor();
}
template <>
struct is_proto_enum<::tensorflow::MappingRule_Semantic> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::MappingRule_Semantic>() {
  return ::tensorflow::MappingRule_Semantic_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fpython_2fframework_2fkythe_5fmetadata_2eproto_2epb_2eh
