// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/pjrt/distributed/protocol.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fdistributed_2fprotocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fdistributed_2fprotocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xla_2fpjrt_2fdistributed_2fprotocol_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
namespace xla {
class DeviceAttributeProto;
struct DeviceAttributeProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern DeviceAttributeProtoDefaultTypeInternal _DeviceAttributeProto_default_instance_;
class DeviceProto;
struct DeviceProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern DeviceProtoDefaultTypeInternal _DeviceProto_default_instance_;
class DeviceProto_AttributesEntry_DoNotUse;
struct DeviceProto_AttributesEntry_DoNotUseDefaultTypeInternal;
PROTOBUF_EXPORT extern DeviceProto_AttributesEntry_DoNotUseDefaultTypeInternal _DeviceProto_AttributesEntry_DoNotUse_default_instance_;
class GlobalTopologyProto;
struct GlobalTopologyProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern GlobalTopologyProtoDefaultTypeInternal _GlobalTopologyProto_default_instance_;
class IntValuesProto;
struct IntValuesProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern IntValuesProtoDefaultTypeInternal _IntValuesProto_default_instance_;
class LocalTopologyProto;
struct LocalTopologyProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern LocalTopologyProtoDefaultTypeInternal _LocalTopologyProto_default_instance_;
}  // namespace xla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xla {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT IntValuesProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xla.IntValuesProto) */ {
 public:
  inline IntValuesProto() : IntValuesProto(nullptr) {}
  ~IntValuesProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IntValuesProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline IntValuesProto(const IntValuesProto& from) : IntValuesProto(nullptr, from) {}
  inline IntValuesProto(IntValuesProto&& from) noexcept
      : IntValuesProto(nullptr, std::move(from)) {}
  inline IntValuesProto& operator=(const IntValuesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntValuesProto& operator=(IntValuesProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntValuesProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntValuesProto* internal_default_instance() {
    return reinterpret_cast<const IntValuesProto*>(
        &_IntValuesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(IntValuesProto& a, IntValuesProto& b) { a.Swap(&b); }
  inline void Swap(IntValuesProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntValuesProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntValuesProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<IntValuesProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntValuesProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IntValuesProto& from) { IntValuesProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntValuesProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "xla.IntValuesProto"; }

 protected:
  explicit IntValuesProto(::google::protobuf::Arena* arena);
  IntValuesProto(::google::protobuf::Arena* arena, const IntValuesProto& from);
  IntValuesProto(::google::protobuf::Arena* arena, IntValuesProto&& from) noexcept
      : IntValuesProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int64 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::int64_t values(int index) const;
  void set_values(int index, ::int64_t value);
  void add_values(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& values() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_values() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:xla.IntValuesProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IntValuesProto& from_msg);
    ::google::protobuf::RepeatedField<::int64_t> values_;
    mutable ::google::protobuf::internal::CachedSize _values_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DeviceAttributeProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xla.DeviceAttributeProto) */ {
 public:
  inline DeviceAttributeProto() : DeviceAttributeProto(nullptr) {}
  ~DeviceAttributeProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceAttributeProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceAttributeProto(const DeviceAttributeProto& from) : DeviceAttributeProto(nullptr, from) {}
  inline DeviceAttributeProto(DeviceAttributeProto&& from) noexcept
      : DeviceAttributeProto(nullptr, std::move(from)) {}
  inline DeviceAttributeProto& operator=(const DeviceAttributeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAttributeProto& operator=(DeviceAttributeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceAttributeProto& default_instance() {
    return *internal_default_instance();
  }
  enum AttributeCase {
    kStringValue = 1,
    kBoolValue = 2,
    kIntValue = 3,
    kIntValues = 4,
    kFloatValue = 5,
    ATTRIBUTE_NOT_SET = 0,
  };
  static inline const DeviceAttributeProto* internal_default_instance() {
    return reinterpret_cast<const DeviceAttributeProto*>(
        &_DeviceAttributeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DeviceAttributeProto& a, DeviceAttributeProto& b) { a.Swap(&b); }
  inline void Swap(DeviceAttributeProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAttributeProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceAttributeProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DeviceAttributeProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceAttributeProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceAttributeProto& from) { DeviceAttributeProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceAttributeProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "xla.DeviceAttributeProto"; }

 protected:
  explicit DeviceAttributeProto(::google::protobuf::Arena* arena);
  DeviceAttributeProto(::google::protobuf::Arena* arena, const DeviceAttributeProto& from);
  DeviceAttributeProto(::google::protobuf::Arena* arena, DeviceAttributeProto&& from) noexcept
      : DeviceAttributeProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStringValueFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kIntValuesFieldNumber = 4,
    kFloatValueFieldNumber = 5,
  };
  // string string_value = 1;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // int64 int_value = 3;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // .xla.IntValuesProto int_values = 4;
  bool has_int_values() const;
  private:
  bool _internal_has_int_values() const;

  public:
  void clear_int_values() ;
  const ::xla::IntValuesProto& int_values() const;
  PROTOBUF_NODISCARD ::xla::IntValuesProto* release_int_values();
  ::xla::IntValuesProto* mutable_int_values();
  void set_allocated_int_values(::xla::IntValuesProto* value);
  void unsafe_arena_set_allocated_int_values(::xla::IntValuesProto* value);
  ::xla::IntValuesProto* unsafe_arena_release_int_values();

  private:
  const ::xla::IntValuesProto& _internal_int_values() const;
  ::xla::IntValuesProto* _internal_mutable_int_values();

  public:
  // float float_value = 5;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  void clear_attribute();
  AttributeCase attribute_case() const;
  // @@protoc_insertion_point(class_scope:xla.DeviceAttributeProto)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_int_value();
  void set_has_int_values();
  void set_has_float_value();
  inline bool has_attribute() const;
  inline void clear_has_attribute();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 1,
      45, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceAttributeProto& from_msg);
    union AttributeUnion {
      constexpr AttributeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      bool bool_value_;
      ::int64_t int_value_;
      ::xla::IntValuesProto* int_values_;
      float float_value_;
    } attribute_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class DeviceProto_AttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          DeviceProto_AttributesEntry_DoNotUse, std::string, ::xla::DeviceAttributeProto,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      DeviceProto_AttributesEntry_DoNotUse, std::string, ::xla::DeviceAttributeProto,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  DeviceProto_AttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceProto_AttributesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit DeviceProto_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const DeviceProto_AttributesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DeviceProto_AttributesEntry_DoNotUse*>(
        &_DeviceProto_AttributesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      43, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT DeviceProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xla.DeviceProto) */ {
 public:
  inline DeviceProto() : DeviceProto(nullptr) {}
  ~DeviceProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceProto(const DeviceProto& from) : DeviceProto(nullptr, from) {}
  inline DeviceProto(DeviceProto&& from) noexcept
      : DeviceProto(nullptr, std::move(from)) {}
  inline DeviceProto& operator=(const DeviceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceProto& operator=(DeviceProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceProto* internal_default_instance() {
    return reinterpret_cast<const DeviceProto*>(
        &_DeviceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DeviceProto& a, DeviceProto& b) { a.Swap(&b); }
  inline void Swap(DeviceProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DeviceProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceProto& from) { DeviceProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "xla.DeviceProto"; }

 protected:
  explicit DeviceProto(::google::protobuf::Arena* arena);
  DeviceProto(::google::protobuf::Arena* arena, const DeviceProto& from);
  DeviceProto(::google::protobuf::Arena* arena, DeviceProto&& from) noexcept
      : DeviceProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 11,
    kNameFieldNumber = 2,
    kVendorFieldNumber = 3,
    kComputeCapabilityFieldNumber = 6,
    kDeviceKindFieldNumber = 8,
    kToStringFieldNumber = 9,
    kDebugStringFieldNumber = 10,
    kFabricUuidFieldNumber = 12,
    kLocalDeviceOrdinalFieldNumber = 1,
    kGlobalDeviceIdFieldNumber = 4,
    kSliceIndexFieldNumber = 5,
    kCoreCountFieldNumber = 7,
  };
  // map<string, .xla.DeviceAttributeProto> attributes = 11;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  const ::google::protobuf::Map<std::string, ::xla::DeviceAttributeProto>& attributes() const;
  ::google::protobuf::Map<std::string, ::xla::DeviceAttributeProto>* mutable_attributes();

  private:
  const ::google::protobuf::Map<std::string, ::xla::DeviceAttributeProto>& _internal_attributes() const;
  ::google::protobuf::Map<std::string, ::xla::DeviceAttributeProto>* _internal_mutable_attributes();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string vendor = 3;
  void clear_vendor() ;
  const std::string& vendor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vendor(Arg_&& arg, Args_... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* value);

  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(
      const std::string& value);
  std::string* _internal_mutable_vendor();

  public:
  // string compute_capability = 6;
  void clear_compute_capability() ;
  const std::string& compute_capability() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compute_capability(Arg_&& arg, Args_... args);
  std::string* mutable_compute_capability();
  PROTOBUF_NODISCARD std::string* release_compute_capability();
  void set_allocated_compute_capability(std::string* value);

  private:
  const std::string& _internal_compute_capability() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compute_capability(
      const std::string& value);
  std::string* _internal_mutable_compute_capability();

  public:
  // string device_kind = 8;
  void clear_device_kind() ;
  const std::string& device_kind() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_kind(Arg_&& arg, Args_... args);
  std::string* mutable_device_kind();
  PROTOBUF_NODISCARD std::string* release_device_kind();
  void set_allocated_device_kind(std::string* value);

  private:
  const std::string& _internal_device_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_kind(
      const std::string& value);
  std::string* _internal_mutable_device_kind();

  public:
  // string to_string = 9;
  void clear_to_string() ;
  const std::string& to_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_string(Arg_&& arg, Args_... args);
  std::string* mutable_to_string();
  PROTOBUF_NODISCARD std::string* release_to_string();
  void set_allocated_to_string(std::string* value);

  private:
  const std::string& _internal_to_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_string(
      const std::string& value);
  std::string* _internal_mutable_to_string();

  public:
  // string debug_string = 10;
  void clear_debug_string() ;
  const std::string& debug_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_debug_string(Arg_&& arg, Args_... args);
  std::string* mutable_debug_string();
  PROTOBUF_NODISCARD std::string* release_debug_string();
  void set_allocated_debug_string(std::string* value);

  private:
  const std::string& _internal_debug_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_debug_string(
      const std::string& value);
  std::string* _internal_mutable_debug_string();

  public:
  // string fabric_uuid = 12;
  void clear_fabric_uuid() ;
  const std::string& fabric_uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fabric_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_fabric_uuid();
  PROTOBUF_NODISCARD std::string* release_fabric_uuid();
  void set_allocated_fabric_uuid(std::string* value);

  private:
  const std::string& _internal_fabric_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fabric_uuid(
      const std::string& value);
  std::string* _internal_mutable_fabric_uuid();

  public:
  // int32 local_device_ordinal = 1;
  void clear_local_device_ordinal() ;
  ::int32_t local_device_ordinal() const;
  void set_local_device_ordinal(::int32_t value);

  private:
  ::int32_t _internal_local_device_ordinal() const;
  void _internal_set_local_device_ordinal(::int32_t value);

  public:
  // int32 global_device_id = 4;
  void clear_global_device_id() ;
  ::int32_t global_device_id() const;
  void set_global_device_id(::int32_t value);

  private:
  ::int32_t _internal_global_device_id() const;
  void _internal_set_global_device_id(::int32_t value);

  public:
  // int32 slice_index = 5;
  void clear_slice_index() ;
  ::int32_t slice_index() const;
  void set_slice_index(::int32_t value);

  private:
  ::int32_t _internal_slice_index() const;
  void _internal_set_slice_index(::int32_t value);

  public:
  // int32 core_count = 7;
  void clear_core_count() ;
  ::int32_t core_count() const;
  void set_core_count(::int32_t value);

  private:
  ::int32_t _internal_core_count() const;
  void _internal_set_core_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xla.DeviceProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 2,
      113, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceProto& from_msg);
    ::google::protobuf::internal::MapField<DeviceProto_AttributesEntry_DoNotUse, std::string, ::xla::DeviceAttributeProto,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        attributes_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr vendor_;
    ::google::protobuf::internal::ArenaStringPtr compute_capability_;
    ::google::protobuf::internal::ArenaStringPtr device_kind_;
    ::google::protobuf::internal::ArenaStringPtr to_string_;
    ::google::protobuf::internal::ArenaStringPtr debug_string_;
    ::google::protobuf::internal::ArenaStringPtr fabric_uuid_;
    ::int32_t local_device_ordinal_;
    ::int32_t global_device_id_;
    ::int32_t slice_index_;
    ::int32_t core_count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT LocalTopologyProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xla.LocalTopologyProto) */ {
 public:
  inline LocalTopologyProto() : LocalTopologyProto(nullptr) {}
  ~LocalTopologyProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LocalTopologyProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline LocalTopologyProto(const LocalTopologyProto& from) : LocalTopologyProto(nullptr, from) {}
  inline LocalTopologyProto(LocalTopologyProto&& from) noexcept
      : LocalTopologyProto(nullptr, std::move(from)) {}
  inline LocalTopologyProto& operator=(const LocalTopologyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTopologyProto& operator=(LocalTopologyProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalTopologyProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalTopologyProto* internal_default_instance() {
    return reinterpret_cast<const LocalTopologyProto*>(
        &_LocalTopologyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(LocalTopologyProto& a, LocalTopologyProto& b) { a.Swap(&b); }
  inline void Swap(LocalTopologyProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalTopologyProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalTopologyProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<LocalTopologyProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocalTopologyProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LocalTopologyProto& from) { LocalTopologyProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LocalTopologyProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "xla.LocalTopologyProto"; }

 protected:
  explicit LocalTopologyProto(::google::protobuf::Arena* arena);
  LocalTopologyProto(::google::protobuf::Arena* arena, const LocalTopologyProto& from);
  LocalTopologyProto(::google::protobuf::Arena* arena, LocalTopologyProto&& from) noexcept
      : LocalTopologyProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevicesFieldNumber = 3,
    kBootIdFieldNumber = 2,
    kNodeIdFieldNumber = 1,
    kSliceIndexFieldNumber = 4,
  };
  // repeated .xla.DeviceProto devices = 3;
  int devices_size() const;
  private:
  int _internal_devices_size() const;

  public:
  void clear_devices() ;
  ::xla::DeviceProto* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField<::xla::DeviceProto>* mutable_devices();

  private:
  const ::google::protobuf::RepeatedPtrField<::xla::DeviceProto>& _internal_devices() const;
  ::google::protobuf::RepeatedPtrField<::xla::DeviceProto>* _internal_mutable_devices();
  public:
  const ::xla::DeviceProto& devices(int index) const;
  ::xla::DeviceProto* add_devices();
  const ::google::protobuf::RepeatedPtrField<::xla::DeviceProto>& devices() const;
  // string boot_id = 2;
  void clear_boot_id() ;
  const std::string& boot_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_boot_id(Arg_&& arg, Args_... args);
  std::string* mutable_boot_id();
  PROTOBUF_NODISCARD std::string* release_boot_id();
  void set_allocated_boot_id(std::string* value);

  private:
  const std::string& _internal_boot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boot_id(
      const std::string& value);
  std::string* _internal_mutable_boot_id();

  public:
  // int32 node_id = 1;
  void clear_node_id() ;
  ::int32_t node_id() const;
  void set_node_id(::int32_t value);

  private:
  ::int32_t _internal_node_id() const;
  void _internal_set_node_id(::int32_t value);

  public:
  // optional int32 slice_index = 4;
  bool has_slice_index() const;
  void clear_slice_index() ;
  ::int32_t slice_index() const;
  void set_slice_index(::int32_t value);

  private:
  ::int32_t _internal_slice_index() const;
  void _internal_set_slice_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xla.LocalTopologyProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      38, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LocalTopologyProto& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::xla::DeviceProto > devices_;
    ::google::protobuf::internal::ArenaStringPtr boot_id_;
    ::int32_t node_id_;
    ::int32_t slice_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GlobalTopologyProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xla.GlobalTopologyProto) */ {
 public:
  inline GlobalTopologyProto() : GlobalTopologyProto(nullptr) {}
  ~GlobalTopologyProto() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GlobalTopologyProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline GlobalTopologyProto(const GlobalTopologyProto& from) : GlobalTopologyProto(nullptr, from) {}
  inline GlobalTopologyProto(GlobalTopologyProto&& from) noexcept
      : GlobalTopologyProto(nullptr, std::move(from)) {}
  inline GlobalTopologyProto& operator=(const GlobalTopologyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalTopologyProto& operator=(GlobalTopologyProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalTopologyProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalTopologyProto* internal_default_instance() {
    return reinterpret_cast<const GlobalTopologyProto*>(
        &_GlobalTopologyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GlobalTopologyProto& a, GlobalTopologyProto& b) { a.Swap(&b); }
  inline void Swap(GlobalTopologyProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalTopologyProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalTopologyProto* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GlobalTopologyProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GlobalTopologyProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GlobalTopologyProto& from) { GlobalTopologyProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GlobalTopologyProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "xla.GlobalTopologyProto"; }

 protected:
  explicit GlobalTopologyProto(::google::protobuf::Arena* arena);
  GlobalTopologyProto(::google::protobuf::Arena* arena, const GlobalTopologyProto& from);
  GlobalTopologyProto(::google::protobuf::Arena* arena, GlobalTopologyProto&& from) noexcept
      : GlobalTopologyProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .xla.LocalTopologyProto nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::xla::LocalTopologyProto* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField<::xla::LocalTopologyProto>* mutable_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<::xla::LocalTopologyProto>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::xla::LocalTopologyProto>* _internal_mutable_nodes();
  public:
  const ::xla::LocalTopologyProto& nodes(int index) const;
  ::xla::LocalTopologyProto* add_nodes();
  const ::google::protobuf::RepeatedPtrField<::xla::LocalTopologyProto>& nodes() const;
  // @@protoc_insertion_point(class_scope:xla.GlobalTopologyProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GlobalTopologyProto& from_msg);
    ::google::protobuf::RepeatedPtrField< ::xla::LocalTopologyProto > nodes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IntValuesProto

// repeated int64 values = 1;
inline int IntValuesProto::_internal_values_size() const {
  return _internal_values().size();
}
inline int IntValuesProto::values_size() const {
  return _internal_values_size();
}
inline void IntValuesProto::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline ::int64_t IntValuesProto::values(int index) const {
  // @@protoc_insertion_point(field_get:xla.IntValuesProto.values)
  return _internal_values().Get(index);
}
inline void IntValuesProto::set_values(int index, ::int64_t value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:xla.IntValuesProto.values)
}
inline void IntValuesProto::add_values(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:xla.IntValuesProto.values)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& IntValuesProto::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xla.IntValuesProto.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<::int64_t>* IntValuesProto::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xla.IntValuesProto.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
IntValuesProto::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* IntValuesProto::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// DeviceAttributeProto

// string string_value = 1;
inline bool DeviceAttributeProto::has_string_value() const {
  return attribute_case() == kStringValue;
}
inline void DeviceAttributeProto::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void DeviceAttributeProto::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (attribute_case() == kStringValue) {
    _impl_.attribute_.string_value_.Destroy();
    clear_has_attribute();
  }
}
inline const std::string& DeviceAttributeProto::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceAttributeProto.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceAttributeProto::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (attribute_case() != kStringValue) {
    clear_attribute();

    set_has_string_value();
    _impl_.attribute_.string_value_.InitDefault();
  }
  _impl_.attribute_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.DeviceAttributeProto.string_value)
}
inline std::string* DeviceAttributeProto::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:xla.DeviceAttributeProto.string_value)
  return _s;
}
inline const std::string& DeviceAttributeProto::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (attribute_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.attribute_.string_value_.Get();
}
inline void DeviceAttributeProto::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (attribute_case() != kStringValue) {
    clear_attribute();

    set_has_string_value();
    _impl_.attribute_.string_value_.InitDefault();
  }
  _impl_.attribute_.string_value_.Set(value, GetArena());
}
inline std::string* DeviceAttributeProto::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (attribute_case() != kStringValue) {
    clear_attribute();

    set_has_string_value();
    _impl_.attribute_.string_value_.InitDefault();
  }
  return _impl_.attribute_.string_value_.Mutable( GetArena());
}
inline std::string* DeviceAttributeProto::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.DeviceAttributeProto.string_value)
  if (attribute_case() != kStringValue) {
    return nullptr;
  }
  clear_has_attribute();
  return _impl_.attribute_.string_value_.Release();
}
inline void DeviceAttributeProto::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_attribute()) {
    clear_attribute();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.attribute_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceAttributeProto.string_value)
}

// bool bool_value = 2;
inline bool DeviceAttributeProto::has_bool_value() const {
  return attribute_case() == kBoolValue;
}
inline void DeviceAttributeProto::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void DeviceAttributeProto::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (attribute_case() == kBoolValue) {
    _impl_.attribute_.bool_value_ = false;
    clear_has_attribute();
  }
}
inline bool DeviceAttributeProto::bool_value() const {
  // @@protoc_insertion_point(field_get:xla.DeviceAttributeProto.bool_value)
  return _internal_bool_value();
}
inline void DeviceAttributeProto::set_bool_value(bool value) {
  if (attribute_case() != kBoolValue) {
    clear_attribute();
    set_has_bool_value();
  }
  _impl_.attribute_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:xla.DeviceAttributeProto.bool_value)
}
inline bool DeviceAttributeProto::_internal_bool_value() const {
  if (attribute_case() == kBoolValue) {
    return _impl_.attribute_.bool_value_;
  }
  return false;
}

// int64 int_value = 3;
inline bool DeviceAttributeProto::has_int_value() const {
  return attribute_case() == kIntValue;
}
inline void DeviceAttributeProto::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void DeviceAttributeProto::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (attribute_case() == kIntValue) {
    _impl_.attribute_.int_value_ = ::int64_t{0};
    clear_has_attribute();
  }
}
inline ::int64_t DeviceAttributeProto::int_value() const {
  // @@protoc_insertion_point(field_get:xla.DeviceAttributeProto.int_value)
  return _internal_int_value();
}
inline void DeviceAttributeProto::set_int_value(::int64_t value) {
  if (attribute_case() != kIntValue) {
    clear_attribute();
    set_has_int_value();
  }
  _impl_.attribute_.int_value_ = value;
  // @@protoc_insertion_point(field_set:xla.DeviceAttributeProto.int_value)
}
inline ::int64_t DeviceAttributeProto::_internal_int_value() const {
  if (attribute_case() == kIntValue) {
    return _impl_.attribute_.int_value_;
  }
  return ::int64_t{0};
}

// .xla.IntValuesProto int_values = 4;
inline bool DeviceAttributeProto::has_int_values() const {
  return attribute_case() == kIntValues;
}
inline bool DeviceAttributeProto::_internal_has_int_values() const {
  return attribute_case() == kIntValues;
}
inline void DeviceAttributeProto::set_has_int_values() {
  _impl_._oneof_case_[0] = kIntValues;
}
inline void DeviceAttributeProto::clear_int_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (attribute_case() == kIntValues) {
    if (GetArena() == nullptr) {
      delete _impl_.attribute_.int_values_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.attribute_.int_values_);
    }
    clear_has_attribute();
  }
}
inline ::xla::IntValuesProto* DeviceAttributeProto::release_int_values() {
  // @@protoc_insertion_point(field_release:xla.DeviceAttributeProto.int_values)
  if (attribute_case() == kIntValues) {
    clear_has_attribute();
    auto* temp = _impl_.attribute_.int_values_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.attribute_.int_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xla::IntValuesProto& DeviceAttributeProto::_internal_int_values() const {
  return attribute_case() == kIntValues ? *_impl_.attribute_.int_values_ : reinterpret_cast<::xla::IntValuesProto&>(::xla::_IntValuesProto_default_instance_);
}
inline const ::xla::IntValuesProto& DeviceAttributeProto::int_values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceAttributeProto.int_values)
  return _internal_int_values();
}
inline ::xla::IntValuesProto* DeviceAttributeProto::unsafe_arena_release_int_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.DeviceAttributeProto.int_values)
  if (attribute_case() == kIntValues) {
    clear_has_attribute();
    auto* temp = _impl_.attribute_.int_values_;
    _impl_.attribute_.int_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceAttributeProto::unsafe_arena_set_allocated_int_values(::xla::IntValuesProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_attribute();
  if (value) {
    set_has_int_values();
    _impl_.attribute_.int_values_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.DeviceAttributeProto.int_values)
}
inline ::xla::IntValuesProto* DeviceAttributeProto::_internal_mutable_int_values() {
  if (attribute_case() != kIntValues) {
    clear_attribute();
    set_has_int_values();
    _impl_.attribute_.int_values_ =
        ::google::protobuf::Message::DefaultConstruct<::xla::IntValuesProto>(GetArena());
  }
  return _impl_.attribute_.int_values_;
}
inline ::xla::IntValuesProto* DeviceAttributeProto::mutable_int_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::xla::IntValuesProto* _msg = _internal_mutable_int_values();
  // @@protoc_insertion_point(field_mutable:xla.DeviceAttributeProto.int_values)
  return _msg;
}

// float float_value = 5;
inline bool DeviceAttributeProto::has_float_value() const {
  return attribute_case() == kFloatValue;
}
inline void DeviceAttributeProto::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void DeviceAttributeProto::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (attribute_case() == kFloatValue) {
    _impl_.attribute_.float_value_ = 0;
    clear_has_attribute();
  }
}
inline float DeviceAttributeProto::float_value() const {
  // @@protoc_insertion_point(field_get:xla.DeviceAttributeProto.float_value)
  return _internal_float_value();
}
inline void DeviceAttributeProto::set_float_value(float value) {
  if (attribute_case() != kFloatValue) {
    clear_attribute();
    set_has_float_value();
  }
  _impl_.attribute_.float_value_ = value;
  // @@protoc_insertion_point(field_set:xla.DeviceAttributeProto.float_value)
}
inline float DeviceAttributeProto::_internal_float_value() const {
  if (attribute_case() == kFloatValue) {
    return _impl_.attribute_.float_value_;
  }
  return 0;
}

inline bool DeviceAttributeProto::has_attribute() const {
  return attribute_case() != ATTRIBUTE_NOT_SET;
}
inline void DeviceAttributeProto::clear_has_attribute() {
  _impl_._oneof_case_[0] = ATTRIBUTE_NOT_SET;
}
inline DeviceAttributeProto::AttributeCase DeviceAttributeProto::attribute_case() const {
  return DeviceAttributeProto::AttributeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DeviceProto

// int32 local_device_ordinal = 1;
inline void DeviceProto::clear_local_device_ordinal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_device_ordinal_ = 0;
}
inline ::int32_t DeviceProto::local_device_ordinal() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.local_device_ordinal)
  return _internal_local_device_ordinal();
}
inline void DeviceProto::set_local_device_ordinal(::int32_t value) {
  _internal_set_local_device_ordinal(value);
  // @@protoc_insertion_point(field_set:xla.DeviceProto.local_device_ordinal)
}
inline ::int32_t DeviceProto::_internal_local_device_ordinal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.local_device_ordinal_;
}
inline void DeviceProto::_internal_set_local_device_ordinal(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_device_ordinal_ = value;
}

// string name = 2;
inline void DeviceProto::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeviceProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.name)
}
inline std::string* DeviceProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.name)
  return _s;
}
inline const std::string& DeviceProto::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void DeviceProto::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DeviceProto::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DeviceProto::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.DeviceProto.name)
  return _impl_.name_.Release();
}
inline void DeviceProto::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.name)
}

// string vendor = 3;
inline void DeviceProto::clear_vendor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_.ClearToEmpty();
}
inline const std::string& DeviceProto::vendor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.vendor)
  return _internal_vendor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProto::set_vendor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.vendor)
}
inline std::string* DeviceProto::mutable_vendor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.vendor)
  return _s;
}
inline const std::string& DeviceProto::_internal_vendor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vendor_.Get();
}
inline void DeviceProto::_internal_set_vendor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_.Set(value, GetArena());
}
inline std::string* DeviceProto::_internal_mutable_vendor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vendor_.Mutable( GetArena());
}
inline std::string* DeviceProto::release_vendor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.DeviceProto.vendor)
  return _impl_.vendor_.Release();
}
inline void DeviceProto::set_allocated_vendor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vendor_.IsDefault()) {
          _impl_.vendor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.vendor)
}

// int32 global_device_id = 4;
inline void DeviceProto::clear_global_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_device_id_ = 0;
}
inline ::int32_t DeviceProto::global_device_id() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.global_device_id)
  return _internal_global_device_id();
}
inline void DeviceProto::set_global_device_id(::int32_t value) {
  _internal_set_global_device_id(value);
  // @@protoc_insertion_point(field_set:xla.DeviceProto.global_device_id)
}
inline ::int32_t DeviceProto::_internal_global_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_device_id_;
}
inline void DeviceProto::_internal_set_global_device_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_device_id_ = value;
}

// int32 slice_index = 5;
inline void DeviceProto::clear_slice_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slice_index_ = 0;
}
inline ::int32_t DeviceProto::slice_index() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.slice_index)
  return _internal_slice_index();
}
inline void DeviceProto::set_slice_index(::int32_t value) {
  _internal_set_slice_index(value);
  // @@protoc_insertion_point(field_set:xla.DeviceProto.slice_index)
}
inline ::int32_t DeviceProto::_internal_slice_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slice_index_;
}
inline void DeviceProto::_internal_set_slice_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slice_index_ = value;
}

// string compute_capability = 6;
inline void DeviceProto::clear_compute_capability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compute_capability_.ClearToEmpty();
}
inline const std::string& DeviceProto::compute_capability() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.compute_capability)
  return _internal_compute_capability();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProto::set_compute_capability(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compute_capability_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.compute_capability)
}
inline std::string* DeviceProto::mutable_compute_capability() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_compute_capability();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.compute_capability)
  return _s;
}
inline const std::string& DeviceProto::_internal_compute_capability() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compute_capability_.Get();
}
inline void DeviceProto::_internal_set_compute_capability(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compute_capability_.Set(value, GetArena());
}
inline std::string* DeviceProto::_internal_mutable_compute_capability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compute_capability_.Mutable( GetArena());
}
inline std::string* DeviceProto::release_compute_capability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.DeviceProto.compute_capability)
  return _impl_.compute_capability_.Release();
}
inline void DeviceProto::set_allocated_compute_capability(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compute_capability_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.compute_capability_.IsDefault()) {
          _impl_.compute_capability_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.compute_capability)
}

// int32 core_count = 7;
inline void DeviceProto::clear_core_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.core_count_ = 0;
}
inline ::int32_t DeviceProto::core_count() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.core_count)
  return _internal_core_count();
}
inline void DeviceProto::set_core_count(::int32_t value) {
  _internal_set_core_count(value);
  // @@protoc_insertion_point(field_set:xla.DeviceProto.core_count)
}
inline ::int32_t DeviceProto::_internal_core_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.core_count_;
}
inline void DeviceProto::_internal_set_core_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.core_count_ = value;
}

// string device_kind = 8;
inline void DeviceProto::clear_device_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_kind_.ClearToEmpty();
}
inline const std::string& DeviceProto::device_kind() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.device_kind)
  return _internal_device_kind();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProto::set_device_kind(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_kind_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.device_kind)
}
inline std::string* DeviceProto::mutable_device_kind() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_kind();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.device_kind)
  return _s;
}
inline const std::string& DeviceProto::_internal_device_kind() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_kind_.Get();
}
inline void DeviceProto::_internal_set_device_kind(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_kind_.Set(value, GetArena());
}
inline std::string* DeviceProto::_internal_mutable_device_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_kind_.Mutable( GetArena());
}
inline std::string* DeviceProto::release_device_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.DeviceProto.device_kind)
  return _impl_.device_kind_.Release();
}
inline void DeviceProto::set_allocated_device_kind(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_kind_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_kind_.IsDefault()) {
          _impl_.device_kind_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.device_kind)
}

// string to_string = 9;
inline void DeviceProto::clear_to_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_string_.ClearToEmpty();
}
inline const std::string& DeviceProto::to_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.to_string)
  return _internal_to_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProto::set_to_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.to_string)
}
inline std::string* DeviceProto::mutable_to_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_string();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.to_string)
  return _s;
}
inline const std::string& DeviceProto::_internal_to_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_string_.Get();
}
inline void DeviceProto::_internal_set_to_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_string_.Set(value, GetArena());
}
inline std::string* DeviceProto::_internal_mutable_to_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_string_.Mutable( GetArena());
}
inline std::string* DeviceProto::release_to_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.DeviceProto.to_string)
  return _impl_.to_string_.Release();
}
inline void DeviceProto::set_allocated_to_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_string_.IsDefault()) {
          _impl_.to_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.to_string)
}

// string debug_string = 10;
inline void DeviceProto::clear_debug_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_string_.ClearToEmpty();
}
inline const std::string& DeviceProto::debug_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.debug_string)
  return _internal_debug_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProto::set_debug_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.debug_string)
}
inline std::string* DeviceProto::mutable_debug_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_debug_string();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.debug_string)
  return _s;
}
inline const std::string& DeviceProto::_internal_debug_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_string_.Get();
}
inline void DeviceProto::_internal_set_debug_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_string_.Set(value, GetArena());
}
inline std::string* DeviceProto::_internal_mutable_debug_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.debug_string_.Mutable( GetArena());
}
inline std::string* DeviceProto::release_debug_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.DeviceProto.debug_string)
  return _impl_.debug_string_.Release();
}
inline void DeviceProto::set_allocated_debug_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.debug_string_.IsDefault()) {
          _impl_.debug_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.debug_string)
}

// map<string, .xla.DeviceAttributeProto> attributes = 11;
inline int DeviceProto::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int DeviceProto::attributes_size() const {
  return _internal_attributes_size();
}
inline void DeviceProto::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::xla::DeviceAttributeProto>& DeviceProto::_internal_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::xla::DeviceAttributeProto>& DeviceProto::attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:xla.DeviceProto.attributes)
  return _internal_attributes();
}
inline ::google::protobuf::Map<std::string, ::xla::DeviceAttributeProto>* DeviceProto::_internal_mutable_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::xla::DeviceAttributeProto>* DeviceProto::mutable_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:xla.DeviceProto.attributes)
  return _internal_mutable_attributes();
}

// string fabric_uuid = 12;
inline void DeviceProto::clear_fabric_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fabric_uuid_.ClearToEmpty();
}
inline const std::string& DeviceProto::fabric_uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.fabric_uuid)
  return _internal_fabric_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceProto::set_fabric_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fabric_uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.fabric_uuid)
}
inline std::string* DeviceProto::mutable_fabric_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fabric_uuid();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.fabric_uuid)
  return _s;
}
inline const std::string& DeviceProto::_internal_fabric_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fabric_uuid_.Get();
}
inline void DeviceProto::_internal_set_fabric_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fabric_uuid_.Set(value, GetArena());
}
inline std::string* DeviceProto::_internal_mutable_fabric_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fabric_uuid_.Mutable( GetArena());
}
inline std::string* DeviceProto::release_fabric_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.DeviceProto.fabric_uuid)
  return _impl_.fabric_uuid_.Release();
}
inline void DeviceProto::set_allocated_fabric_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fabric_uuid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fabric_uuid_.IsDefault()) {
          _impl_.fabric_uuid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.fabric_uuid)
}

// -------------------------------------------------------------------

// LocalTopologyProto

// int32 node_id = 1;
inline void LocalTopologyProto::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = 0;
}
inline ::int32_t LocalTopologyProto::node_id() const {
  // @@protoc_insertion_point(field_get:xla.LocalTopologyProto.node_id)
  return _internal_node_id();
}
inline void LocalTopologyProto::set_node_id(::int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:xla.LocalTopologyProto.node_id)
}
inline ::int32_t LocalTopologyProto::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_;
}
inline void LocalTopologyProto::_internal_set_node_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = value;
}

// string boot_id = 2;
inline void LocalTopologyProto::clear_boot_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boot_id_.ClearToEmpty();
}
inline const std::string& LocalTopologyProto::boot_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.LocalTopologyProto.boot_id)
  return _internal_boot_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocalTopologyProto::set_boot_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boot_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xla.LocalTopologyProto.boot_id)
}
inline std::string* LocalTopologyProto::mutable_boot_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_boot_id();
  // @@protoc_insertion_point(field_mutable:xla.LocalTopologyProto.boot_id)
  return _s;
}
inline const std::string& LocalTopologyProto::_internal_boot_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.boot_id_.Get();
}
inline void LocalTopologyProto::_internal_set_boot_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boot_id_.Set(value, GetArena());
}
inline std::string* LocalTopologyProto::_internal_mutable_boot_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.boot_id_.Mutable( GetArena());
}
inline std::string* LocalTopologyProto::release_boot_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.LocalTopologyProto.boot_id)
  return _impl_.boot_id_.Release();
}
inline void LocalTopologyProto::set_allocated_boot_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boot_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.boot_id_.IsDefault()) {
          _impl_.boot_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.LocalTopologyProto.boot_id)
}

// repeated .xla.DeviceProto devices = 3;
inline int LocalTopologyProto::_internal_devices_size() const {
  return _internal_devices().size();
}
inline int LocalTopologyProto::devices_size() const {
  return _internal_devices_size();
}
inline void LocalTopologyProto::clear_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devices_.Clear();
}
inline ::xla::DeviceProto* LocalTopologyProto::mutable_devices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xla.LocalTopologyProto.devices)
  return _internal_mutable_devices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xla::DeviceProto>* LocalTopologyProto::mutable_devices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xla.LocalTopologyProto.devices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_devices();
}
inline const ::xla::DeviceProto& LocalTopologyProto::devices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.LocalTopologyProto.devices)
  return _internal_devices().Get(index);
}
inline ::xla::DeviceProto* LocalTopologyProto::add_devices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::xla::DeviceProto* _add = _internal_mutable_devices()->Add();
  // @@protoc_insertion_point(field_add:xla.LocalTopologyProto.devices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xla::DeviceProto>& LocalTopologyProto::devices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xla.LocalTopologyProto.devices)
  return _internal_devices();
}
inline const ::google::protobuf::RepeatedPtrField<::xla::DeviceProto>&
LocalTopologyProto::_internal_devices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devices_;
}
inline ::google::protobuf::RepeatedPtrField<::xla::DeviceProto>*
LocalTopologyProto::_internal_mutable_devices() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.devices_;
}

// optional int32 slice_index = 4;
inline bool LocalTopologyProto::has_slice_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LocalTopologyProto::clear_slice_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slice_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t LocalTopologyProto::slice_index() const {
  // @@protoc_insertion_point(field_get:xla.LocalTopologyProto.slice_index)
  return _internal_slice_index();
}
inline void LocalTopologyProto::set_slice_index(::int32_t value) {
  _internal_set_slice_index(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:xla.LocalTopologyProto.slice_index)
}
inline ::int32_t LocalTopologyProto::_internal_slice_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slice_index_;
}
inline void LocalTopologyProto::_internal_set_slice_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slice_index_ = value;
}

// -------------------------------------------------------------------

// GlobalTopologyProto

// repeated .xla.LocalTopologyProto nodes = 1;
inline int GlobalTopologyProto::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int GlobalTopologyProto::nodes_size() const {
  return _internal_nodes_size();
}
inline void GlobalTopologyProto::clear_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodes_.Clear();
}
inline ::xla::LocalTopologyProto* GlobalTopologyProto::mutable_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xla.GlobalTopologyProto.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::xla::LocalTopologyProto>* GlobalTopologyProto::mutable_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xla.GlobalTopologyProto.nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nodes();
}
inline const ::xla::LocalTopologyProto& GlobalTopologyProto::nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.GlobalTopologyProto.nodes)
  return _internal_nodes().Get(index);
}
inline ::xla::LocalTopologyProto* GlobalTopologyProto::add_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::xla::LocalTopologyProto* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:xla.GlobalTopologyProto.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::xla::LocalTopologyProto>& GlobalTopologyProto::nodes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xla.GlobalTopologyProto.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::xla::LocalTopologyProto>&
GlobalTopologyProto::_internal_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::xla::LocalTopologyProto>*
GlobalTopologyProto::_internal_mutable_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nodes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fdistributed_2fprotocol_2eproto_2epb_2eh
