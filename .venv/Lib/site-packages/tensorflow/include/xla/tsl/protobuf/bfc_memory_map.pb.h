// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/tsl/protobuf/bfc_memory_map.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto {
  static const ::uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
namespace tensorflow {
class BinSummary;
struct BinSummaryDefaultTypeInternal;
PROTOBUF_EXPORT extern BinSummaryDefaultTypeInternal _BinSummary_default_instance_;
class MemAllocatorStats;
struct MemAllocatorStatsDefaultTypeInternal;
PROTOBUF_EXPORT extern MemAllocatorStatsDefaultTypeInternal _MemAllocatorStats_default_instance_;
class MemChunk;
struct MemChunkDefaultTypeInternal;
PROTOBUF_EXPORT extern MemChunkDefaultTypeInternal _MemChunk_default_instance_;
class MemoryDump;
struct MemoryDumpDefaultTypeInternal;
PROTOBUF_EXPORT extern MemoryDumpDefaultTypeInternal _MemoryDump_default_instance_;
class SnapShot;
struct SnapShotDefaultTypeInternal;
PROTOBUF_EXPORT extern SnapShotDefaultTypeInternal _SnapShot_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT SnapShot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.SnapShot) */ {
 public:
  inline SnapShot() : SnapShot(nullptr) {}
  ~SnapShot() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SnapShot(
      ::google::protobuf::internal::ConstantInitialized);

  inline SnapShot(const SnapShot& from) : SnapShot(nullptr, from) {}
  inline SnapShot(SnapShot&& from) noexcept
      : SnapShot(nullptr, std::move(from)) {}
  inline SnapShot& operator=(const SnapShot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapShot& operator=(SnapShot&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapShot& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapShot* internal_default_instance() {
    return reinterpret_cast<const SnapShot*>(
        &_SnapShot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SnapShot& a, SnapShot& b) { a.Swap(&b); }
  inline void Swap(SnapShot* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapShot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapShot* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SnapShot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SnapShot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SnapShot& from) { SnapShot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SnapShot* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.SnapShot"; }

 protected:
  explicit SnapShot(::google::protobuf::Arena* arena);
  SnapShot(::google::protobuf::Arena* arena, const SnapShot& from);
  SnapShot(::google::protobuf::Arena* arena, SnapShot&& from) noexcept
      : SnapShot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActionCountFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint64 action_count = 1;
  void clear_action_count() ;
  ::uint64_t action_count() const;
  void set_action_count(::uint64_t value);

  private:
  ::uint64_t _internal_action_count() const;
  void _internal_set_action_count(::uint64_t value);

  public:
  // int64 size = 2;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.SnapShot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SnapShot& from_msg);
    ::uint64_t action_count_;
    ::int64_t size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemChunk) */ {
 public:
  inline MemChunk() : MemChunk(nullptr) {}
  ~MemChunk() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline MemChunk(const MemChunk& from) : MemChunk(nullptr, from) {}
  inline MemChunk(MemChunk&& from) noexcept
      : MemChunk(nullptr, std::move(from)) {}
  inline MemChunk& operator=(const MemChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemChunk& operator=(MemChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemChunk* internal_default_instance() {
    return reinterpret_cast<const MemChunk*>(
        &_MemChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MemChunk& a, MemChunk& b) { a.Swap(&b); }
  inline void Swap(MemChunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemChunk* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MemChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemChunk& from) { MemChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MemChunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.MemChunk"; }

 protected:
  explicit MemChunk(::google::protobuf::Arena* arena);
  MemChunk(::google::protobuf::Arena* arena, const MemChunk& from);
  MemChunk(::google::protobuf::Arena* arena, MemChunk&& from) noexcept
      : MemChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOpNameFieldNumber = 5,
    kAddressFieldNumber = 1,
    kSizeFieldNumber = 2,
    kRequestedSizeFieldNumber = 3,
    kFreedAtCountFieldNumber = 6,
    kBinFieldNumber = 4,
    kInUseFieldNumber = 8,
    kActionCountFieldNumber = 7,
    kStepIdFieldNumber = 9,
  };
  // string op_name = 5;
  void clear_op_name() ;
  const std::string& op_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_op_name(Arg_&& arg, Args_... args);
  std::string* mutable_op_name();
  PROTOBUF_NODISCARD std::string* release_op_name();
  void set_allocated_op_name(std::string* value);

  private:
  const std::string& _internal_op_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op_name(
      const std::string& value);
  std::string* _internal_mutable_op_name();

  public:
  // uint64 address = 1;
  void clear_address() ;
  ::uint64_t address() const;
  void set_address(::uint64_t value);

  private:
  ::uint64_t _internal_address() const;
  void _internal_set_address(::uint64_t value);

  public:
  // int64 size = 2;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // int64 requested_size = 3;
  void clear_requested_size() ;
  ::int64_t requested_size() const;
  void set_requested_size(::int64_t value);

  private:
  ::int64_t _internal_requested_size() const;
  void _internal_set_requested_size(::int64_t value);

  public:
  // uint64 freed_at_count = 6;
  void clear_freed_at_count() ;
  ::uint64_t freed_at_count() const;
  void set_freed_at_count(::uint64_t value);

  private:
  ::uint64_t _internal_freed_at_count() const;
  void _internal_set_freed_at_count(::uint64_t value);

  public:
  // int32 bin = 4;
  void clear_bin() ;
  ::int32_t bin() const;
  void set_bin(::int32_t value);

  private:
  ::int32_t _internal_bin() const;
  void _internal_set_bin(::int32_t value);

  public:
  // bool in_use = 8;
  void clear_in_use() ;
  bool in_use() const;
  void set_in_use(bool value);

  private:
  bool _internal_in_use() const;
  void _internal_set_in_use(bool value);

  public:
  // uint64 action_count = 7;
  void clear_action_count() ;
  ::uint64_t action_count() const;
  void set_action_count(::uint64_t value);

  private:
  ::uint64_t _internal_action_count() const;
  void _internal_set_action_count(::uint64_t value);

  public:
  // uint64 step_id = 9;
  void clear_step_id() ;
  ::uint64_t step_id() const;
  void set_step_id(::uint64_t value);

  private:
  ::uint64_t _internal_step_id() const;
  void _internal_set_step_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      43, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MemChunk& from_msg);
    ::google::protobuf::internal::ArenaStringPtr op_name_;
    ::uint64_t address_;
    ::int64_t size_;
    ::int64_t requested_size_;
    ::uint64_t freed_at_count_;
    ::int32_t bin_;
    bool in_use_;
    ::uint64_t action_count_;
    ::uint64_t step_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemAllocatorStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemAllocatorStats) */ {
 public:
  inline MemAllocatorStats() : MemAllocatorStats(nullptr) {}
  ~MemAllocatorStats() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemAllocatorStats(
      ::google::protobuf::internal::ConstantInitialized);

  inline MemAllocatorStats(const MemAllocatorStats& from) : MemAllocatorStats(nullptr, from) {}
  inline MemAllocatorStats(MemAllocatorStats&& from) noexcept
      : MemAllocatorStats(nullptr, std::move(from)) {}
  inline MemAllocatorStats& operator=(const MemAllocatorStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemAllocatorStats& operator=(MemAllocatorStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemAllocatorStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemAllocatorStats* internal_default_instance() {
    return reinterpret_cast<const MemAllocatorStats*>(
        &_MemAllocatorStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MemAllocatorStats& a, MemAllocatorStats& b) { a.Swap(&b); }
  inline void Swap(MemAllocatorStats* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemAllocatorStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemAllocatorStats* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MemAllocatorStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemAllocatorStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemAllocatorStats& from) { MemAllocatorStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MemAllocatorStats* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.MemAllocatorStats"; }

 protected:
  explicit MemAllocatorStats(::google::protobuf::Arena* arena);
  MemAllocatorStats(::google::protobuf::Arena* arena, const MemAllocatorStats& from);
  MemAllocatorStats(::google::protobuf::Arena* arena, MemAllocatorStats&& from) noexcept
      : MemAllocatorStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumAllocsFieldNumber = 1,
    kBytesInUseFieldNumber = 2,
    kPeakBytesInUseFieldNumber = 3,
    kLargestAllocSizeFieldNumber = 4,
    kFragmentationMetricFieldNumber = 5,
  };
  // int64 num_allocs = 1;
  void clear_num_allocs() ;
  ::int64_t num_allocs() const;
  void set_num_allocs(::int64_t value);

  private:
  ::int64_t _internal_num_allocs() const;
  void _internal_set_num_allocs(::int64_t value);

  public:
  // int64 bytes_in_use = 2;
  void clear_bytes_in_use() ;
  ::int64_t bytes_in_use() const;
  void set_bytes_in_use(::int64_t value);

  private:
  ::int64_t _internal_bytes_in_use() const;
  void _internal_set_bytes_in_use(::int64_t value);

  public:
  // int64 peak_bytes_in_use = 3;
  void clear_peak_bytes_in_use() ;
  ::int64_t peak_bytes_in_use() const;
  void set_peak_bytes_in_use(::int64_t value);

  private:
  ::int64_t _internal_peak_bytes_in_use() const;
  void _internal_set_peak_bytes_in_use(::int64_t value);

  public:
  // int64 largest_alloc_size = 4;
  void clear_largest_alloc_size() ;
  ::int64_t largest_alloc_size() const;
  void set_largest_alloc_size(::int64_t value);

  private:
  ::int64_t _internal_largest_alloc_size() const;
  void _internal_set_largest_alloc_size(::int64_t value);

  public:
  // float fragmentation_metric = 5;
  void clear_fragmentation_metric() ;
  float fragmentation_metric() const;
  void set_fragmentation_metric(float value);

  private:
  float _internal_fragmentation_metric() const;
  void _internal_set_fragmentation_metric(float value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemAllocatorStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MemAllocatorStats& from_msg);
    ::int64_t num_allocs_;
    ::int64_t bytes_in_use_;
    ::int64_t peak_bytes_in_use_;
    ::int64_t largest_alloc_size_;
    float fragmentation_metric_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT BinSummary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.BinSummary) */ {
 public:
  inline BinSummary() : BinSummary(nullptr) {}
  ~BinSummary() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BinSummary(
      ::google::protobuf::internal::ConstantInitialized);

  inline BinSummary(const BinSummary& from) : BinSummary(nullptr, from) {}
  inline BinSummary(BinSummary&& from) noexcept
      : BinSummary(nullptr, std::move(from)) {}
  inline BinSummary& operator=(const BinSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinSummary& operator=(BinSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinSummary* internal_default_instance() {
    return reinterpret_cast<const BinSummary*>(
        &_BinSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(BinSummary& a, BinSummary& b) { a.Swap(&b); }
  inline void Swap(BinSummary* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinSummary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinSummary* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<BinSummary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BinSummary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BinSummary& from) { BinSummary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BinSummary* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.BinSummary"; }

 protected:
  explicit BinSummary(::google::protobuf::Arena* arena);
  BinSummary(::google::protobuf::Arena* arena, const BinSummary& from);
  BinSummary(::google::protobuf::Arena* arena, BinSummary&& from) noexcept
      : BinSummary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTotalBytesInUseFieldNumber = 2,
    kTotalBytesInBinFieldNumber = 3,
    kTotalChunksInUseFieldNumber = 4,
    kTotalChunksInBinFieldNumber = 5,
    kBinFieldNumber = 1,
  };
  // int64 total_bytes_in_use = 2;
  void clear_total_bytes_in_use() ;
  ::int64_t total_bytes_in_use() const;
  void set_total_bytes_in_use(::int64_t value);

  private:
  ::int64_t _internal_total_bytes_in_use() const;
  void _internal_set_total_bytes_in_use(::int64_t value);

  public:
  // int64 total_bytes_in_bin = 3;
  void clear_total_bytes_in_bin() ;
  ::int64_t total_bytes_in_bin() const;
  void set_total_bytes_in_bin(::int64_t value);

  private:
  ::int64_t _internal_total_bytes_in_bin() const;
  void _internal_set_total_bytes_in_bin(::int64_t value);

  public:
  // int64 total_chunks_in_use = 4;
  void clear_total_chunks_in_use() ;
  ::int64_t total_chunks_in_use() const;
  void set_total_chunks_in_use(::int64_t value);

  private:
  ::int64_t _internal_total_chunks_in_use() const;
  void _internal_set_total_chunks_in_use(::int64_t value);

  public:
  // int64 total_chunks_in_bin = 5;
  void clear_total_chunks_in_bin() ;
  ::int64_t total_chunks_in_bin() const;
  void set_total_chunks_in_bin(::int64_t value);

  private:
  ::int64_t _internal_total_chunks_in_bin() const;
  void _internal_set_total_chunks_in_bin(::int64_t value);

  public:
  // int32 bin = 1;
  void clear_bin() ;
  ::int32_t bin() const;
  void set_bin(::int32_t value);

  private:
  ::int32_t _internal_bin() const;
  void _internal_set_bin(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.BinSummary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BinSummary& from_msg);
    ::int64_t total_bytes_in_use_;
    ::int64_t total_bytes_in_bin_;
    ::int64_t total_chunks_in_use_;
    ::int64_t total_chunks_in_bin_;
    ::int32_t bin_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemoryDump final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemoryDump) */ {
 public:
  inline MemoryDump() : MemoryDump(nullptr) {}
  ~MemoryDump() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryDump(
      ::google::protobuf::internal::ConstantInitialized);

  inline MemoryDump(const MemoryDump& from) : MemoryDump(nullptr, from) {}
  inline MemoryDump(MemoryDump&& from) noexcept
      : MemoryDump(nullptr, std::move(from)) {}
  inline MemoryDump& operator=(const MemoryDump& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryDump& operator=(MemoryDump&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryDump& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryDump* internal_default_instance() {
    return reinterpret_cast<const MemoryDump*>(
        &_MemoryDump_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MemoryDump& a, MemoryDump& b) { a.Swap(&b); }
  inline void Swap(MemoryDump* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryDump* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryDump* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<MemoryDump>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryDump& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemoryDump& from) { MemoryDump::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MemoryDump* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tensorflow.MemoryDump"; }

 protected:
  explicit MemoryDump(::google::protobuf::Arena* arena);
  MemoryDump(::google::protobuf::Arena* arena, const MemoryDump& from);
  MemoryDump(::google::protobuf::Arena* arena, MemoryDump&& from) noexcept
      : MemoryDump(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBinSummaryFieldNumber = 2,
    kChunkFieldNumber = 3,
    kSnapShotFieldNumber = 4,
    kAllocatorNameFieldNumber = 1,
    kStatsFieldNumber = 5,
  };
  // repeated .tensorflow.BinSummary bin_summary = 2;
  int bin_summary_size() const;
  private:
  int _internal_bin_summary_size() const;

  public:
  void clear_bin_summary() ;
  ::tensorflow::BinSummary* mutable_bin_summary(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::BinSummary>* mutable_bin_summary();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::BinSummary>& _internal_bin_summary() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::BinSummary>* _internal_mutable_bin_summary();
  public:
  const ::tensorflow::BinSummary& bin_summary(int index) const;
  ::tensorflow::BinSummary* add_bin_summary();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::BinSummary>& bin_summary() const;
  // repeated .tensorflow.MemChunk chunk = 3;
  int chunk_size() const;
  private:
  int _internal_chunk_size() const;

  public:
  void clear_chunk() ;
  ::tensorflow::MemChunk* mutable_chunk(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::MemChunk>* mutable_chunk();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::MemChunk>& _internal_chunk() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::MemChunk>* _internal_mutable_chunk();
  public:
  const ::tensorflow::MemChunk& chunk(int index) const;
  ::tensorflow::MemChunk* add_chunk();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::MemChunk>& chunk() const;
  // repeated .tensorflow.SnapShot snap_shot = 4;
  int snap_shot_size() const;
  private:
  int _internal_snap_shot_size() const;

  public:
  void clear_snap_shot() ;
  ::tensorflow::SnapShot* mutable_snap_shot(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::SnapShot>* mutable_snap_shot();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::SnapShot>& _internal_snap_shot() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::SnapShot>* _internal_mutable_snap_shot();
  public:
  const ::tensorflow::SnapShot& snap_shot(int index) const;
  ::tensorflow::SnapShot* add_snap_shot();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::SnapShot>& snap_shot() const;
  // string allocator_name = 1;
  void clear_allocator_name() ;
  const std::string& allocator_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_allocator_name(Arg_&& arg, Args_... args);
  std::string* mutable_allocator_name();
  PROTOBUF_NODISCARD std::string* release_allocator_name();
  void set_allocated_allocator_name(std::string* value);

  private:
  const std::string& _internal_allocator_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allocator_name(
      const std::string& value);
  std::string* _internal_mutable_allocator_name();

  public:
  // .tensorflow.MemAllocatorStats stats = 5;
  bool has_stats() const;
  void clear_stats() ;
  const ::tensorflow::MemAllocatorStats& stats() const;
  PROTOBUF_NODISCARD ::tensorflow::MemAllocatorStats* release_stats();
  ::tensorflow::MemAllocatorStats* mutable_stats();
  void set_allocated_stats(::tensorflow::MemAllocatorStats* value);
  void unsafe_arena_set_allocated_stats(::tensorflow::MemAllocatorStats* value);
  ::tensorflow::MemAllocatorStats* unsafe_arena_release_stats();

  private:
  const ::tensorflow::MemAllocatorStats& _internal_stats() const;
  ::tensorflow::MemAllocatorStats* _internal_mutable_stats();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemoryDump)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      44, 2>
      _table_;


  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MemoryDump& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::BinSummary > bin_summary_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::MemChunk > chunk_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::SnapShot > snap_shot_;
    ::google::protobuf::internal::ArenaStringPtr allocator_name_;
    ::tensorflow::MemAllocatorStats* stats_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MemAllocatorStats

// int64 num_allocs = 1;
inline void MemAllocatorStats::clear_num_allocs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_allocs_ = ::int64_t{0};
}
inline ::int64_t MemAllocatorStats::num_allocs() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.num_allocs)
  return _internal_num_allocs();
}
inline void MemAllocatorStats::set_num_allocs(::int64_t value) {
  _internal_set_num_allocs(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.num_allocs)
}
inline ::int64_t MemAllocatorStats::_internal_num_allocs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_allocs_;
}
inline void MemAllocatorStats::_internal_set_num_allocs(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_allocs_ = value;
}

// int64 bytes_in_use = 2;
inline void MemAllocatorStats::clear_bytes_in_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_in_use_ = ::int64_t{0};
}
inline ::int64_t MemAllocatorStats::bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.bytes_in_use)
  return _internal_bytes_in_use();
}
inline void MemAllocatorStats::set_bytes_in_use(::int64_t value) {
  _internal_set_bytes_in_use(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.bytes_in_use)
}
inline ::int64_t MemAllocatorStats::_internal_bytes_in_use() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bytes_in_use_;
}
inline void MemAllocatorStats::_internal_set_bytes_in_use(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_in_use_ = value;
}

// int64 peak_bytes_in_use = 3;
inline void MemAllocatorStats::clear_peak_bytes_in_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peak_bytes_in_use_ = ::int64_t{0};
}
inline ::int64_t MemAllocatorStats::peak_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.peak_bytes_in_use)
  return _internal_peak_bytes_in_use();
}
inline void MemAllocatorStats::set_peak_bytes_in_use(::int64_t value) {
  _internal_set_peak_bytes_in_use(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.peak_bytes_in_use)
}
inline ::int64_t MemAllocatorStats::_internal_peak_bytes_in_use() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.peak_bytes_in_use_;
}
inline void MemAllocatorStats::_internal_set_peak_bytes_in_use(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peak_bytes_in_use_ = value;
}

// int64 largest_alloc_size = 4;
inline void MemAllocatorStats::clear_largest_alloc_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.largest_alloc_size_ = ::int64_t{0};
}
inline ::int64_t MemAllocatorStats::largest_alloc_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.largest_alloc_size)
  return _internal_largest_alloc_size();
}
inline void MemAllocatorStats::set_largest_alloc_size(::int64_t value) {
  _internal_set_largest_alloc_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.largest_alloc_size)
}
inline ::int64_t MemAllocatorStats::_internal_largest_alloc_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.largest_alloc_size_;
}
inline void MemAllocatorStats::_internal_set_largest_alloc_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.largest_alloc_size_ = value;
}

// float fragmentation_metric = 5;
inline void MemAllocatorStats::clear_fragmentation_metric() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fragmentation_metric_ = 0;
}
inline float MemAllocatorStats::fragmentation_metric() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.fragmentation_metric)
  return _internal_fragmentation_metric();
}
inline void MemAllocatorStats::set_fragmentation_metric(float value) {
  _internal_set_fragmentation_metric(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.fragmentation_metric)
}
inline float MemAllocatorStats::_internal_fragmentation_metric() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fragmentation_metric_;
}
inline void MemAllocatorStats::_internal_set_fragmentation_metric(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fragmentation_metric_ = value;
}

// -------------------------------------------------------------------

// MemChunk

// uint64 address = 1;
inline void MemChunk::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_ = ::uint64_t{0u};
}
inline ::uint64_t MemChunk::address() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.address)
  return _internal_address();
}
inline void MemChunk::set_address(::uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.address)
}
inline ::uint64_t MemChunk::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_;
}
inline void MemChunk::_internal_set_address(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_ = value;
}

// int64 size = 2;
inline void MemChunk::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t MemChunk::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.size)
  return _internal_size();
}
inline void MemChunk::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.size)
}
inline ::int64_t MemChunk::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void MemChunk::_internal_set_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// int64 requested_size = 3;
inline void MemChunk::clear_requested_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_size_ = ::int64_t{0};
}
inline ::int64_t MemChunk::requested_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.requested_size)
  return _internal_requested_size();
}
inline void MemChunk::set_requested_size(::int64_t value) {
  _internal_set_requested_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.requested_size)
}
inline ::int64_t MemChunk::_internal_requested_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requested_size_;
}
inline void MemChunk::_internal_set_requested_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_size_ = value;
}

// int32 bin = 4;
inline void MemChunk::clear_bin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bin_ = 0;
}
inline ::int32_t MemChunk::bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.bin)
  return _internal_bin();
}
inline void MemChunk::set_bin(::int32_t value) {
  _internal_set_bin(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.bin)
}
inline ::int32_t MemChunk::_internal_bin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bin_;
}
inline void MemChunk::_internal_set_bin(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bin_ = value;
}

// string op_name = 5;
inline void MemChunk::clear_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_name_.ClearToEmpty();
}
inline const std::string& MemChunk::op_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.op_name)
  return _internal_op_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MemChunk::set_op_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.op_name)
}
inline std::string* MemChunk::mutable_op_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_op_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemChunk.op_name)
  return _s;
}
inline const std::string& MemChunk::_internal_op_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_name_.Get();
}
inline void MemChunk::_internal_set_op_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_name_.Set(value, GetArena());
}
inline std::string* MemChunk::_internal_mutable_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.op_name_.Mutable( GetArena());
}
inline std::string* MemChunk::release_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemChunk.op_name)
  return _impl_.op_name_.Release();
}
inline void MemChunk::set_allocated_op_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.op_name_.IsDefault()) {
          _impl_.op_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemChunk.op_name)
}

// uint64 freed_at_count = 6;
inline void MemChunk::clear_freed_at_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.freed_at_count_ = ::uint64_t{0u};
}
inline ::uint64_t MemChunk::freed_at_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.freed_at_count)
  return _internal_freed_at_count();
}
inline void MemChunk::set_freed_at_count(::uint64_t value) {
  _internal_set_freed_at_count(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.freed_at_count)
}
inline ::uint64_t MemChunk::_internal_freed_at_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.freed_at_count_;
}
inline void MemChunk::_internal_set_freed_at_count(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.freed_at_count_ = value;
}

// uint64 action_count = 7;
inline void MemChunk::clear_action_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_count_ = ::uint64_t{0u};
}
inline ::uint64_t MemChunk::action_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.action_count)
  return _internal_action_count();
}
inline void MemChunk::set_action_count(::uint64_t value) {
  _internal_set_action_count(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.action_count)
}
inline ::uint64_t MemChunk::_internal_action_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_count_;
}
inline void MemChunk::_internal_set_action_count(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_count_ = value;
}

// bool in_use = 8;
inline void MemChunk::clear_in_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_use_ = false;
}
inline bool MemChunk::in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.in_use)
  return _internal_in_use();
}
inline void MemChunk::set_in_use(bool value) {
  _internal_set_in_use(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.in_use)
}
inline bool MemChunk::_internal_in_use() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.in_use_;
}
inline void MemChunk::_internal_set_in_use(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_use_ = value;
}

// uint64 step_id = 9;
inline void MemChunk::clear_step_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = ::uint64_t{0u};
}
inline ::uint64_t MemChunk::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.step_id)
  return _internal_step_id();
}
inline void MemChunk::set_step_id(::uint64_t value) {
  _internal_set_step_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.step_id)
}
inline ::uint64_t MemChunk::_internal_step_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.step_id_;
}
inline void MemChunk::_internal_set_step_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = value;
}

// -------------------------------------------------------------------

// BinSummary

// int32 bin = 1;
inline void BinSummary::clear_bin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bin_ = 0;
}
inline ::int32_t BinSummary::bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.bin)
  return _internal_bin();
}
inline void BinSummary::set_bin(::int32_t value) {
  _internal_set_bin(value);
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.bin)
}
inline ::int32_t BinSummary::_internal_bin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bin_;
}
inline void BinSummary::_internal_set_bin(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bin_ = value;
}

// int64 total_bytes_in_use = 2;
inline void BinSummary::clear_total_bytes_in_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_bytes_in_use_ = ::int64_t{0};
}
inline ::int64_t BinSummary::total_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_bytes_in_use)
  return _internal_total_bytes_in_use();
}
inline void BinSummary::set_total_bytes_in_use(::int64_t value) {
  _internal_set_total_bytes_in_use(value);
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_bytes_in_use)
}
inline ::int64_t BinSummary::_internal_total_bytes_in_use() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_bytes_in_use_;
}
inline void BinSummary::_internal_set_total_bytes_in_use(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_bytes_in_use_ = value;
}

// int64 total_bytes_in_bin = 3;
inline void BinSummary::clear_total_bytes_in_bin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_bytes_in_bin_ = ::int64_t{0};
}
inline ::int64_t BinSummary::total_bytes_in_bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_bytes_in_bin)
  return _internal_total_bytes_in_bin();
}
inline void BinSummary::set_total_bytes_in_bin(::int64_t value) {
  _internal_set_total_bytes_in_bin(value);
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_bytes_in_bin)
}
inline ::int64_t BinSummary::_internal_total_bytes_in_bin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_bytes_in_bin_;
}
inline void BinSummary::_internal_set_total_bytes_in_bin(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_bytes_in_bin_ = value;
}

// int64 total_chunks_in_use = 4;
inline void BinSummary::clear_total_chunks_in_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_chunks_in_use_ = ::int64_t{0};
}
inline ::int64_t BinSummary::total_chunks_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_chunks_in_use)
  return _internal_total_chunks_in_use();
}
inline void BinSummary::set_total_chunks_in_use(::int64_t value) {
  _internal_set_total_chunks_in_use(value);
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_chunks_in_use)
}
inline ::int64_t BinSummary::_internal_total_chunks_in_use() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_chunks_in_use_;
}
inline void BinSummary::_internal_set_total_chunks_in_use(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_chunks_in_use_ = value;
}

// int64 total_chunks_in_bin = 5;
inline void BinSummary::clear_total_chunks_in_bin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_chunks_in_bin_ = ::int64_t{0};
}
inline ::int64_t BinSummary::total_chunks_in_bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_chunks_in_bin)
  return _internal_total_chunks_in_bin();
}
inline void BinSummary::set_total_chunks_in_bin(::int64_t value) {
  _internal_set_total_chunks_in_bin(value);
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_chunks_in_bin)
}
inline ::int64_t BinSummary::_internal_total_chunks_in_bin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_chunks_in_bin_;
}
inline void BinSummary::_internal_set_total_chunks_in_bin(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_chunks_in_bin_ = value;
}

// -------------------------------------------------------------------

// SnapShot

// uint64 action_count = 1;
inline void SnapShot::clear_action_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_count_ = ::uint64_t{0u};
}
inline ::uint64_t SnapShot::action_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.SnapShot.action_count)
  return _internal_action_count();
}
inline void SnapShot::set_action_count(::uint64_t value) {
  _internal_set_action_count(value);
  // @@protoc_insertion_point(field_set:tensorflow.SnapShot.action_count)
}
inline ::uint64_t SnapShot::_internal_action_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_count_;
}
inline void SnapShot::_internal_set_action_count(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_count_ = value;
}

// int64 size = 2;
inline void SnapShot::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t SnapShot::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.SnapShot.size)
  return _internal_size();
}
inline void SnapShot::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.SnapShot.size)
}
inline ::int64_t SnapShot::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void SnapShot::_internal_set_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// MemoryDump

// string allocator_name = 1;
inline void MemoryDump::clear_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_name_.ClearToEmpty();
}
inline const std::string& MemoryDump::allocator_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.allocator_name)
  return _internal_allocator_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MemoryDump::set_allocator_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryDump.allocator_name)
}
inline std::string* MemoryDump::mutable_allocator_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_allocator_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.allocator_name)
  return _s;
}
inline const std::string& MemoryDump::_internal_allocator_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocator_name_.Get();
}
inline void MemoryDump::_internal_set_allocator_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_name_.Set(value, GetArena());
}
inline std::string* MemoryDump::_internal_mutable_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.allocator_name_.Mutable( GetArena());
}
inline std::string* MemoryDump::release_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryDump.allocator_name)
  return _impl_.allocator_name_.Release();
}
inline void MemoryDump::set_allocated_allocator_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.allocator_name_.IsDefault()) {
          _impl_.allocator_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryDump.allocator_name)
}

// repeated .tensorflow.BinSummary bin_summary = 2;
inline int MemoryDump::_internal_bin_summary_size() const {
  return _internal_bin_summary().size();
}
inline int MemoryDump::bin_summary_size() const {
  return _internal_bin_summary_size();
}
inline void MemoryDump::clear_bin_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bin_summary_.Clear();
}
inline ::tensorflow::BinSummary* MemoryDump::mutable_bin_summary(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.bin_summary)
  return _internal_mutable_bin_summary()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::BinSummary>* MemoryDump::mutable_bin_summary()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.bin_summary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bin_summary();
}
inline const ::tensorflow::BinSummary& MemoryDump::bin_summary(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.bin_summary)
  return _internal_bin_summary().Get(index);
}
inline ::tensorflow::BinSummary* MemoryDump::add_bin_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::BinSummary* _add = _internal_mutable_bin_summary()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.bin_summary)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::BinSummary>& MemoryDump::bin_summary() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.bin_summary)
  return _internal_bin_summary();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::BinSummary>&
MemoryDump::_internal_bin_summary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bin_summary_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::BinSummary>*
MemoryDump::_internal_mutable_bin_summary() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bin_summary_;
}

// repeated .tensorflow.MemChunk chunk = 3;
inline int MemoryDump::_internal_chunk_size() const {
  return _internal_chunk().size();
}
inline int MemoryDump::chunk_size() const {
  return _internal_chunk_size();
}
inline void MemoryDump::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.Clear();
}
inline ::tensorflow::MemChunk* MemoryDump::mutable_chunk(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.chunk)
  return _internal_mutable_chunk()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::MemChunk>* MemoryDump::mutable_chunk()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.chunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chunk();
}
inline const ::tensorflow::MemChunk& MemoryDump::chunk(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.chunk)
  return _internal_chunk().Get(index);
}
inline ::tensorflow::MemChunk* MemoryDump::add_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::MemChunk* _add = _internal_mutable_chunk()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.chunk)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::MemChunk>& MemoryDump::chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.chunk)
  return _internal_chunk();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::MemChunk>&
MemoryDump::_internal_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::MemChunk>*
MemoryDump::_internal_mutable_chunk() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chunk_;
}

// repeated .tensorflow.SnapShot snap_shot = 4;
inline int MemoryDump::_internal_snap_shot_size() const {
  return _internal_snap_shot().size();
}
inline int MemoryDump::snap_shot_size() const {
  return _internal_snap_shot_size();
}
inline void MemoryDump::clear_snap_shot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snap_shot_.Clear();
}
inline ::tensorflow::SnapShot* MemoryDump::mutable_snap_shot(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.snap_shot)
  return _internal_mutable_snap_shot()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::SnapShot>* MemoryDump::mutable_snap_shot()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.snap_shot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_snap_shot();
}
inline const ::tensorflow::SnapShot& MemoryDump::snap_shot(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.snap_shot)
  return _internal_snap_shot().Get(index);
}
inline ::tensorflow::SnapShot* MemoryDump::add_snap_shot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::SnapShot* _add = _internal_mutable_snap_shot()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.snap_shot)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::SnapShot>& MemoryDump::snap_shot() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.snap_shot)
  return _internal_snap_shot();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::SnapShot>&
MemoryDump::_internal_snap_shot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snap_shot_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::SnapShot>*
MemoryDump::_internal_mutable_snap_shot() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.snap_shot_;
}

// .tensorflow.MemAllocatorStats stats = 5;
inline bool MemoryDump::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void MemoryDump::clear_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::MemAllocatorStats& MemoryDump::_internal_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::MemAllocatorStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::MemAllocatorStats&>(::tensorflow::_MemAllocatorStats_default_instance_);
}
inline const ::tensorflow::MemAllocatorStats& MemoryDump::stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.stats)
  return _internal_stats();
}
inline void MemoryDump::unsafe_arena_set_allocated_stats(::tensorflow::MemAllocatorStats* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = reinterpret_cast<::tensorflow::MemAllocatorStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryDump.stats)
}
inline ::tensorflow::MemAllocatorStats* MemoryDump::release_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::MemAllocatorStats* released = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tensorflow::MemAllocatorStats* MemoryDump::unsafe_arena_release_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryDump.stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::MemAllocatorStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::tensorflow::MemAllocatorStats* MemoryDump::_internal_mutable_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stats_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::MemAllocatorStats>(GetArena());
    _impl_.stats_ = reinterpret_cast<::tensorflow::MemAllocatorStats*>(p);
  }
  return _impl_.stats_;
}
inline ::tensorflow::MemAllocatorStats* MemoryDump::mutable_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::MemAllocatorStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.stats)
  return _msg;
}
inline void MemoryDump::set_allocated_stats(::tensorflow::MemAllocatorStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stats_ = reinterpret_cast<::tensorflow::MemAllocatorStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryDump.stats)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_2epb_2eh
